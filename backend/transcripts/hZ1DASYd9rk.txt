Kind: captions Language: en asp.net core from microsoft is one of asp.net core from microsoft is one of asp.net core from microsoft is one of the most popular web frameworks the most popular web frameworks the most popular web frameworks experience developer brugin patel will experience developer brugin patel will experience developer brugin patel will teach you how to use dotnet 6 which is teach you how to use dotnet 6 which is teach you how to use dotnet 6 which is the latest version hi guys and welcome the latest version hi guys and welcome the latest version hi guys and welcome to dot net mastery my name is broken and to dot net mastery my name is broken and to dot net mastery my name is broken and in this course we will walk through the in this course we will walk through the in this course we will walk through the basic foundations of dot net core basic foundations of dot net core basic foundations of dot net core application application application we will be using dot net 6 in this we will be using dot net 6 in this we will be using dot net 6 in this course along with visual studio 2022 course along with visual studio 2022 course along with visual studio 2022 dot net core has been a buzzword in the dot net core has been a buzzword in the dot net core has been a buzzword in the industry for a while industry for a while industry for a while and recently it has been gaining more and recently it has been gaining more and recently it has been gaining more and more attention because of the and more attention because of the and more attention because of the efficiency and the advantages that it efficiency and the advantages that it efficiency and the advantages that it brings brings brings so first let's take a look at what are so first let's take a look at what are so first let's take a look at what are all the exciting topics that we will all the exciting topics that we will all the exciting topics that we will cover in this course cover in this course cover in this course foundation is a basic element of any foundation is a basic element of any foundation is a basic element of any building and that will be the first building and that will be the first building and that will be the first thing that we will learn as we explore thing that we will learn as we explore thing that we will learn as we explore the fundamentals of net core and its the fundamentals of net core and its the fundamentals of net core and its evolution evolution evolution then it's critical to understand what is then it's critical to understand what is then it's critical to understand what is new in darknet 6 when it comes to an mvc new in darknet 6 when it comes to an mvc new in darknet 6 when it comes to an mvc application application application so i will highlight the new features in so i will highlight the new features in so i will highlight the new features in darknet 6 with respect to the mvc darknet 6 with respect to the mvc darknet 6 with respect to the mvc application application application we will be using entity framework core we will be using entity framework core we will be using entity framework core to set up database connection string and to set up database connection string and to set up database connection string and perform all the database related perform all the database related perform all the database related operation operation operation once we have entity framework code once we have entity framework code once we have entity framework code configured we will be performing grunt configured we will be performing grunt configured we will be performing grunt operations on any model operations on any model operations on any model crud stands for create read update and crud stands for create read update and crud stands for create read update and delete delete delete so while we perform the grud operations so while we perform the grud operations so while we perform the grud operations we will also understand how client-side we will also understand how client-side we will also understand how client-side and server-side validations work with and server-side validations work with and server-side validations work with net core net core net core we will display nice alerts using temp we will display nice alerts using temp we will display nice alerts using temp data and toaster.js data and toaster.js data and toaster.js now while we learn all of this one now while we learn all of this one now while we learn all of this one critical piece is error solving when it critical piece is error solving when it critical piece is error solving when it comes to any programming i will display comes to any programming i will display comes to any programming i will display you some of the common errors and how you some of the common errors and how you some of the common errors and how will you approach those errors and will you approach those errors and will you approach those errors and resolve them resolve them resolve them lastly we will deploy our application to lastly we will deploy our application to lastly we will deploy our application to azure and we will see everything live azure and we will see everything live azure and we will see everything live including sql server including sql server including sql server which will be hosted on azure as well which will be hosted on azure as well which will be hosted on azure as well so you can see there is quite a few so you can see there is quite a few so you can see there is quite a few things that we will be learning in this things that we will be learning in this things that we will be learning in this course course course let's get started with all of that from let's get started with all of that from let's get started with all of that from the next video the next video the next video in this video let me show you the demo in this video let me show you the demo in this video let me show you the demo application that we will be building application that we will be building application that we will be building we will start with an empty project and we will start with an empty project and we will start with an empty project and then we will use boots watch theme to then we will use boots watch theme to then we will use boots watch theme to add a nice styling add a nice styling add a nice styling next we will be building a category grud next we will be building a category grud next we will be building a category grud project project project so when you click on category in the so when you click on category in the so when you click on category in the navigation bar it will open up the page navigation bar it will open up the page navigation bar it will open up the page and it will display all the categories and it will display all the categories and it will display all the categories first thing that you notice here is we first thing that you notice here is we first thing that you notice here is we have a create category button when we have a create category button when we have a create category button when we click there it takes us to category click there it takes us to category click there it takes us to category create and here without populating create and here without populating create and here without populating anything if you press the create button anything if you press the create button anything if you press the create button we have default client-side validation we have default client-side validation we have default client-side validation not just that we also have some server not just that we also have some server not just that we also have some server side validation side validation side validation like if we enter both name and display like if we enter both name and display like if we enter both name and display order to be same and hit the create order to be same and hit the create order to be same and hit the create button we have a server side validation button we have a server side validation button we have a server side validation that display order cannot exactly match that display order cannot exactly match that display order cannot exactly match the name the name the name then we have a back to list button here then we have a back to list button here then we have a back to list button here to go back to our index page with the to go back to our index page with the to go back to our index page with the category list category list category list we can edit any of the existing category we can edit any of the existing category we can edit any of the existing category and as soon as you edit or create and as soon as you edit or create and as soon as you edit or create something we have nice toaster alerts something we have nice toaster alerts something we have nice toaster alerts that you can see that you can see that you can see lastly we will implement the delete lastly we will implement the delete lastly we will implement the delete functionality and on that also we will functionality and on that also we will functionality and on that also we will have our alerts have our alerts have our alerts so we will see server side client-side so we will see server side client-side so we will see server side client-side validation we will implement toaster validation we will implement toaster validation we will implement toaster alerts and take a look at temp data alerts and take a look at temp data alerts and take a look at temp data not only that once we complete the not only that once we complete the not only that once we complete the application we will be deploying that to application we will be deploying that to application we will be deploying that to azure azure azure so that will give you a complete flow of so that will give you a complete flow of so that will give you a complete flow of the application the application the application as we deploy things to azure along with as we deploy things to azure along with as we deploy things to azure along with our database our database our database so with that let's start on this from so with that let's start on this from so with that let's start on this from the next video the next video the next video let's take a look at all the tools that let's take a look at all the tools that let's take a look at all the tools that we will use in this course we will use in this course we will use in this course we will be using dot net 6 for our we will be using dot net 6 for our we will be using dot net 6 for our application application application so make sure to install the latest so make sure to install the latest so make sure to install the latest version of darknet 6. version of darknet 6. version of darknet 6. for the ide we will be using visual for the ide we will be using visual for the ide we will be using visual studio studio studio the version that i will be using is the version that i will be using is the version that i will be using is visual studio 2022 visual studio 2022 visual studio 2022 there are lots of advanced features in there are lots of advanced features in there are lots of advanced features in 2022 as compared to 2019 2022 as compared to 2019 2022 as compared to 2019 so you can always install the free so you can always install the free so you can always install the free version of visual studio 2022 version of visual studio 2022 version of visual studio 2022 for our database we will be using sql for our database we will be using sql for our database we will be using sql server server server so first you will have to install sql so first you will have to install sql so first you will have to install sql server and then you should install ssms server and then you should install ssms server and then you should install ssms which is sql server management studio if which is sql server management studio if which is sql server management studio if you have older version of ssms that's you have older version of ssms that's you have older version of ssms that's completely okay completely okay completely okay as long as you're able to connect to sql as long as you're able to connect to sql as long as you're able to connect to sql server on your local machine we will be server on your local machine we will be server on your local machine we will be using that connection string and using that connection string and using that connection string and everything will work everything will work everything will work so once you install all three of these so once you install all three of these so once you install all three of these softwares let's continue from the next softwares let's continue from the next softwares let's continue from the next video video video in this video i want to walk you through in this video i want to walk you through in this video i want to walk you through the journey of dot-net core the journey of dot-net core the journey of dot-net core net core is probably the biggest change net core is probably the biggest change net core is probably the biggest change that the dot net language has that the dot net language has that the dot net language has encountered encountered encountered in 2002 microsoft introduced web forms in 2002 microsoft introduced web forms in 2002 microsoft introduced web forms which was a revolution at that time which was a revolution at that time which was a revolution at that time webforms has its drawbacks and there was webforms has its drawbacks and there was webforms has its drawbacks and there was a need to overcome all of them a need to overcome all of them a need to overcome all of them because of that the dotnet team came up because of that the dotnet team came up because of that the dotnet team came up with a new architecture which was dotnet with a new architecture which was dotnet with a new architecture which was dotnet mvc mvc mvc now even though i love mvc and i have now even though i love mvc and i have now even though i love mvc and i have built many applications in mvc it had built many applications in mvc it had built many applications in mvc it had its flaws its flaws its flaws like it was created on top of the like it was created on top of the like it was created on top of the components for web forms components for web forms components for web forms because of that it was tied to iis and because of that it was tied to iis and because of that it was tied to iis and ultimately windows operating system ultimately windows operating system ultimately windows operating system but with the evolution of web but with the evolution of web but with the evolution of web development microsoft had to keep up development microsoft had to keep up development microsoft had to keep up with the changing technology with the changing technology with the changing technology finally in june of 2016 microsoft finally in june of 2016 microsoft finally in june of 2016 microsoft released asp.net core and it was the released asp.net core and it was the released asp.net core and it was the first version first version first version now.net core is built on top of the now.net core is built on top of the now.net core is built on top of the new.net core framework it is completely new.net core framework it is completely new.net core framework it is completely rewritten and it is a cross-platform rewritten and it is a cross-platform rewritten and it is a cross-platform version hence it is not tied with version hence it is not tied with version hence it is not tied with windows windows windows also.net core was built with cloud in also.net core was built with cloud in also.net core was built with cloud in mind mind mind so it is extremely robust with that so it is extremely robust with that so it is extremely robust with that then in august of 2018 microsoft then in august of 2018 microsoft then in august of 2018 microsoft released.net core 2 and the team has released.net core 2 and the team has released.net core 2 and the team has been active with releasing new versions been active with releasing new versions been active with releasing new versions there was a big change from dotnet 2.1 there was a big change from dotnet 2.1 there was a big change from dotnet 2.1 to 2.2 because we had to update quite a to 2.2 because we had to update quite a to 2.2 because we had to update quite a few class libraries and there were few few class libraries and there were few few class libraries and there were few challenges challenges challenges but since then dot net core team has but since then dot net core team has but since then dot net core team has been releasing new versions with 3 3.1 been releasing new versions with 3 3.1 been releasing new versions with 3 3.1 and net 5 which was released in november and net 5 which was released in november and net 5 which was released in november of 2020 of 2020 of 2020 after that there is dotnet 6 which will after that there is dotnet 6 which will after that there is dotnet 6 which will be released in november of 2021 be released in november of 2021 be released in november of 2021 we will be using the preview version but we will be using the preview version but we will be using the preview version but whatever we learn will be the same once whatever we learn will be the same once whatever we learn will be the same once dotnet 6 is released dotnet 6 is released dotnet 6 is released so this is a small overview of all so this is a small overview of all so this is a small overview of all the.net frameworks and their evolution the.net frameworks and their evolution the.net frameworks and their evolution that being said why should one use that being said why should one use that being said why should one use dotnet core as compared to the dotnet core as compared to the dotnet core as compared to the classic.net classic.net classic.net dot net core comes with many advantages dot net core comes with many advantages dot net core comes with many advantages first one is asp.net core is fast and first one is asp.net core is fast and first one is asp.net core is fast and open source open source open source if you compare that to the if you compare that to the if you compare that to the traditional.net applications that have traditional.net applications that have traditional.net applications that have been quite a few benchmarks and it is been quite a few benchmarks and it is been quite a few benchmarks and it is very fast when you compare that to web very fast when you compare that to web very fast when you compare that to web forms or even dotnet mvc forms or even dotnet mvc forms or even dotnet mvc net core is also cross-platform net core is also cross-platform net core is also cross-platform the classic.net was tied to iis and the classic.net was tied to iis and the classic.net was tied to iis and windows windows windows but since the.net core is rewritten it but since the.net core is rewritten it but since the.net core is rewritten it has removed that dependency with net has removed that dependency with net has removed that dependency with net core core core we also have a built-in support for we also have a built-in support for we also have a built-in support for dependency injection which saves a lot dependency injection which saves a lot dependency injection which saves a lot of time and it is extremely helpful of time and it is extremely helpful of time and it is extremely helpful once you get used with using dependency once you get used with using dependency once you get used with using dependency injection you cannot imagine your injection you cannot imagine your injection you cannot imagine your application without that application without that application without that with any programming language it is with any programming language it is with any programming language it is critical that the new updates are the critical that the new updates are the critical that the new updates are the new version that are released they new version that are released they new version that are released they should be easily upgradable should be easily upgradable should be easily upgradable and that is one of the feature with dot and that is one of the feature with dot and that is one of the feature with dot net core net core net core when a new version is released updating when a new version is released updating when a new version is released updating to that new version does not have ground to that new version does not have ground to that new version does not have ground breaking changes breaking changes breaking changes because of that you can always keep up because of that you can always keep up because of that you can always keep up with the new versions with the new versions with the new versions dot net code is also cloud friendly dot net code is also cloud friendly dot net code is also cloud friendly when the dot net code was being written when the dot net code was being written when the dot net code was being written cloud architecture was kept in mind and cloud architecture was kept in mind and cloud architecture was kept in mind and because of that it is completely because of that it is completely because of that it is completely compatible with all of the cloud compatible with all of the cloud compatible with all of the cloud components components components and lastly when it comes to performance and lastly when it comes to performance and lastly when it comes to performance dotnet code exceeds all of the previous dotnet code exceeds all of the previous dotnet code exceeds all of the previous versions and even the new versions in versions and even the new versions in versions and even the new versions in dot net core that are being released dot net core that are being released dot net core that are being released they supersede the previous version they supersede the previous version they supersede the previous version the code actually gets more optimized the code actually gets more optimized the code actually gets more optimized that results into improved performance that results into improved performance that results into improved performance the asp.net core compiler will the asp.net core compiler will the asp.net core compiler will eventually optimize the entire code eventually optimize the entire code eventually optimize the entire code whenever the code is recomposed using whenever the code is recomposed using whenever the code is recomposed using the.net core framework the.net core framework the.net core framework dot net core's actual performance is dot net core's actual performance is dot net core's actual performance is multiple times than any of the multiple times than any of the multiple times than any of the frameworks previous implementation frameworks previous implementation frameworks previous implementation because of that it is clear that because of that it is clear that because of that it is clear that microsoft has a long long-term plan with microsoft has a long long-term plan with microsoft has a long long-term plan with dotnet code technology dotnet code technology dotnet code technology so with that brief overview let's so with that brief overview let's so with that brief overview let's continue our learning in the next video in this video before we take a look at in this video before we take a look at in this video before we take a look at the other files i will introduce you to the other files i will introduce you to the other files i will introduce you to a new concept which is dependency a new concept which is dependency a new concept which is dependency injection injection injection asp.net core implements a simple asp.net core implements a simple asp.net core implements a simple built-in dependency injection built-in dependency injection built-in dependency injection container dependency injection is an container dependency injection is an container dependency injection is an integral part of the asp.net core integral part of the asp.net core integral part of the asp.net core architecture architecture architecture dot net core injects objects of dot net core injects objects of dot net core injects objects of dependency classes through constructor dependency classes through constructor dependency classes through constructor by using the built-in ioc container by using the built-in ioc container by using the built-in ioc container before i show you what advantages before i show you what advantages before i show you what advantages dependency injection brings dependency injection brings dependency injection brings let's see a scenario where there is no let's see a scenario where there is no let's see a scenario where there is no dependency injection dependency injection dependency injection in a typical application let's say we in a typical application let's say we in a typical application let's say we have three pages right now and we have have three pages right now and we have have three pages right now and we have some common functionality that we want some common functionality that we want some common functionality that we want to use across all the three pages to use across all the three pages to use across all the three pages like let's say we want to send emails like let's say we want to send emails like let's say we want to send emails and we want to access our database in and we want to access our database in and we want to access our database in all the three pages that we have all the three pages that we have all the three pages that we have now let's imagine that on these three now let's imagine that on these three now let's imagine that on these three pages we need to access the database pages we need to access the database pages we need to access the database first first first so what we will do is we will create the so what we will do is we will create the so what we will do is we will create the object for database classes on all the object for database classes on all the object for database classes on all the three pages we will have to open that three pages we will have to open that three pages we will have to open that connection we will have to do the connection we will have to do the connection we will have to do the database operation and then we will have database operation and then we will have database operation and then we will have to close the connection in all the to close the connection in all the to close the connection in all the places places places to do the same and create object for to do the same and create object for to do the same and create object for email implementation that we have in all email implementation that we have in all email implementation that we have in all the three pages the three pages the three pages so you can see this is lot of duplicate so you can see this is lot of duplicate so you can see this is lot of duplicate code code code on top of that what happens in future if on top of that what happens in future if on top of that what happens in future if you change the implementation of how you you change the implementation of how you you change the implementation of how you access the database or email access the database or email access the database or email based on the current configuration you based on the current configuration you based on the current configuration you might have to make that change in all of might have to make that change in all of might have to make that change in all of the three pages the three pages the three pages which is a big mess because right now which is a big mess because right now which is a big mess because right now it's three pages down the line it could it's three pages down the line it could it's three pages down the line it could be 30 or 300 pages be 30 or 300 pages be 30 or 300 pages another issue here is that on each page another issue here is that on each page another issue here is that on each page you will deal with creating the object you will deal with creating the object you will deal with creating the object managing them as well as disposing them managing them as well as disposing them managing them as well as disposing them and that will be a time consuming effort and that will be a time consuming effort and that will be a time consuming effort when we have to do that in all the pages when we have to do that in all the pages when we have to do that in all the pages so that being said what is a solution to so that being said what is a solution to so that being said what is a solution to avoid all of this and get an optimal avoid all of this and get an optimal avoid all of this and get an optimal architecture architecture architecture the answer to all of that is dependency the answer to all of that is dependency the answer to all of that is dependency injection injection injection first let me show how the scenario would first let me show how the scenario would first let me show how the scenario would look like again we will have the three look like again we will have the three look like again we will have the three pages and we will have email and pages and we will have email and pages and we will have email and database functionality database functionality database functionality these are the common things that we had these are the common things that we had these are the common things that we had before as well before as well before as well but now we will have something special but now we will have something special but now we will have something special which is dependency injection container which is dependency injection container which is dependency injection container so as you can see we have got our so as you can see we have got our so as you can see we have got our dependency injection container that will dependency injection container that will dependency injection container that will have an i email and an itb interface and have an i email and an itb interface and have an i email and an itb interface and its implementation its implementation its implementation so inside our container we have the so inside our container we have the so inside our container we have the implementation of the i email interface implementation of the i email interface implementation of the i email interface and the itb interface and the itb interface and the itb interface when any page will need access to these when any page will need access to these when any page will need access to these functionalities it will just ask the functionalities it will just ask the functionalities it will just ask the dependency injection container to create dependency injection container to create dependency injection container to create an object of this functionality an object of this functionality an object of this functionality and directly give page an object to use and directly give page an object to use and directly give page an object to use so inside the page we will actually be so inside the page we will actually be so inside the page we will actually be using an interface and then dependency using an interface and then dependency using an interface and then dependency injection does all its magic of passing injection does all its magic of passing injection does all its magic of passing the object when the website needs it the object when the website needs it the object when the website needs it that way we do not have to deal with that way we do not have to deal with that way we do not have to deal with creating the object disposing or creating the object disposing or creating the object disposing or managing that object inside our pages managing that object inside our pages managing that object inside our pages our pages will look very clean with just our pages will look very clean with just our pages will look very clean with just the interface the interface the interface all the instance and implementation will all the instance and implementation will all the instance and implementation will be done by dependency injection be done by dependency injection be done by dependency injection container container container now in future if you want to change or now in future if you want to change or now in future if you want to change or replace the email class you do not have replace the email class you do not have replace the email class you do not have to make any changes in the pages to make any changes in the pages to make any changes in the pages all you have to do is just change the all you have to do is just change the all you have to do is just change the implementation inside the email class implementation inside the email class implementation inside the email class and since we are registering that in the and since we are registering that in the and since we are registering that in the container container container next time when we build the project it next time when we build the project it next time when we build the project it will take the new implementation will take the new implementation will take the new implementation so you can see we only have to change in so you can see we only have to change in so you can see we only have to change in one place now one place now one place now that is one of the main advantage that that is one of the main advantage that that is one of the main advantage that comes with dependency injection comes with dependency injection comes with dependency injection now in order to use dependency injection now in order to use dependency injection now in order to use dependency injection you can use many third-party tools you can use many third-party tools you can use many third-party tools but with dot net core we have a built-in but with dot net core we have a built-in but with dot net core we have a built-in dependency injection container and that dependency injection container and that dependency injection container and that has its own advantages has its own advantages has its own advantages so i hope with that you have a short so i hope with that you have a short so i hope with that you have a short overview of how dependency injection is overview of how dependency injection is overview of how dependency injection is helpful first thing that we have to do is we first thing that we have to do is we first thing that we have to do is we need to create our project need to create our project need to create our project i will be using visual studio 2022 i will be using visual studio 2022 i will be using visual studio 2022 here we have the recent projects on the here we have the recent projects on the here we have the recent projects on the left and on the right hand side we will left and on the right hand side we will left and on the right hand side we will get started we want to start by creating get started we want to start by creating get started we want to start by creating a new project a new project a new project so we will click that so we will click that so we will click that and it will display all of the templates and it will display all of the templates and it will display all of the templates you can either navigate and try to find you can either navigate and try to find you can either navigate and try to find the template or you can just search here the template or you can just search here the template or you can just search here for model for model for model views and controller views and controller views and controller as soon as you type that you see there as soon as you type that you see there as soon as you type that you see there are two templates that are available are two templates that are available are two templates that are available right here right here right here we will be using the asp.net core with we will be using the asp.net core with we will be using the asp.net core with c-sharp language we do not want the c-sharp language we do not want the c-sharp language we do not want the other language other language other language so select the c-sharp language or so select the c-sharp language or so select the c-sharp language or asp.net code web app and we have model asp.net code web app and we have model asp.net code web app and we have model views and controller views and controller views and controller let's hit the next button and we have let's hit the next button and we have let's hit the next button and we have few more options that we have to few more options that we have to few more options that we have to configure configure configure before writing the project name we can before writing the project name we can before writing the project name we can give our solution a meaningful name give our solution a meaningful name give our solution a meaningful name so let's say we are making our project so let's say we are making our project so let's say we are making our project for bulky book for bulky book for bulky book and in there you can have multiple and in there you can have multiple and in there you can have multiple projects like there can be data access projects like there can be data access projects like there can be data access layer that can be business layer that layer that can be business layer that layer that can be business layer that can be web layer and so on can be web layer and so on can be web layer and so on so solution name we can keep that as so solution name we can keep that as so solution name we can keep that as bulky book bulky book bulky book and then the project name let's call and then the project name let's call and then the project name let's call this bulky book this bulky book this bulky book web web web that way you can keep the project name that way you can keep the project name that way you can keep the project name and the solution name separated and the solution name separated and the solution name separated let me change the location to where i let me change the location to where i let me change the location to where i want to save on my computer and we will want to save on my computer and we will want to save on my computer and we will hit next button hit next button hit next button final thing that we have to select here final thing that we have to select here final thing that we have to select here is the framework version is the framework version is the framework version we will be using dotnet 6 so we will we will be using dotnet 6 so we will we will be using dotnet 6 so we will select that in the first option next we select that in the first option next we select that in the first option next we have authentication time have authentication time have authentication time when you click the authentication when you click the authentication when you click the authentication drop-down there are individual users drop-down there are individual users drop-down there are individual users account microsoft identity platform and account microsoft identity platform and account microsoft identity platform and windows windows windows right now we want to keep things simple right now we want to keep things simple right now we want to keep things simple and understand the basic folder and understand the basic folder and understand the basic folder structures of when an empty.net core mvc structures of when an empty.net core mvc structures of when an empty.net core mvc project is created project is created project is created so we will select none inside the so we will select none inside the so we will select none inside the authentication authentication authentication we will keep the configure for https we will keep the configure for https we will keep the configure for https selected we do not want to enable docker selected we do not want to enable docker selected we do not want to enable docker right now because we do not want to work right now because we do not want to work right now because we do not want to work with the containers with the containers with the containers with this configuration let's create our with this configuration let's create our with this configuration let's create our project project project it will take a while but it will create it will take a while but it will create it will take a while but it will create the project and it will load all of the the project and it will load all of the the project and it will load all of the files and folders files and folders files and folders great so once the project is created it great so once the project is created it great so once the project is created it will load the complete view of visual will load the complete view of visual will load the complete view of visual studio studio studio on the left side here we have the main on the left side here we have the main on the left side here we have the main panel where we will be coding everything panel where we will be coding everything panel where we will be coding everything and on the right side we have solution and on the right side we have solution and on the right side we have solution explorer git changes if we want to explorer git changes if we want to explorer git changes if we want to commit and some properties commit and some properties commit and some properties now by mistake if you close the solution now by mistake if you close the solution now by mistake if you close the solution explorer here do not panic explorer here do not panic explorer here do not panic you can open it back up by going to you can open it back up by going to you can open it back up by going to views here and we have the first option views here and we have the first option views here and we have the first option which is solution explorer which is solution explorer which is solution explorer with that in place let's continue from with that in place let's continue from with that in place let's continue from the next video now that our project has been created now that our project has been created now that our project has been created let's take a look at the files and let's take a look at the files and let's take a look at the files and folders that we have by default folders that we have by default folders that we have by default the first thing that we should take a the first thing that we should take a the first thing that we should take a look at is the project file look at is the project file look at is the project file in order to access the project file you in order to access the project file you in order to access the project file you will right click on the project name not will right click on the project name not will right click on the project name not the solution we have our project with the solution we have our project with the solution we have our project with the website icon here the website icon here the website icon here if you right click there we have the if you right click there we have the if you right click there we have the edit project file edit project file edit project file when you open that up you will see view when you open that up you will see view when you open that up you will see view configuration right here configuration right here configuration right here the first section here defines what is the first section here defines what is the first section here defines what is the target framework that we are using the target framework that we are using the target framework that we are using we are using dotnet 6 so you can see we are using dotnet 6 so you can see we are using dotnet 6 so you can see that right here that right here that right here the next important thing inside this the next important thing inside this the next important thing inside this file is the item group file is the item group file is the item group item group will contain all the nuget item group will contain all the nuget item group will contain all the nuget packages that we are using in the packages that we are using in the packages that we are using in the project project project we selected the runtime compilation and we selected the runtime compilation and we selected the runtime compilation and that's why that package has been that's why that package has been that's why that package has been installed installed installed in future we will be installing more in future we will be installing more in future we will be installing more packages when we connect to database use packages when we connect to database use packages when we connect to database use entity framework code and so on entity framework code and so on entity framework code and so on so in that case when we add nuget so in that case when we add nuget so in that case when we add nuget packages to our project a new entry will packages to our project a new entry will packages to our project a new entry will be made inside the cs broach file or the be made inside the cs broach file or the be made inside the cs broach file or the project file project file project file now usually you do not work with the now usually you do not work with the now usually you do not work with the project file but it is always good to project file but it is always good to project file but it is always good to know that we have all the packages and know that we have all the packages and know that we have all the packages and the references listed in the project the references listed in the project the references listed in the project file if in case you need to access that file if in case you need to access that file if in case you need to access that so that covers our first file which is so that covers our first file which is so that covers our first file which is the cs branch or the project file the cs branch or the project file the cs branch or the project file now that we have seen the project file now that we have seen the project file now that we have seen the project file the next thing that i want to show you the next thing that i want to show you the next thing that i want to show you is we have dependencies here and we can is we have dependencies here and we can is we have dependencies here and we can see the packages that we saw previously see the packages that we saw previously see the packages that we saw previously inside the project file will be inside the project file will be inside the project file will be installed right here installed right here installed right here we will be adding more packages down the we will be adding more packages down the we will be adding more packages down the road road road but the next folder that we have is the but the next folder that we have is the but the next folder that we have is the properties folder and inside there we properties folder and inside there we properties folder and inside there we have launch settings.json have launch settings.json have launch settings.json in here we have the different profiles in here we have the different profiles in here we have the different profiles using which we can run our application using which we can run our application using which we can run our application like you can see inside the profiles we like you can see inside the profiles we like you can see inside the profiles we have a bulky book web profile and we have a bulky book web profile and we have a bulky book web profile and we have an iis express profile have an iis express profile have an iis express profile if we use the iis express profile we if we use the iis express profile we if we use the iis express profile we know the port number that will be used know the port number that will be used know the port number that will be used here is explicitly defined here is explicitly defined here is explicitly defined if we use the bulky book web if we use the bulky book web if we use the bulky book web in that case it will use 5000 and 5001 in that case it will use 5000 and 5001 in that case it will use 5000 and 5001 based on https or http based on https or http based on https or http the bulky bookweb is the default type the bulky bookweb is the default type the bulky bookweb is the default type what this will do is it will run a what this will do is it will run a what this will do is it will run a dotnet command line and that will dotnet command line and that will dotnet command line and that will trigger the application trigger the application trigger the application so if you try to run this directly with so if you try to run this directly with so if you try to run this directly with bulky book web bulky book web bulky book web you will first see a command prompt you will first see a command prompt you will first see a command prompt and then it will launch the website on and then it will launch the website on and then it will launch the website on port 5001 port 5001 port 5001 you can see inside the logs it is you can see inside the logs it is you can see inside the logs it is displaying all of that displaying all of that displaying all of that so that is one way or one profile so that is one way or one profile so that is one way or one profile to run our application to run our application to run our application if you hover on this down arrow you will if you hover on this down arrow you will if you hover on this down arrow you will see there is another profile which is see there is another profile which is see there is another profile which is iis express and that is the name that we iis express and that is the name that we iis express and that is the name that we have in launch settings have in launch settings have in launch settings if you run with iis express it will use if you run with iis express it will use if you run with iis express it will use the port number right here for the ssl the port number right here for the ssl the port number right here for the ssl so let me run that and show that as well so let me run that and show that as well so let me run that and show that as well great you can see it runs on the great you can see it runs on the great you can see it runs on the different port that is defined right different port that is defined right different port that is defined right here here here so the default behavior is using the so the default behavior is using the so the default behavior is using the bulky book web profile but we will be bulky book web profile but we will be bulky book web profile but we will be changing that and using iis later on changing that and using iis later on changing that and using iis later on so that was a brief overview on so that was a brief overview on so that was a brief overview on launchsettings.json launchsettings.json launchsettings.json after that the next folder that you see after that the next folder that you see after that the next folder that you see here is the www here is the www here is the www root folder root folder root folder if you expand that you will see all the if you expand that you will see all the if you expand that you will see all the static files of your project static files of your project static files of your project so any static files like css javascript so any static files like css javascript so any static files like css javascript images or any libraries everything will images or any libraries everything will images or any libraries everything will go inside the www root folder go inside the www root folder go inside the www root folder the www root folder will not have any c the www root folder will not have any c the www root folder will not have any c sharp files sharp files sharp files this folder is only meant to serve the this folder is only meant to serve the this folder is only meant to serve the static files of our application static files of our application static files of our application so we will be using the static folder so we will be using the static folder so we will be using the static folder extensively throughout the course when extensively throughout the course when extensively throughout the course when we are adding some js or some images or we are adding some js or some images or we are adding some js or some images or any other libraries any other libraries any other libraries the www root folder will be the root the www root folder will be the root the www root folder will be the root folder of your application folder of your application folder of your application so always remember if you ever have to so always remember if you ever have to so always remember if you ever have to add any static file it will always go add any static file it will always go add any static file it will always go inside the www inside the www inside the www root folder root folder root folder then we have the folders for controllers then we have the folders for controllers then we have the folders for controllers models and view i will get back to them models and view i will get back to them models and view i will get back to them in a couple of videos but the file after in a couple of videos but the file after in a couple of videos but the file after that is appsettings.json that is appsettings.json that is appsettings.json this is the file in which we will be this is the file in which we will be this is the file in which we will be adding all of the connection strings and adding all of the connection strings and adding all of the connection strings and secrets of our application secrets of our application secrets of our application like you might have some api keys you like you might have some api keys you like you might have some api keys you might have some send grid keys you have might have some send grid keys you have might have some send grid keys you have stripe payment keys stripe payment keys stripe payment keys any of the static secret keys that you any of the static secret keys that you any of the static secret keys that you want to save we will be storing them want to save we will be storing them want to save we will be storing them inside appsettings.json inside appsettings.json inside appsettings.json if you expand this app settings you will if you expand this app settings you will if you expand this app settings you will notice that we have notice that we have notice that we have appsettings.development.json so you can create new json files and it so you can create new json files and it so you can create new json files and it will automatically bundle them inside will automatically bundle them inside will automatically bundle them inside appsettings.json appsettings.json appsettings.json like if you create for another like if you create for another like if you create for another environment appsettings.staging.json environment appsettings.staging.json environment appsettings.staging.json then you can have then you can have then you can have appsettings.production.json appsettings.production.json appsettings.production.json all of them will be bundled in one all of them will be bundled in one all of them will be bundled in one umbrella umbrella umbrella and then based on the environment and then based on the environment and then based on the environment variable you can configure it to use the variable you can configure it to use the variable you can configure it to use the different app settings file different app settings file different app settings file because connection string for a database because connection string for a database because connection string for a database in development will be different if you in development will be different if you in development will be different if you compare that to staging preview or compare that to staging preview or compare that to staging preview or production production production so that way you can go into those so that way you can go into those so that way you can go into those configuration configuration configuration we will be using just appsettings.json we will be using just appsettings.json we will be using just appsettings.json right now because we will be working right now because we will be working right now because we will be working with the localhost with the localhost with the localhost also in production there are multiple also in production there are multiple also in production there are multiple ways of saving secrets like you can add ways of saving secrets like you can add ways of saving secrets like you can add them to azure storage world and much them to azure storage world and much them to azure storage world and much more more more but that is beyond the scope of this but that is beyond the scope of this but that is beyond the scope of this course to get started you need to course to get started you need to course to get started you need to remember all of your application secrets remember all of your application secrets remember all of your application secrets must be inside must be inside must be inside settings.json and not directly inside settings.json and not directly inside settings.json and not directly inside any of your cs or class files any of your cs or class files any of your cs or class files we will come back to this file in the we will come back to this file in the we will come back to this file in the later videos and we will add our later videos and we will add our later videos and we will add our connection string connection string connection string now the last file that we want to take a now the last file that we want to take a now the last file that we want to take a look at is program.c look at is program.c look at is program.c let's do that in the next video next we have program.cs next we have program.cs next we have program.cs this is the file that will be this is the file that will be this is the file that will be responsible for running the application responsible for running the application responsible for running the application once we open program.cs you can see we once we open program.cs you can see we once we open program.cs you can see we have a variable builder have a variable builder have a variable builder where the where the where the webapplication.createbuilder is passed webapplication.createbuilder is passed webapplication.createbuilder is passed with the built-in arguments with the built-in arguments with the built-in arguments when you run with the.net command you when you run with the.net command you when you run with the.net command you can pass custom arguments here if you can pass custom arguments here if you can pass custom arguments here if you want want want with that it will configure the with that it will configure the with that it will configure the application and it will create the web application and it will create the web application and it will create the web application builder object application builder object application builder object now in the previous video we saw that we now in the previous video we saw that we now in the previous video we saw that we can use dependency injection with dotnet can use dependency injection with dotnet can use dependency injection with dotnet core core core when we want to register anything with when we want to register anything with when we want to register anything with our dependency injection container we our dependency injection container we our dependency injection container we will be doing that right here will be doing that right here will be doing that right here so let's say if we want to register our so let's say if we want to register our so let's say if we want to register our database or email or anything else database or email or anything else database or email or anything else we will have to do that between the we will have to do that between the we will have to do that between the builder and before we call build on that builder and before we call build on that builder and before we call build on that builder object builder object builder object so right here we are just adding one so right here we are just adding one so right here we are just adding one service to the container which is service to the container which is service to the container which is builder dot builder dot builder dot dot controllers with views dot controllers with views dot controllers with views we are adding this service to the we are adding this service to the we are adding this service to the container because we are using mvc container because we are using mvc container because we are using mvc application for our project application for our project application for our project if you were using razer pages then the if you were using razer pages then the if you were using razer pages then the service will be different service will be different service will be different now in the future videos when we now in the future videos when we now in the future videos when we configure database in our project and we configure database in our project and we configure database in our project and we add that to dependency injection we will add that to dependency injection we will add that to dependency injection we will be adding a new service here in our be adding a new service here in our be adding a new service here in our container or db container or db container or db context if you are working with any context if you are working with any context if you are working with any version prior to dotnet 6 or even some version prior to dotnet 6 or even some version prior to dotnet 6 or even some of the initial preview versions of of the initial preview versions of of the initial preview versions of dotnet 6 dotnet 6 dotnet 6 then this file was divided into a then this file was divided into a then this file was divided into a separate startup.cs class file and the separate startup.cs class file and the separate startup.cs class file and the services that we add to container were services that we add to container were services that we add to container were inside a method configure services and inside a method configure services and inside a method configure services and everything from line 9 onwards was everything from line 9 onwards was everything from line 9 onwards was inside a configure method inside a configure method inside a configure method so what we have on the top is we will be so what we have on the top is we will be so what we have on the top is we will be adding services to our container adding services to our container adding services to our container then we need to configure request then we need to configure request then we need to configure request pipeline and that pipeline will be pipeline and that pipeline will be pipeline and that pipeline will be configured from the highlighted section configured from the highlighted section configured from the highlighted section you might be wondering what is this you might be wondering what is this you might be wondering what is this pipeline pipeline pipeline the pipeline specifies how application the pipeline specifies how application the pipeline specifies how application should respond to a web request should respond to a web request should respond to a web request when your application receives a request when your application receives a request when your application receives a request from the browser the request goes back from the browser the request goes back from the browser the request goes back and forth through the pipeline let me and forth through the pipeline let me and forth through the pipeline let me switch to the presentation here switch to the presentation here switch to the presentation here we have different browsers here and then we have different browsers here and then we have different browsers here and then we have a pipeline we have a pipeline we have a pipeline the pipeline specifies how application the pipeline specifies how application the pipeline specifies how application should respond to a request that is should respond to a request that is should respond to a request that is received when your application receives received when your application receives received when your application receives a request from the browser the request a request from the browser the request a request from the browser the request goes through the pipeline goes through the pipeline goes through the pipeline in the pipeline you can add items that in the pipeline you can add items that in the pipeline you can add items that you want you want you want pipeline is made up of different pipeline is made up of different pipeline is made up of different middlewares and mvc is a type of middlewares and mvc is a type of middlewares and mvc is a type of middleware itself middleware itself middleware itself so if we want an application to be built so if we want an application to be built so if we want an application to be built using mvc we have to add that middleware using mvc we have to add that middleware using mvc we have to add that middleware other example could be authentication other example could be authentication other example could be authentication middleware authorization middleware and middleware authorization middleware and middleware authorization middleware and so on so on so on what exactly happens is when your what exactly happens is when your what exactly happens is when your request will go through each of the request will go through each of the request will go through each of the middleware it gets modified by them and middleware it gets modified by them and middleware it gets modified by them and eventually it is passed to the next eventually it is passed to the next eventually it is passed to the next middleware if that is the last middleware if that is the last middleware if that is the last middleware in the pipeline the response middleware in the pipeline the response middleware in the pipeline the response is returned back to the server is returned back to the server is returned back to the server let's take a look at the few middlewares let's take a look at the few middlewares let's take a look at the few middlewares that we have in our application that we have in our application that we have in our application let me switch back to the code here and let me switch back to the code here and let me switch back to the code here and you can see in the pipeline first we are you can see in the pipeline first we are you can see in the pipeline first we are checking if it is development or not in checking if it is development or not in checking if it is development or not in the environment the environment the environment if it is then we are adding the use if it is then we are adding the use if it is then we are adding the use developer exception page that will show developer exception page that will show developer exception page that will show you user friendly exceptions so that you you user friendly exceptions so that you you user friendly exceptions so that you can debug and solve them but if it is can debug and solve them but if it is can debug and solve them but if it is not development then we are just not development then we are just not development then we are just redirecting them to an error page redirecting them to an error page redirecting them to an error page the next middleware is https redirection the next middleware is https redirection the next middleware is https redirection and then we have a middleware to use our and then we have a middleware to use our and then we have a middleware to use our static files that are defined in www static files that are defined in www static files that are defined in www root folder root folder root folder we also have a routing middleware and we we also have a routing middleware and we we also have a routing middleware and we have authorization middleware have authorization middleware have authorization middleware and we add authentication to our project and we add authentication to our project and we add authentication to our project we will have to add a new middleware we will have to add a new middleware we will have to add a new middleware inside the program.cs as well inside the program.cs as well inside the program.cs as well then we are using a map controller route then we are using a map controller route then we are using a map controller route that will map the different pattern that that will map the different pattern that that will map the different pattern that we have for mvc we have for mvc we have for mvc based on this routing it will be able to based on this routing it will be able to based on this routing it will be able to redirect our request to the redirect our request to the redirect our request to the corresponding controllers and action corresponding controllers and action corresponding controllers and action then you should always keep in mind that then you should always keep in mind that then you should always keep in mind that order of pipeline is extremely important order of pipeline is extremely important order of pipeline is extremely important the way you write middlewares in the the way you write middlewares in the the way you write middlewares in the pipeline that is exactly how the request pipeline that is exactly how the request pipeline that is exactly how the request will be passed will be passed will be passed so first routing will be done then it so first routing will be done then it so first routing will be done then it checks for authorization and so on checks for authorization and so on checks for authorization and so on so in this scenario if you want to use so in this scenario if you want to use so in this scenario if you want to use authentication to your pipeline we have authentication to your pipeline we have authentication to your pipeline we have a middleware which is app.use a middleware which is app.use a middleware which is app.use authentication authentication authentication but if you do this then it won't work but if you do this then it won't work but if you do this then it won't work because authentication middleware should because authentication middleware should because authentication middleware should always come before you authorize a user always come before you authorize a user always come before you authorize a user because you only authorize a user that because you only authorize a user that because you only authorize a user that is authenticated is authenticated is authenticated that is the basic fundamentals of that is the basic fundamentals of that is the basic fundamentals of authentication and authorization authentication and authorization authentication and authorization so if you place the pipeline in some so if you place the pipeline in some so if you place the pipeline in some different order different order different order that will break things that will break things that will break things inside the endpoints here you can see we inside the endpoints here you can see we inside the endpoints here you can see we have a controller name an action name have a controller name an action name have a controller name an action name and some id and some id and some id this controller route will make more this controller route will make more this controller route will make more sense when we understand routing in the sense when we understand routing in the sense when we understand routing in the next video next video next video let me show you more details on how let me show you more details on how let me show you more details on how routing works routing works routing works i won't be running the application to i won't be running the application to i won't be running the application to show you that but i want to walk you show you that but i want to walk you show you that but i want to walk you through some theory you can see when it through some theory you can see when it through some theory you can see when it comes to routing in mvc application we comes to routing in mvc application we comes to routing in mvc application we have controllers and we have actions have controllers and we have actions have controllers and we have actions before we explore the routing let me before we explore the routing let me before we explore the routing let me walk you through the main components of walk you through the main components of walk you through the main components of an mvc application an mvc application an mvc application which is models views and controller which is models views and controller which is models views and controller let me switch back to the presentation let me switch back to the presentation let me switch back to the presentation and give you a brief overview and give you a brief overview and give you a brief overview now if you remember we had three folders now if you remember we had three folders now if you remember we had three folders for models views and controllers and for models views and controllers and for models views and controllers and that is what mbc stands for that is what mbc stands for that is what mbc stands for the first thing in mvc is model which the first thing in mvc is model which the first thing in mvc is model which represents shape of the data represents shape of the data represents shape of the data a class in c sharp is used to describe a a class in c sharp is used to describe a a class in c sharp is used to describe a model model model the model component corresponds to all the model component corresponds to all the model component corresponds to all the data related logic that user works the data related logic that user works the data related logic that user works with with with let's say inside your application you let's say inside your application you let's say inside your application you have a table that stores all the have a table that stores all the have a table that stores all the category or all the product details category or all the product details category or all the product details then that product will be a model itself then that product will be a model itself then that product will be a model itself model basically represents all the data model basically represents all the data model basically represents all the data in your application in your application in your application it can be a table that you are storing it can be a table that you are storing it can be a table that you are storing inside sql server or it can be a model inside sql server or it can be a model inside sql server or it can be a model which will be a combination of multiple which will be a combination of multiple which will be a combination of multiple tables and so on tables and so on tables and so on this model can either represent the data this model can either represent the data this model can either represent the data that is being transferred between views that is being transferred between views that is being transferred between views and controllers or any business related and controllers or any business related and controllers or any business related data model that will represent all the data model that will represent all the data model that will represent all the tables of the database tables of the database tables of the database so if you have 10 tables in your so if you have 10 tables in your so if you have 10 tables in your database we will have at least 10 models database we will have at least 10 models database we will have at least 10 models that corresponds to them that corresponds to them that corresponds to them there is also more complexity but we there is also more complexity but we there is also more complexity but we will go into those details later on will go into those details later on will go into those details later on right now you can think of all the right now you can think of all the right now you can think of all the tables in your database will be a class tables in your database will be a class tables in your database will be a class file which will be a model file which will be a model file which will be a model then all the properties of that class then all the properties of that class then all the properties of that class file will be the columns of the table file will be the columns of the table file will be the columns of the table that is a simple relation that you can that is a simple relation that you can that is a simple relation that you can think of right now think of right now think of right now then we have view in an mvc which is the then we have view in an mvc which is the then we have view in an mvc which is the user interface user interface user interface view can be thought of html and css that view can be thought of html and css that view can be thought of html and css that you write to make things fancy and you write to make things fancy and you write to make things fancy and beautiful beautiful beautiful whatever you see on the website with whatever you see on the website with whatever you see on the website with your eyes is basically the view that is your eyes is basically the view that is your eyes is basically the view that is being displayed to you being displayed to you being displayed to you but now you need to think of what but now you need to think of what but now you need to think of what happens if in a website you have a happens if in a website you have a happens if in a website you have a button and you click that button button and you click that button button and you click that button what happens is that view will interact what happens is that view will interact what happens is that view will interact with your model to display some other with your model to display some other with your model to display some other data data data but view does not interact directly with but view does not interact directly with but view does not interact directly with the models the models the models for that we have something known as for that we have something known as for that we have something known as controller controller controller controller acts as an interface between controller acts as an interface between controller acts as an interface between model and view to process all the model and view to process all the model and view to process all the business logic and incoming request business logic and incoming request business logic and incoming request so controller acts as an interface so controller acts as an interface so controller acts as an interface between model and view to process all between model and view to process all between model and view to process all the business logic the business logic the business logic and it manipulates the data using model and it manipulates the data using model and it manipulates the data using model and interacts with the view to render and interacts with the view to render and interacts with the view to render the final output the final output the final output this is just a brief overview of how this is just a brief overview of how this is just a brief overview of how model views and controller works model views and controller works model views and controller works so let's say if a user clicks on a so let's say if a user clicks on a so let's say if a user clicks on a button controller is the first thing button controller is the first thing button controller is the first thing that will receive that request that will receive that request that will receive that request then controller will have lots of action then controller will have lots of action then controller will have lots of action methods methods methods based on those action methods controller based on those action methods controller based on those action methods controller will redirect this request to one of the will redirect this request to one of the will redirect this request to one of the action method and controller will use action method and controller will use action method and controller will use the model it will fetch all the data the model it will fetch all the data the model it will fetch all the data that it needs to display inside the view that it needs to display inside the view that it needs to display inside the view once the view is rendered it will pass once the view is rendered it will pass once the view is rendered it will pass all of that to the controller and all of that to the controller and all of that to the controller and controller will then pass a response controller will then pass a response controller will then pass a response which will be sent back and the user which will be sent back and the user which will be sent back and the user will finally be able to see the page will finally be able to see the page will finally be able to see the page so you can see controller can be treated so you can see controller can be treated so you can see controller can be treated as heart of your application as heart of your application as heart of your application that is where we will have all the logic that is where we will have all the logic that is where we will have all the logic of your application and it is the one of your application and it is the one of your application and it is the one which will be interacting with models which will be interacting with models which will be interacting with models and views and views and views so with that in place now you see that so with that in place now you see that so with that in place now you see that the request first comes to the the request first comes to the the request first comes to the controller and its action methods controller and its action methods controller and its action methods so with that general idea if we go back so with that general idea if we go back so with that general idea if we go back you can see inside the map controller you can see inside the map controller you can see inside the map controller route we have a pattern where we define route we have a pattern where we define route we have a pattern where we define a controller and an action method a controller and an action method a controller and an action method so here we are saying that the default so here we are saying that the default so here we are saying that the default if nothing is provided it should go to if nothing is provided it should go to if nothing is provided it should go to the home controller and it should call the home controller and it should call the home controller and it should call the index action method the index action method the index action method but that is a 10 000 feet overview but that is a 10 000 feet overview but that is a 10 000 feet overview let's take a look at routing little more let's take a look at routing little more let's take a look at routing little more with some theory with some theory with some theory before we see routing in action let's before we see routing in action let's before we see routing in action let's see routing with some examples see routing with some examples see routing with some examples you can see here we have a general you can see here we have a general you can see here we have a general pattern of routing pattern of routing pattern of routing the first thing highlighted in blue here the first thing highlighted in blue here the first thing highlighted in blue here is the domain of the url is the domain of the url is the domain of the url when we run on the local computer you when we run on the local computer you when we run on the local computer you will have a local host and a port number will have a local host and a port number will have a local host and a port number whatever is after that port number will whatever is after that port number will whatever is after that port number will be the route that we want to use when we be the route that we want to use when we be the route that we want to use when we are calling a page to be loaded are calling a page to be loaded are calling a page to be loaded in the first example you see we have in the first example you see we have in the first example you see we have something called as category then we something called as category then we something called as category then we have an index and some number have an index and some number have an index and some number when we are working with mvc after our when we are working with mvc after our when we are working with mvc after our port number or domain whatever is the port number or domain whatever is the port number or domain whatever is the first thing that we have will be the first thing that we have will be the first thing that we have will be the name of the controller name of the controller name of the controller then the next forward slash after that then the next forward slash after that then the next forward slash after that will be the action of the controller and will be the action of the controller and will be the action of the controller and after that if you have something that after that if you have something that after that if you have something that will be the id will be the id will be the id this is the pattern of routing with mvc this is the pattern of routing with mvc this is the pattern of routing with mvc if we go back to the application you can if we go back to the application you can if we go back to the application you can see the same format right here see the same format right here see the same format right here first we have the controller name then first we have the controller name then first we have the controller name then forward slash we have an action name forward slash we have an action name forward slash we have an action name then forward slash we have the id then forward slash we have the id then forward slash we have the id that corresponds with the request that that corresponds with the request that that corresponds with the request that we have here we have here we have here keep in mind that id is an optional keep in mind that id is an optional keep in mind that id is an optional field field field controller and action are not optional controller and action are not optional controller and action are not optional but if they are not defined we have set but if they are not defined we have set but if they are not defined we have set a default route that if there is no a default route that if there is no a default route that if there is no controller and action you can use home controller and action you can use home controller and action you can use home controller and index action as the controller and index action as the controller and index action as the default route default route default route because of that we have our home because of that we have our home because of that we have our home controller and we also have the index controller and we also have the index controller and we also have the index action which i will show you action which i will show you action which i will show you before we dive into those details based before we dive into those details based before we dive into those details based on the understanding that we have here i on the understanding that we have here i on the understanding that we have here i have given some sample url have given some sample url have given some sample url i want you to try to find out what will i want you to try to find out what will i want you to try to find out what will be the controller action and id based on be the controller action and id based on be the controller action and id based on this url this url this url again remember if controller is not again remember if controller is not again remember if controller is not defined default one that we have in our defined default one that we have in our defined default one that we have in our application application application is let's go back the home controller and is let's go back the home controller and is let's go back the home controller and if the action is not defined that will if the action is not defined that will if the action is not defined that will be index action be index action be index action so based on that the first url that we so based on that the first url that we so based on that the first url that we have the controller name is category the have the controller name is category the have the controller name is category the action is index and we do not have any action is index and we do not have any action is index and we do not have any id id id for the next one we have controller name for the next one we have controller name for the next one we have controller name as category we do not have any action as category we do not have any action as category we do not have any action so index will be the default action so index will be the default action so index will be the default action and finally id is null and finally id is null and finally id is null next what we have for the third one we next what we have for the third one we next what we have for the third one we have controller as category action as have controller as category action as have controller as category action as added and id as three added and id as three added and id as three the last one we have controller product the last one we have controller product the last one we have controller product action details and we have id as three action details and we have id as three action details and we have id as three so with that if you get a url now you so with that if you get a url now you so with that if you get a url now you can identify what is the controller name can identify what is the controller name can identify what is the controller name what is the action name and if there is what is the action name and if there is what is the action name and if there is an id or not an id or not an id or not so with that brief understanding of so with that brief understanding of so with that brief understanding of routing let's actually run our routing let's actually run our routing let's actually run our application see routing in action in the application see routing in action in the application see routing in action in the next video now we want to understand routing in mvc now we want to understand routing in mvc now we want to understand routing in mvc this is one of the tricky topics that i this is one of the tricky topics that i this is one of the tricky topics that i had when i first started learning mvc had when i first started learning mvc had when i first started learning mvc so i want to make sure that you get so i want to make sure that you get so i want to make sure that you get familiar with the routing familiar with the routing familiar with the routing before we see the complete routing in before we see the complete routing in before we see the complete routing in action let me walk you through the three action let me walk you through the three action let me walk you through the three folders that we have folders that we have folders that we have we have a folder for controller we have we have a folder for controller we have we have a folder for controller we have a folder for models and we have a folder a folder for models and we have a folder a folder for models and we have a folder for views for views for views by default we have a home controller by default we have a home controller by default we have a home controller that has been created that has been created that has been created models will be all the data related models will be all the data related models will be all the data related models that we want in the project models that we want in the project models that we want in the project so let's say if you are dealing with so let's say if you are dealing with so let's say if you are dealing with products that you want to display on the products that you want to display on the products that you want to display on the page you will have a product model and page you will have a product model and page you will have a product model and we will be using that model in we will be using that model in we will be using that model in controller and views right now you can controller and views right now you can controller and views right now you can just think of models as tables that you just think of models as tables that you just think of models as tables that you want in your database want in your database want in your database if you want a product table you will if you want a product table you will if you want a product table you will have a product model have a product model have a product model that is not always the case but we will that is not always the case but we will that is not always the case but we will explore models later on explore models later on explore models later on the main thing that we want to work on the main thing that we want to work on the main thing that we want to work on is understanding controllers and views is understanding controllers and views is understanding controllers and views controller is the heart of the controller is the heart of the controller is the heart of the application at the same time views is application at the same time views is application at the same time views is what will be displayed on the screen what will be displayed on the screen what will be displayed on the screen when user is looking at the page when user is looking at the page when user is looking at the page now the way navigation works is when we now the way navigation works is when we now the way navigation works is when we have a home controller all of the views have a home controller all of the views have a home controller all of the views or ui pages that are displayed with the or ui pages that are displayed with the or ui pages that are displayed with the home controller will be placed inside home controller will be placed inside home controller will be placed inside the same folder name as the controller the same folder name as the controller the same folder name as the controller name name name so you can see they have also created a so you can see they have also created a so you can see they have also created a home folder by default home folder by default home folder by default there is also a convention with the there is also a convention with the there is also a convention with the naming of controllers it should always naming of controllers it should always naming of controllers it should always end with the keyword of controller that end with the keyword of controller that end with the keyword of controller that is how the application will know that is how the application will know that is how the application will know that this is a controller this is a controller this is a controller if we expand our home controller you if we expand our home controller you if we expand our home controller you will see some code right here will see some code right here will see some code right here we have a class with the name of home we have a class with the name of home we have a class with the name of home controller and it implements the default controller and it implements the default controller and it implements the default or the base class of controller or the base class of controller or the base class of controller and right here we are registering the and right here we are registering the and right here we are registering the logger using dependency injection logger using dependency injection logger using dependency injection do not go into that detail right now i do not go into that detail right now i do not go into that detail right now i will explain dependency injection in will explain dependency injection in will explain dependency injection in much detail much detail much detail but for now to understand routing you but for now to understand routing you but for now to understand routing you can see we have two action methods can see we have two action methods can see we have two action methods inside controllers you can have multiple inside controllers you can have multiple inside controllers you can have multiple action method action method action method if we go back to the url here you can if we go back to the url here you can if we go back to the url here you can notice that we have the controller name notice that we have the controller name notice that we have the controller name and action name and action name and action name if the url was forward slash home if the url was forward slash home if the url was forward slash home forward slash privacy then it will go to forward slash privacy then it will go to forward slash privacy then it will go to home controller look for a privacy home controller look for a privacy home controller look for a privacy action method and it will load the action method and it will load the action method and it will load the content that we have here content that we have here content that we have here the return type for an action method is the return type for an action method is the return type for an action method is i action result because i action result i action result because i action result i action result because i action result is an abstraction for multiple return is an abstraction for multiple return is an abstraction for multiple return type type type it can return a view it can redirect to it can return a view it can redirect to it can return a view it can redirect to some action method or it can redirect a some action method or it can redirect a some action method or it can redirect a page and much more then i said that if page and much more then i said that if page and much more then i said that if the url is home forward slash index it the url is home forward slash index it the url is home forward slash index it will return the view that we have will return the view that we have will return the view that we have defined here defined here defined here now you might be thinking that where is now you might be thinking that where is now you might be thinking that where is this view we are talking about this view we are talking about this view we are talking about that view will be inside the views that view will be inside the views that view will be inside the views folder folder folder the way it finds or maps the view for the way it finds or maps the view for the way it finds or maps the view for this index action method is inside the this index action method is inside the this index action method is inside the views folder it will look for the name views folder it will look for the name views folder it will look for the name of the controller which is home of the controller which is home of the controller which is home controller so we have that folder controller so we have that folder controller so we have that folder inside there we will have a view with inside there we will have a view with inside there we will have a view with the name of this action method and it is the name of this action method and it is the name of this action method and it is index action method index action method index action method so that will be mapped to this so that will be mapped to this so that will be mapped to this particular view particular view particular view if we open that view we have some html if we open that view we have some html if we open that view we have some html and bootstrap classes so here nothing and bootstrap classes so here nothing and bootstrap classes so here nothing fancy is going on we are just displaying fancy is going on we are just displaying fancy is going on we are just displaying some text some text some text so let's run our application and see so let's run our application and see so let's run our application and see routing in action routing in action routing in action right now it will run in the command right now it will run in the command right now it will run in the command prompt window prompt window prompt window and once that is done it will run the and once that is done it will run the and once that is done it will run the website on port 5001 website on port 5001 website on port 5001 in the url right now nothing is present in the url right now nothing is present in the url right now nothing is present what should happen if there are no what should happen if there are no what should happen if there are no controllers and actions in the url controllers and actions in the url controllers and actions in the url we defined that inside the program.cs we defined that inside the program.cs we defined that inside the program.cs we said if nothing is present default we said if nothing is present default we said if nothing is present default that to home controller and index action that to home controller and index action that to home controller and index action method method method so what we see on the screen is from the so what we see on the screen is from the so what we see on the screen is from the home controller index action method home controller index action method home controller index action method to confirm that if you go to the home to confirm that if you go to the home to confirm that if you go to the home controller you can add a debugging point controller you can add a debugging point controller you can add a debugging point by clicking anywhere on the window by clicking anywhere on the window by clicking anywhere on the window what that will do is when it hits this what that will do is when it hits this what that will do is when it hits this controller this will be yellow controller this will be yellow controller this will be yellow so if we go back and if we refresh the so if we go back and if we refresh the so if we go back and if we refresh the page you can see it hits our breakpoint page you can see it hits our breakpoint page you can see it hits our breakpoint here here here so that means if nothing is present in so that means if nothing is present in so that means if nothing is present in the url it is calling the home the url it is calling the home the url it is calling the home controller index action method controller index action method controller index action method let me also add a debugging point inside let me also add a debugging point inside let me also add a debugging point inside the privacy action method the privacy action method the privacy action method so we will hit continue here and the so we will hit continue here and the so we will hit continue here and the request goes back request goes back request goes back so we will hit continue and then here we so we will hit continue and then here we so we will hit continue and then here we have return view that will find out the have return view that will find out the have return view that will find out the view that is associated and it will view that is associated and it will view that is associated and it will display that on the page display that on the page display that on the page if you right click on the view here you if you right click on the view here you if you right click on the view here you have link to go to the view if you click have link to go to the view if you click have link to go to the view if you click there it will automatically redirect you there it will automatically redirect you there it will automatically redirect you to the index view because it knows it to the index view because it knows it to the index view because it knows it has to find the home folder inside there has to find the home folder inside there has to find the home folder inside there there will be an index view there will be an index view there will be an index view this is how controllers and views are this is how controllers and views are this is how controllers and views are associated associated associated so if we go back to the application so if we go back to the application so if we go back to the application while this is running we have the while this is running we have the while this is running we have the privacy tab here and you can see on the privacy tab here and you can see on the privacy tab here and you can see on the bottom right the url that it will go to bottom right the url that it will go to bottom right the url that it will go to is home forward slash is home forward slash is home forward slash privacy so what will be the controller privacy so what will be the controller privacy so what will be the controller name name name controller name will be home and action controller name will be home and action controller name will be home and action name will be privacy name will be privacy name will be privacy so it will go to the home controller it so it will go to the home controller it so it will go to the home controller it will go to the privacy action method and will go to the privacy action method and will go to the privacy action method and it will return the view the view is it will return the view the view is it will return the view the view is inside home we have privacy and it inside home we have privacy and it inside home we have privacy and it should display this particular paragraph should display this particular paragraph should display this particular paragraph let's go back and hit that let's go back and hit that let's go back and hit that it hits our debugging point that is it hits our debugging point that is it hits our debugging point that is great let's continue great let's continue great let's continue and it displays the privacy policy and it displays the privacy policy and it displays the privacy policy so that is perfect with this you can see so that is perfect with this you can see so that is perfect with this you can see how routing is working in action with how routing is working in action with how routing is working in action with mvc mvc mvc based on the url you have to define the based on the url you have to define the based on the url you have to define the controller name and action name it goes controller name and action name it goes controller name and action name it goes to the controller finds out that action to the controller finds out that action to the controller finds out that action method and it returns view based on the method and it returns view based on the method and it returns view based on the view that you have defined inside the view that you have defined inside the view that you have defined inside the views views views folder now if this is too much right now folder now if this is too much right now folder now if this is too much right now do not worry just understand the basics do not worry just understand the basics do not worry just understand the basics that i have taught you in this video but that i have taught you in this video but that i have taught you in this video but as we proceed with the course routing as we proceed with the course routing as we proceed with the course routing will make much more sense will make much more sense will make much more sense and if this is too much for you do not and if this is too much for you do not and if this is too much for you do not worry you are not alone when i was worry you are not alone when i was worry you are not alone when i was learning mvc about 10 years ago at that learning mvc about 10 years ago at that learning mvc about 10 years ago at that time i had a very hard time trying to time i had a very hard time trying to time i had a very hard time trying to understand this since i was coming from understand this since i was coming from understand this since i was coming from the web form world where we just have the web form world where we just have the web form world where we just have code behind files code behind files code behind files so as we program this more it will get so as we program this more it will get so as we program this more it will get much more familiar and you will love the much more familiar and you will love the much more familiar and you will love the way it works way it works way it works so let's continue from the next video so let's continue from the next video so let's continue from the next video now that we have seen the basic now that we have seen the basic now that we have seen the basic controllers and views and how the controllers and views and how the controllers and views and how the interaction works with routing i want to interaction works with routing i want to interaction works with routing i want to walk you through the basic views that walk you through the basic views that walk you through the basic views that are available with our project are available with our project are available with our project we saw the home folder inside views that we saw the home folder inside views that we saw the home folder inside views that corresponds to the views of the home corresponds to the views of the home corresponds to the views of the home controller controller controller but on top of that we have something but on top of that we have something but on top of that we have something called a shared called a shared called a shared shared folder is used for partial views shared folder is used for partial views shared folder is used for partial views and partial views are similar to user and partial views are similar to user and partial views are similar to user components if you are coming from components if you are coming from components if you are coming from classic c sharp classic c sharp classic c sharp so it's basically a view that you can so it's basically a view that you can so it's basically a view that you can call within a view in multiple places in call within a view in multiple places in call within a view in multiple places in your application your application your application along with that we have a special along with that we have a special along with that we have a special partial view which is underscored layout partial view which is underscored layout partial view which is underscored layout and this underscored layout is the and this underscored layout is the and this underscored layout is the default master page of your application default master page of your application default master page of your application so if you open that up you can see we so if you open that up you can see we so if you open that up you can see we have some styling on the top here we have some styling on the top here we have some styling on the top here we have a header right here and we have a have a header right here and we have a have a header right here and we have a div where we render the body div where we render the body div where we render the body since this is the master page so since this is the master page so since this is the master page so whatever we display inside the other whatever we display inside the other whatever we display inside the other views it will use this underscore layout views it will use this underscore layout views it will use this underscore layout as the default master page as the default master page as the default master page so inside index when we are displaying so inside index when we are displaying so inside index when we are displaying this content it was displaying that with this content it was displaying that with this content it was displaying that with the navigation on the top the navigation on the top the navigation on the top we also have a footer here and we have we also have a footer here and we have we also have a footer here and we have some common javascript that we want some common javascript that we want some common javascript that we want across the application across the application across the application we have the main html and body tag and we have the main html and body tag and we have the main html and body tag and we have head right here where we are we have head right here where we are we have head right here where we are adding the styling adding the styling adding the styling we will be updating this in future we will be updating this in future we will be updating this in future videos whenever we want to add some css videos whenever we want to add some css videos whenever we want to add some css and js globally this is the place where and js globally this is the place where and js globally this is the place where we will be adding that we will be adding that we will be adding that next we have a validation scripts next we have a validation scripts next we have a validation scripts partial and this is a partial view where partial and this is a partial view where partial and this is a partial view where we are just adding scripts for some we are just adding scripts for some we are just adding scripts for some validations validations validations wherever in some views let's say in wherever in some views let's say in wherever in some views let's say in index view we want to use validations index view we want to use validations index view we want to use validations then we will include this partial view then we will include this partial view then we will include this partial view on that page on that page on that page so that way we do not have to write so that way we do not have to write so that way we do not have to write those script tags we will just include those script tags we will just include those script tags we will just include this partial view and that will be this partial view and that will be this partial view and that will be included included included we also have an error partial view that we also have an error partial view that we also have an error partial view that will be used to display the errors if will be used to display the errors if will be used to display the errors if you encounter in the application you encounter in the application you encounter in the application we will be adding more partial views as we will be adding more partial views as we will be adding more partial views as we proceed with the course so do not we proceed with the course so do not we proceed with the course so do not worry but remember shared folder will worry but remember shared folder will worry but remember shared folder will contain all the partial views and contain all the partial views and contain all the partial views and underscored layout is the master page of underscored layout is the master page of underscored layout is the master page of your application your application your application while the application is running if i while the application is running if i while the application is running if i switch back quickly you can see on the switch back quickly you can see on the switch back quickly you can see on the privacy page we have the header here we privacy page we have the header here we privacy page we have the header here we have the footer here and we have the have the footer here and we have the have the footer here and we have the body body body so where we have this render body at so where we have this render body at so where we have this render body at that place whatever we had inside the that place whatever we had inside the that place whatever we had inside the privacy these two lines are being privacy these two lines are being privacy these two lines are being displayed displayed displayed so i hope that makes sense so i hope that makes sense so i hope that makes sense then we have something called as then we have something called as then we have something called as underscore view import and underscore underscore view import and underscore underscore view import and underscore view start view start view start let me open the view import first and we let me open the view import first and we let me open the view import first and we have the global namespace right here have the global namespace right here have the global namespace right here so inside your application let's say you so inside your application let's say you so inside your application let's say you want to access some namespace in all of want to access some namespace in all of want to access some namespace in all of the pages the pages the pages if you add that using statement here it if you add that using statement here it if you add that using statement here it will be accessible across all the pages will be accessible across all the pages will be accessible across all the pages controllers and classes in your project controllers and classes in your project controllers and classes in your project that way you do not have to type this that way you do not have to type this that way you do not have to type this namespace every time namespace every time namespace every time we will see that in action as we proceed we will see that in action as we proceed we will see that in action as we proceed with the course with the course with the course but one important thing that you see but one important thing that you see but one important thing that you see here is tag helpers here is tag helpers here is tag helpers helpers are bindings that are provided helpers are bindings that are provided helpers are bindings that are provided by the.net core team that looks like by the.net core team that looks like by the.net core team that looks like html tags but they are special tags that html tags but they are special tags that html tags but they are special tags that are adopted by the microsoft team from are adopted by the microsoft team from are adopted by the microsoft team from other languages after looking at the other languages after looking at the other languages after looking at the success like angular and react success like angular and react success like angular and react i will show you one example quickly here i will show you one example quickly here i will show you one example quickly here in the underscored layout if we go back in the underscored layout if we go back in the underscored layout if we go back to our application we click on privacy to our application we click on privacy to our application we click on privacy you see it builds the url home and you see it builds the url home and you see it builds the url home and privacy privacy privacy here we know that home is controller and here we know that home is controller and here we know that home is controller and action name is privacy action name is privacy action name is privacy so how do you think this link is so how do you think this link is so how do you think this link is provided on this navigation provided on this navigation provided on this navigation it is provided using a special tag it is provided using a special tag it is provided using a special tag helper let me expand the header here and helper let me expand the header here and helper let me expand the header here and you can see we have an anchor tag and you can see we have an anchor tag and you can see we have an anchor tag and then we have tag helpers for asp then we have tag helpers for asp then we have tag helpers for asp controller and asp action controller and asp action controller and asp action tag helpers will start with the prefix tag helpers will start with the prefix tag helpers will start with the prefix of asp.hyphen of asp.hyphen of asp.hyphen and then the name and then the name and then the name so here we have a tag helper which says so here we have a tag helper which says so here we have a tag helper which says asp controller and then we define the asp controller and then we define the asp controller and then we define the controller name for routing and in that controller name for routing and in that controller name for routing and in that controller what action name should be controller what action name should be controller what action name should be called so that is asp action called so that is asp action called so that is asp action do not worry about the asp areas for now do not worry about the asp areas for now do not worry about the asp areas for now we will be using lots of tag helpers we will be using lots of tag helpers we will be using lots of tag helpers that are provided by the dot net team in that are provided by the dot net team in that are provided by the dot net team in future future future but tag helpers have been included in but tag helpers have been included in but tag helpers have been included in the project and we define them globally the project and we define them globally the project and we define them globally inside the view imports file inside the view imports file inside the view imports file the last file inside the views folder is the last file inside the views folder is the last file inside the views folder is the view start the view start the view start this file will define what is the this file will define what is the this file will define what is the default master page for your application default master page for your application default master page for your application inside privacy you see we have not inside privacy you see we have not inside privacy you see we have not defined what will be the master page but defined what will be the master page but defined what will be the master page but it is by default using underscore layout it is by default using underscore layout it is by default using underscore layout because that is what has been defined because that is what has been defined because that is what has been defined inside the view start file inside the view start file inside the view start file if you want to explicitly define a if you want to explicitly define a if you want to explicitly define a master page for privacy which is master page for privacy which is master page for privacy which is different you can do that directly by different you can do that directly by different you can do that directly by defining that on the top defining that on the top defining that on the top and that will take preference over what and that will take preference over what and that will take preference over what is defined in view start is defined in view start is defined in view start but view start will have the default but view start will have the default but view start will have the default master page for the application master page for the application master page for the application now i know this section was a little bit now i know this section was a little bit now i know this section was a little bit lengthy but this overview was critical lengthy but this overview was critical lengthy but this overview was critical when it comes to understanding the when it comes to understanding the when it comes to understanding the default views that have been provided in this video let's take a look at tag in this video let's take a look at tag in this video let's take a look at tag helpers helpers helpers tag helpers are brand new to asp.net tag helpers are brand new to asp.net tag helpers are brand new to asp.net core core core microsoft looked at the success around microsoft looked at the success around microsoft looked at the success around libraries like angular react and decided libraries like angular react and decided libraries like angular react and decided that implementing an angular directive that implementing an angular directive that implementing an angular directive like experience in the new asp.net was like experience in the new asp.net was like experience in the new asp.net was so important to the adoption of dot net so important to the adoption of dot net so important to the adoption of dot net core that they decided to create tag core that they decided to create tag core that they decided to create tag helpers from grounds up helpers from grounds up helpers from grounds up even though there are similarities even though there are similarities even though there are similarities between angular directives and tag between angular directives and tag between angular directives and tag helpers there is a major difference helpers there is a major difference helpers there is a major difference tag helpers are for server-side tag helpers are for server-side tag helpers are for server-side rendering while the angularjs directives rendering while the angularjs directives rendering while the angularjs directives are all about client-side rendering are all about client-side rendering are all about client-side rendering if you have worked with older versions if you have worked with older versions if you have worked with older versions of net core we had something called as of net core we had something called as of net core we had something called as html helpers html helpers html helpers they are still around but tag helpers they are still around but tag helpers they are still around but tag helpers are being modern with the tag like are being modern with the tag like are being modern with the tag like approach so it's much user friendly approach so it's much user friendly approach so it's much user friendly tag helpers are very focused around the tag helpers are very focused around the tag helpers are very focused around the html element and are much more natural html element and are much more natural html element and are much more natural to use as compared to html helpers to use as compared to html helpers to use as compared to html helpers we will be working with tag helpers many we will be working with tag helpers many we will be working with tag helpers many time in the application time in the application time in the application but to just give you a brief overview but to just give you a brief overview but to just give you a brief overview you can see in the first tab here we you can see in the first tab here we you can see in the first tab here we have html helpers and tag helpers have html helpers and tag helpers have html helpers and tag helpers simplifies all of them because we can simplifies all of them because we can simplifies all of them because we can use the existing label tag and we will use the existing label tag and we will use the existing label tag and we will just add a tag helper asp4 and we will just add a tag helper asp4 and we will just add a tag helper asp4 and we will bind that to a model bind that to a model bind that to a model we have same tag helper right here as we have same tag helper right here as we have same tag helper right here as well well well then in the last example here i am then in the last example here i am then in the last example here i am displaying tag helpers where previously displaying tag helpers where previously displaying tag helpers where previously we were using html dot begin form we were using html dot begin form we were using html dot begin form and now within the same form tag we have and now within the same form tag we have and now within the same form tag we have the tag helpers of where it should be the tag helpers of where it should be the tag helpers of where it should be posted posted posted so you can see things are getting much so you can see things are getting much so you can see things are getting much more simpler when we are using tag more simpler when we are using tag more simpler when we are using tag helpers helpers helpers that being said if you are coming to net that being said if you are coming to net that being said if you are coming to net brand new and you have never worked with brand new and you have never worked with brand new and you have never worked with html helpers this is even better html helpers this is even better html helpers this is even better you do not have to worry about the old you do not have to worry about the old you do not have to worry about the old syntax and what is different syntax and what is different syntax and what is different we will be working with tag helpers in we will be working with tag helpers in we will be working with tag helpers in the upcoming videos but i just wanted to the upcoming videos but i just wanted to the upcoming videos but i just wanted to give you a brief snippet of what tag give you a brief snippet of what tag give you a brief snippet of what tag helpers are and how they look like when helpers are and how they look like when helpers are and how they look like when we are using the same tags we just use we are using the same tags we just use we are using the same tags we just use the asp hyphen and then the tag helper the asp hyphen and then the tag helper the asp hyphen and then the tag helper name name name that being said we will explore all of that being said we will explore all of that being said we will explore all of this in much more details in the this in much more details in the this in much more details in the upcoming videos when you will be working with a.net core when you will be working with a.net core when you will be working with a.net core application you will see the return type application you will see the return type application you will see the return type of action result of action result of action result and it does not matter if you are using and it does not matter if you are using and it does not matter if you are using an mvc application or a razer page an mvc application or a razer page an mvc application or a razer page application application application in both the cases you can see we have i in both the cases you can see we have i in both the cases you can see we have i action result action result action result in mvc we are returning back view in in mvc we are returning back view in in mvc we are returning back view in this example and in razer page page this example and in razer page page this example and in razer page page handler we are returning back to the handler we are returning back to the handler we are returning back to the page page page but the return type is i action result but the return type is i action result but the return type is i action result i action result is a generic type that i action result is a generic type that i action result is a generic type that implements all of the other return types implements all of the other return types implements all of the other return types now if you want to be explicit about the now if you want to be explicit about the now if you want to be explicit about the return type in both of these cases then return type in both of these cases then return type in both of these cases then that would look something like this that would look something like this that would look something like this if the return type is view you can write if the return type is view you can write if the return type is view you can write view result but in razer pages when we view result but in razer pages when we view result but in razer pages when we return back to page you can write page return back to page you can write page return back to page you can write page result result result so now what is the advantage of i action so now what is the advantage of i action so now what is the advantage of i action result result result so first let's understand some theory so first let's understand some theory so first let's understand some theory so action result is a pattern class for so action result is a pattern class for so action result is a pattern class for many of the derived classes that have many of the derived classes that have many of the derived classes that have associated helpers associated helpers associated helpers the i action result return type is the i action result return type is the i action result return type is appropriate when multiple action results appropriate when multiple action results appropriate when multiple action results return type are possible in an action return type are possible in an action return type are possible in an action let's take a look at some of the helpers let's take a look at some of the helpers let's take a look at some of the helpers and action result and action result and action result so first let's take a look at what is so first let's take a look at what is so first let's take a look at what is there in razer pages there in razer pages there in razer pages a racer page can return content file not a racer page can return content file not a racer page can return content file not found page a partial result and redirect found page a partial result and redirect found page a partial result and redirect to different pages to different pages to different pages for all of them we have return types for all of them we have return types for all of them we have return types like content result file content result like content result file content result like content result file content result not found result page result partial not found result page result partial not found result page result partial result and so on result and so on result and so on if we are working with an mvc if we are working with an mvc if we are working with an mvc application we can return back views application we can return back views application we can return back views partial views we can redirect to action partial views we can redirect to action partial views we can redirect to action return json and so on return json and so on return json and so on so if you are returning any one of these so if you are returning any one of these so if you are returning any one of these then you can use the individual return then you can use the individual return then you can use the individual return types for result based on the helper types for result based on the helper types for result based on the helper method method method but what if you were returning something but what if you were returning something but what if you were returning something like this like this like this right here in mvc you can see we are right here in mvc you can see we are right here in mvc you can see we are returning if true let's imagine there returning if true let's imagine there returning if true let's imagine there was some condition here based on that if was some condition here based on that if was some condition here based on that if that condition is true you want to that condition is true you want to that condition is true you want to redirect to action redirect to action redirect to action else you want to return to view else you want to return to view else you want to return to view this time you cannot have two different this time you cannot have two different this time you cannot have two different return types return types return types if you use view result here return view if you use view result here return view if you use view result here return view is working but redirect to action will is working but redirect to action will is working but redirect to action will throw error throw error throw error similarly if you use redirect to action similarly if you use redirect to action similarly if you use redirect to action result then redirect to action works but result then redirect to action works but result then redirect to action works but return view return view return view will give you error will give you error will give you error if you are working on razer pages and if you are working on razer pages and if you are working on razer pages and you have the same situation if you use you have the same situation if you use you have the same situation if you use page wizard then return page will work page wizard then return page will work page wizard then return page will work but redirect to page will fail but redirect to page will fail but redirect to page will fail and if you use redirect to page result and if you use redirect to page result and if you use redirect to page result then return page will fail then return page will fail then return page will fail so what is the solution to all of this so what is the solution to all of this so what is the solution to all of this the solution is to use i action result the solution is to use i action result the solution is to use i action result in both the places because this is a in both the places because this is a in both the places because this is a parent class so it does not care which parent class so it does not care which parent class so it does not care which of its implementation is being returned of its implementation is being returned of its implementation is being returned it will be able to handle all of them it will be able to handle all of them it will be able to handle all of them so that is a brief overview on how so that is a brief overview on how so that is a brief overview on how action result will help us with the action result will help us with the action result will help us with the return type from action method in mvc return type from action method in mvc return type from action method in mvc application application application or page handlers in a razor page or page handlers in a razor page or page handlers in a razor page application now that the project has been created now that the project has been created now that the project has been created there are few files and folder there are few files and folder there are few files and folder structures right here structures right here structures right here we will go into all of these files and we will go into all of these files and we will go into all of these files and folder structure in the upcoming videos folder structure in the upcoming videos folder structure in the upcoming videos but right now inside the views folder we but right now inside the views folder we but right now inside the views folder we have home and inside there we have have home and inside there we have have home and inside there we have index.cshtml index.cshtml index.cshtml this is the default home page of our this is the default home page of our this is the default home page of our application application application so if i open this up you will see there so if i open this up you will see there so if i open this up you will see there is some welcome text here and a is some welcome text here and a is some welcome text here and a paragraph which is inside a div tag paragraph which is inside a div tag paragraph which is inside a div tag let's run our application and see what let's run our application and see what let's run our application and see what is the output is the output is the output it loads up the default page of the it loads up the default page of the it loads up the default page of the website where we have the project name website where we have the project name website where we have the project name here a home page and a privacy page here a home page and a privacy page here a home page and a privacy page you can see on the home page we have you can see on the home page we have you can see on the home page we have some text right here some text right here some text right here and that html is exactly same as what we and that html is exactly same as what we and that html is exactly same as what we see inside the index dot cs html see inside the index dot cs html see inside the index dot cs html i do not want to go into much technical i do not want to go into much technical i do not want to go into much technical details but let's say you are making details but let's say you are making details but let's say you are making some changes inside your view if you some changes inside your view if you some changes inside your view if you save that you go back to the application save that you go back to the application save that you go back to the application and if you refresh here you directly see and if you refresh here you directly see and if you refresh here you directly see the changes right here the changes right here the changes right here if you notice in visual studio 2022 if you notice in visual studio 2022 if you notice in visual studio 2022 there is this icon which is for hot there is this icon which is for hot there is this icon which is for hot reload reload reload this is a great capability that has been this is a great capability that has been this is a great capability that has been added with dot net syncs added with dot net syncs added with dot net syncs if this does not refresh and reload for if this does not refresh and reload for if this does not refresh and reload for you you can go here and make sure the you you can go here and make sure the you you can go here and make sure the hot reload on file save is enabled hot reload on file save is enabled hot reload on file save is enabled what that will do is whenever you make what that will do is whenever you make what that will do is whenever you make some change here and you save if you go some change here and you save if you go some change here and you save if you go back and refresh back and refresh back and refresh you can see the change is being you can see the change is being you can see the change is being reflected in the ui reflected in the ui reflected in the ui this is very helpful when you are this is very helpful when you are this is very helpful when you are designing something with mvc or razer designing something with mvc or razer designing something with mvc or razer application application application but if you notice the first time you had but if you notice the first time you had but if you notice the first time you had to manually come to the page and refresh to manually come to the page and refresh to manually come to the page and refresh and after that the hot reload and after that the hot reload and after that the hot reload automatically works automatically works automatically works so i wanted to walk you through that so i wanted to walk you through that so i wanted to walk you through that advantage advantage advantage now if you were working with an now if you were working with an now if you were working with an application which is not in dot net 6 application which is not in dot net 6 application which is not in dot net 6 then you will have to right click on the then you will have to right click on the then you will have to right click on the project and you will have to add a new project and you will have to add a new project and you will have to add a new git package by clicking the manage nuget git package by clicking the manage nuget git package by clicking the manage nuget package package package you will search for a package runtime you will search for a package runtime you will search for a package runtime compilation and you can see we have compilation and you can see we have compilation and you can see we have microsoft.asp.netcode.mvc.razer.runtime this package was needed before so you this package was needed before so you this package was needed before so you can hit the install button to add that can hit the install button to add that can hit the install button to add that to our project to our project to our project even though that is not needed here i even though that is not needed here i even though that is not needed here i still want to add that still want to add that still want to add that then you will have to go to program.cs then you will have to go to program.cs then you will have to go to program.cs and right here we only have add and right here we only have add and right here we only have add controllers with view controllers with view controllers with view when you add razer pages you will add when you add razer pages you will add when you add razer pages you will add builder dot services dot ad racer pages builder dot services dot ad racer pages builder dot services dot ad racer pages and on there you will have to enable the and on there you will have to enable the and on there you will have to enable the ad raiser runtime compilation ad raiser runtime compilation ad raiser runtime compilation but because of hot reload and the magic but because of hot reload and the magic but because of hot reload and the magic that we have this is no longer required that we have this is no longer required that we have this is no longer required so in the future videos when we will be so in the future videos when we will be so in the future videos when we will be adding the razer pages i also add the adding the razer pages i also add the adding the razer pages i also add the razer runtime compilation because when razer runtime compilation because when razer runtime compilation because when the video was originally recorded in dot the video was originally recorded in dot the video was originally recorded in dot net 6 hard reload was still in testing net 6 hard reload was still in testing net 6 hard reload was still in testing so that's why i have added the razer so that's why i have added the razer so that's why i have added the razer runtime compilation down the road runtime compilation down the road runtime compilation down the road but you can skip that and you will just but you can skip that and you will just but you can skip that and you will just add the builder dot services add the builder dot services add the builder dot services pages pages pages so that's a brief overview that i wanted so that's a brief overview that i wanted so that's a brief overview that i wanted to give you with the heart reload in dot to give you with the heart reload in dot to give you with the heart reload in dot net 6. net 6. net 6. that being said in the next video let's that being said in the next video let's that being said in the next video let's first examine all the files and folder first examine all the files and folder first examine all the files and folder structures that have been created here when we work with any web project the when we work with any web project the when we work with any web project the main piece or the heart of the main piece or the heart of the main piece or the heart of the application is the data application is the data application is the data and we need database to store our data and we need database to store our data and we need database to store our data so we will be using sql server to create so we will be using sql server to create so we will be using sql server to create a database and store all the data for a database and store all the data for a database and store all the data for our website our website our website with dotnet code you might have heard with dotnet code you might have heard with dotnet code you might have heard about term called as entity framework about term called as entity framework about term called as entity framework core as well core as well core as well if not do not worry but entity framework if not do not worry but entity framework if not do not worry but entity framework core is what we'll be using to create core is what we'll be using to create core is what we'll be using to create database and we will be using the same database and we will be using the same database and we will be using the same to perform all the data operations to perform all the data operations to perform all the data operations so with dot net core you do not need so with dot net core you do not need so with dot net core you do not need stored procedures or writing sql stored procedures or writing sql stored procedures or writing sql statements in the code statements in the code statements in the code entity framework is a smart editor that entity framework is a smart editor that entity framework is a smart editor that will help us with all the data related will help us with all the data related will help us with all the data related operations operations operations that being said it does not mean that that being said it does not mean that that being said it does not mean that you cannot use stored procedures you cannot use stored procedures you cannot use stored procedures you can still use stored procedures if you can still use stored procedures if you can still use stored procedures if you want you want you want but typically with mvc application but typically with mvc application but typically with mvc application entity framework core is used to entity framework core is used to entity framework core is used to manipulate the data layer manipulate the data layer manipulate the data layer we will go into those details in the we will go into those details in the we will go into those details in the upcoming videos but right now we first upcoming videos but right now we first upcoming videos but right now we first need to create our model need to create our model need to create our model model will basically resemble a table in model will basically resemble a table in model will basically resemble a table in database database database it is not always the case but whatever it is not always the case but whatever it is not always the case but whatever tables you have in your database you tables you have in your database you tables you have in your database you will need a corresponding model for the will need a corresponding model for the will need a corresponding model for the code first migration code first migration code first migration so inside the models folder we only have so inside the models folder we only have so inside the models folder we only have error view model error view model error view model let me create one more model here we let me create one more model here we let me create one more model here we will right click there and we will add a will right click there and we will add a will right click there and we will add a class file class file class file we want to create a table for category we want to create a table for category we want to create a table for category so we will call our model as category so we will call our model as category so we will call our model as category and let's add that and let's add that and let's add that it creates a public class file and it it creates a public class file and it it creates a public class file and it places it inside the namespace of places it inside the namespace of places it inside the namespace of bulkybookweb.models bulkybookweb.models bulkybookweb.models that is just the location so it knows that is just the location so it knows that is just the location so it knows that it is inside bulkybookweb models that it is inside bulkybookweb models that it is inside bulkybookweb models folder that is the category class right folder that is the category class right folder that is the category class right here here here now inside this category class we need now inside this category class we need now inside this category class we need to create all the properties that we to create all the properties that we to create all the properties that we want for our table want for our table want for our table we want to create id name and a display we want to create id name and a display we want to create id name and a display order order order so to start we can write prop and it is so to start we can write prop and it is so to start we can write prop and it is a code snippet so once you type flop and a code snippet so once you type flop and a code snippet so once you type flop and hit tab two times it will automatically hit tab two times it will automatically hit tab two times it will automatically create a property create a property create a property the id column we will keep that as the id column we will keep that as the id column we will keep that as integer and i will call that as id integer and i will call that as id integer and i will call that as id next property that we want to create next property that we want to create next property that we want to create will be the name of the category that will be the name of the category that will be the name of the category that will be a string so we will create that will be a string so we will create that will be a string so we will create that we press prop again we press prop again we press prop again we want the display order we want the display order we want the display order now display order will be an integer now display order will be an integer now display order will be an integer so let me add that so let me add that so let me add that on top of that let's say for locking on top of that let's say for locking on top of that let's say for locking purpose we want to create a datetime purpose we want to create a datetime purpose we want to create a datetime property which will have the date on property which will have the date on property which will have the date on when this category was created when this category was created when this category was created so we will call this createdtime so we will call this createdtime so we will call this createdtime now the createdatetime let's say we want now the createdatetime let's say we want now the createdatetime let's say we want to set a default value to that so in to set a default value to that so in to set a default value to that so in order to do that we can use equal to order to do that we can use equal to order to do that we can use equal to sign and we can just assign the sign and we can just assign the sign and we can just assign the datetime.now datetime.now datetime.now like this like this like this that way the default value will that way the default value will that way the default value will automatically be assigned to the automatically be assigned to the automatically be assigned to the createddatetime when we create an object createddatetime when we create an object createddatetime when we create an object of this class of this class of this class so perfect we have created our model and so perfect we have created our model and so perfect we have created our model and then we want to push this model to our then we want to push this model to our then we want to push this model to our database to create a table with these database to create a table with these database to create a table with these four columns four columns four columns but when we create a database table we but when we create a database table we but when we create a database table we might want to add some more might want to add some more might want to add some more configuration configuration configuration like we might want to say that id is a like we might want to say that id is a like we might want to say that id is a primary key and since it's an integer we primary key and since it's an integer we primary key and since it's an integer we want to make that an identity column so want to make that an identity column so want to make that an identity column so we do not have to populate that when we we do not have to populate that when we we do not have to populate that when we create a row inside the new table that create a row inside the new table that create a row inside the new table that we will create we will create we will create we could also add a validation that name we could also add a validation that name we could also add a validation that name is a required property and it should not is a required property and it should not is a required property and it should not be now be now be now if we had to write a sql statement we if we had to write a sql statement we if we had to write a sql statement we could have done all of that by using could have done all of that by using could have done all of that by using normal and identity in our sql script normal and identity in our sql script normal and identity in our sql script but how will we do that using entity but how will we do that using entity but how will we do that using entity framework framework framework for that dotnet team has come up with for that dotnet team has come up with for that dotnet team has come up with alternatives called as data annotation alternatives called as data annotation alternatives called as data annotation so on the property where you want to so on the property where you want to so on the property where you want to configure some more details we have configure some more details we have configure some more details we have special attributes that you can use special attributes that you can use special attributes that you can use let me walk you through them in the next let me walk you through them in the next let me walk you through them in the next video video video now we want to configure some of the now we want to configure some of the now we want to configure some of the requirements that we have in a sql requirements that we have in a sql requirements that we have in a sql script script script like we want to make this id column an like we want to make this id column an like we want to make this id column an identity column which will be the identity column which will be the identity column which will be the primary key of this table in order to do primary key of this table in order to do primary key of this table in order to do that we have a data annotation that we have a data annotation that we have a data annotation or an attribute known as key or an attribute known as key or an attribute known as key if you enter that you notice the red if you enter that you notice the red if you enter that you notice the red squiggly lines squiggly lines squiggly lines if you hover on that it will display an if you hover on that it will display an if you hover on that it will display an error that key attribute could not be error that key attribute could not be error that key attribute could not be found found found that is because we have to add a using that is because we have to add a using that is because we have to add a using statement statement statement so you need to make sure your keyboard so you need to make sure your keyboard so you need to make sure your keyboard is on the key and then if you press ctrl is on the key and then if you press ctrl is on the key and then if you press ctrl dot it will display that you can add dot it will display that you can add dot it will display that you can add using statement to resolve this using statement to resolve this using statement to resolve this so we will press enter that will add the so we will press enter that will add the so we will press enter that will add the using statement which has the data using statement which has the data using statement which has the data annotation that we want annotation that we want annotation that we want once this key annotation has been once this key annotation has been once this key annotation has been applied it will tell entity framework applied it will tell entity framework applied it will tell entity framework core that hey when you create a script core that hey when you create a script core that hey when you create a script to create this table you need to make to create this table you need to make to create this table you need to make sure that id is a primary key and it sure that id is a primary key and it sure that id is a primary key and it should also be an identity column should also be an identity column should also be an identity column it does all the configuration and it does all the configuration and it does all the configuration and talking by itself talking by itself talking by itself we just need to write one attribute and we just need to write one attribute and we just need to write one attribute and everything will be done for us everything will be done for us everything will be done for us pretty simple right pretty simple right pretty simple right the next thing that we wanted to do is the next thing that we wanted to do is the next thing that we wanted to do is we want to make sure that name is a we want to make sure that name is a we want to make sure that name is a required property required property required property so here we have another attribute which so here we have another attribute which so here we have another attribute which is required is required is required once you assign that when it creates the once you assign that when it creates the once you assign that when it creates the script it will make sure that name is script it will make sure that name is script it will make sure that name is not available property not available property not available property now we have talked about these two but now we have talked about these two but now we have talked about these two but there are more annotations that you can there are more annotations that you can there are more annotations that you can do for validation do for validation do for validation with this in place the initial iteration with this in place the initial iteration with this in place the initial iteration of our model looks good of our model looks good of our model looks good how do we create that in our database how do we create that in our database how do we create that in our database now let's take a look at that in the now let's take a look at that in the now let's take a look at that in the next video we have added the data annotations and we have added the data annotations and we have added the data annotations and we have created our model we have created our model we have created our model we need to create a table and a database we need to create a table and a database we need to create a table and a database inside sql server inside sql server inside sql server so let me open up sql server management so let me open up sql server management so let me open up sql server management studio studio studio make sure you have that installed on make sure you have that installed on make sure you have that installed on your machine because that is what we your machine because that is what we your machine because that is what we will be using to play with the database will be using to play with the database will be using to play with the database once the sql server management studio once the sql server management studio once the sql server management studio opens up we will be using our local opens up we will be using our local opens up we will be using our local database database database now for some of the users it could be now for some of the users it could be now for some of the users it could be localdb backward slash ms sql localdb localdb backward slash ms sql localdb localdb backward slash ms sql localdb for others it could be just a dot for others it could be just a dot for others it could be just a dot i have both of the server name i have both of the server name i have both of the server name configured so i will use any one of them configured so i will use any one of them configured so i will use any one of them and i will hit the connect button and i will hit the connect button and i will hit the connect button as long as it is able to connect that as long as it is able to connect that as long as it is able to connect that server name is what you will be using server name is what you will be using server name is what you will be using inside your connection string inside your connection string inside your connection string if you use something else then it won't if you use something else then it won't if you use something else then it won't work work work so i will be using dot so i will be using dot so i will be using dot but on your end you need to check if dot but on your end you need to check if dot but on your end you need to check if dot works you can use that or the local db works you can use that or the local db works you can use that or the local db ms sql local db should also work ms sql local db should also work ms sql local db should also work let's hit cancel here and if we expand let's hit cancel here and if we expand let's hit cancel here and if we expand the databases you can see we have few the databases you can see we have few the databases you can see we have few database here but i want to create a new database here but i want to create a new database here but i want to create a new database for our database for our database for our project so for that we have to create a project so for that we have to create a project so for that we have to create a connection string inside our project connection string inside our project connection string inside our project in order to store all of the secrets of in order to store all of the secrets of in order to store all of the secrets of your application you will be doing that your application you will be doing that your application you will be doing that inside the inside the inside the appsettings.json file you can hard code appsettings.json file you can hard code appsettings.json file you can hard code the connection string inside the class the connection string inside the class the connection string inside the class file but that is a bad approach file but that is a bad approach file but that is a bad approach appsettings.json file is the file where appsettings.json file is the file where appsettings.json file is the file where you should have all the secrets that way you should have all the secrets that way you should have all the secrets that way if you have to update anything in the if you have to update anything in the if you have to update anything in the future you know it will be available future you know it will be available future you know it will be available inside the appsettings.json file inside the appsettings.json file inside the appsettings.json file and then you can create different app and then you can create different app and then you can create different app settings for different environment settings for different environment settings for different environment like if you have development staging like if you have development staging like if you have development staging preview production you can create all of preview production you can create all of preview production you can create all of those app settings and you can configure those app settings and you can configure those app settings and you can configure to use that app settings when you deploy to use that app settings when you deploy to use that app settings when you deploy the application the application the application that way based on your environment name that way based on your environment name that way based on your environment name you can use different app settings or you can use different app settings or you can use different app settings or different database and so on different database and so on different database and so on we will be working directly in we will be working directly in we will be working directly in appsettings.json appsettings.json appsettings.json and that should work with the local and that should work with the local and that should work with the local development development development so this is a simple json file now how so this is a simple json file now how so this is a simple json file now how will we add a new connection string in will we add a new connection string in will we add a new connection string in here here here as you can see it is just a dictionary as you can see it is just a dictionary as you can see it is just a dictionary with string key and value pairs with string key and value pairs with string key and value pairs what you have inside logging is known as what you have inside logging is known as what you have inside logging is known as a block where inside the logging block a block where inside the logging block a block where inside the logging block we have another block of log level and we have another block of log level and we have another block of log level and that has three key value pairs that has three key value pairs that has three key value pairs so we can either create a block or we so we can either create a block or we so we can either create a block or we can directly configure the connection can directly configure the connection can directly configure the connection string string string now the dotnet team thought that now the dotnet team thought that now the dotnet team thought that connection string is very common and connection string is very common and connection string is very common and almost all of the projects will have a almost all of the projects will have a almost all of the projects will have a connection string that is why they have connection string that is why they have connection string that is why they have created a default block for connection created a default block for connection created a default block for connection string that we can use if we want string that we can use if we want string that we can use if we want you can use something else but you can you can use something else but you can you can use something else but you can also use the default block name that also use the default block name that also use the default block name that they have given they have given they have given if you see it is automatically if you see it is automatically if you see it is automatically suggesting me that block name which is suggesting me that block name which is suggesting me that block name which is connection strings connection strings connection strings we can use something else but i want you we can use something else but i want you we can use something else but i want you guys to use the exact same name for now guys to use the exact same name for now guys to use the exact same name for now and i will also tell you the reason and i will also tell you the reason and i will also tell you the reason behind that in the upcoming videos behind that in the upcoming videos behind that in the upcoming videos so inside this block we will have a key so inside this block we will have a key so inside this block we will have a key value name value name value name so that key name you can use whatever so that key name you can use whatever so that key name you can use whatever you want i will just use default you want i will just use default you want i will just use default connection connection connection you can use any name that you want for you can use any name that you want for you can use any name that you want for the key right here and we need to paste the key right here and we need to paste the key right here and we need to paste or enter a connection string within the or enter a connection string within the or enter a connection string within the double quotes on the right side so the double quotes on the right side so the double quotes on the right side so the first parameter here will be the server first parameter here will be the server first parameter here will be the server name i am using dot so that is what i name i am using dot so that is what i name i am using dot so that is what i will write if you are using a different will write if you are using a different will write if you are using a different server name like if we go back to sql server name like if we go back to sql server name like if we go back to sql server server server and if you were using the ms sql local and if you were using the ms sql local and if you were using the ms sql local db to connect i want you guys to copy db to connect i want you guys to copy db to connect i want you guys to copy this go back to the application this go back to the application this go back to the application and paste that here i am using the local and paste that here i am using the local and paste that here i am using the local server with the dot so that is what i server with the dot so that is what i server with the dot so that is what i will use and then we need the next will use and then we need the next will use and then we need the next parameter parameter parameter if you have to separate anything in a if you have to separate anything in a if you have to separate anything in a connection string we will use a connection string we will use a connection string we will use a semicolon the next property that we have semicolon the next property that we have semicolon the next property that we have is the database name let's call this is the database name let's call this is the database name let's call this bulky bulky bulky then after that we want to set the then after that we want to set the then after that we want to set the trusted connection flag to be true trusted connection flag to be true trusted connection flag to be true make sure there is no spelling mistake make sure there is no spelling mistake make sure there is no spelling mistake here here here and that is all that we want to and that is all that we want to and that is all that we want to configure in the connection string configure in the connection string configure in the connection string you can make it more complicated but we you can make it more complicated but we you can make it more complicated but we will keep things pretty simple will keep things pretty simple will keep things pretty simple we have a database name that we want to we have a database name that we want to we have a database name that we want to create inside this particular server create inside this particular server create inside this particular server that we are able to connect in sql that we are able to connect in sql that we are able to connect in sql server and the trusted connection is server and the trusted connection is server and the trusted connection is true that way when we connect here we true that way when we connect here we true that way when we connect here we can just use windows authentication can just use windows authentication can just use windows authentication if you have a user id and password then if you have a user id and password then if you have a user id and password then you can use the different settings in you can use the different settings in you can use the different settings in connection string connection string connection string i will be using the default trusted i will be using the default trusted i will be using the default trusted connection connection connection so with this we are using a special so with this we are using a special so with this we are using a special block that is available with the name of block that is available with the name of block that is available with the name of connection string in there we have a key connection string in there we have a key connection string in there we have a key of default connection and value has the of default connection and value has the of default connection and value has the connection string connection string connection string now how can we use this connection now how can we use this connection now how can we use this connection string to actually create the database string to actually create the database string to actually create the database and create our category table inside the and create our category table inside the and create our category table inside the database database database let's do that in the next video let's do that in the next video let's do that in the next video we need to tell our application that we we need to tell our application that we we need to tell our application that we will be using sql server and you have to will be using sql server and you have to will be using sql server and you have to use this connection string to establish use this connection string to establish use this connection string to establish the connection with sql server the connection with sql server the connection with sql server for that we will be using entity for that we will be using entity for that we will be using entity framework core and we will have to framework core and we will have to framework core and we will have to create an object of the db context create an object of the db context create an object of the db context using that db context we will be able to using that db context we will be able to using that db context we will be able to make connection to the database make connection to the database make connection to the database so how do we do that so how do we do that so how do we do that it is best to create a new folder for it is best to create a new folder for it is best to create a new folder for all the data related changes all the data related changes all the data related changes so here let me create a new folder with so here let me create a new folder with so here let me create a new folder with the name of data the name of data the name of data inside there we will create our db inside there we will create our db inside there we will create our db context context context we will create a class here we will create a class here we will create a class here and i will call that application and i will call that application and i will call that application db db db context context context you can use any name that you want here you can use any name that you want here you can use any name that you want here but i'm using db context so that it's but i'm using db context so that it's but i'm using db context so that it's easy to identify easy to identify easy to identify let's add that class file let's add that class file let's add that class file now we need to inherit this class file now we need to inherit this class file now we need to inherit this class file from the db context that is inside from the db context that is inside from the db context that is inside entity framework core entity framework core entity framework core in our project we have not added entity in our project we have not added entity in our project we have not added entity framework code right now framework code right now framework code right now so there are two ways to add that so there are two ways to add that so there are two ways to add that we know that this will inherit from the we know that this will inherit from the we know that this will inherit from the db context so we can type that and you db context so we can type that and you db context so we can type that and you will see the red squiggly lines will see the red squiggly lines will see the red squiggly lines on there if you press ctrl dot inside on there if you press ctrl dot inside on there if you press ctrl dot inside the suggestions it will display that you the suggestions it will display that you the suggestions it will display that you can install a package microsoft dot can install a package microsoft dot can install a package microsoft dot entity framework core entity framework core entity framework core that will automatically find and install that will automatically find and install that will automatically find and install the latest version the latest version the latest version if you want to do that yourself you can if you want to do that yourself you can if you want to do that yourself you can right click on the project and you can right click on the project and you can right click on the project and you can select manage nuget packages or you can select manage nuget packages or you can select manage nuget packages or you can go to tools we have no get package go to tools we have no get package go to tools we have no get package manager and we can open up manage nuget manager and we can open up manage nuget manager and we can open up manage nuget packages for solution packages for solution packages for solution here you will have to go to the browse here you will have to go to the browse here you will have to go to the browse tab to see all the new get packages that tab to see all the new get packages that tab to see all the new get packages that are available are available are available now right now i'm using dot net 6 with now right now i'm using dot net 6 with now right now i'm using dot net 6 with the preview version so i have checked the preview version so i have checked the preview version so i have checked the include pre-release right here the include pre-release right here the include pre-release right here the package that we are looking for is the package that we are looking for is the package that we are looking for is entity framework core entity framework core entity framework core let's press enter and the first package let's press enter and the first package let's press enter and the first package is microsoft dot entity framework or is microsoft dot entity framework or is microsoft dot entity framework or we are using the preview 7 so let me we are using the preview 7 so let me we are using the preview 7 so let me select that and we will install that once that is installed if we go back to once that is installed if we go back to once that is installed if we go back to our application db context and now if we our application db context and now if we our application db context and now if we press ctrl dot here press ctrl dot here press ctrl dot here it will tell us that we just have to add it will tell us that we just have to add it will tell us that we just have to add the using statement since we have the using statement since we have the using statement since we have already installed the package already installed the package already installed the package so we will add the using statement for so we will add the using statement for so we will add the using statement for our db context our db context our db context once we do that then there is one line once we do that then there is one line once we do that then there is one line of configuration that we have to do of configuration that we have to do of configuration that we have to do inside the constructor of this class inside the constructor of this class inside the constructor of this class file file file you can think of that as the general you can think of that as the general you can think of that as the general syntax that is needed to establish the syntax that is needed to establish the syntax that is needed to establish the connection with entity framework connection with entity framework connection with entity framework so first we need to create a constructor so first we need to create a constructor so first we need to create a constructor you can type ctor and press tab twice you can type ctor and press tab twice you can type ctor and press tab twice you can see it is a code snippet for you can see it is a code snippet for you can see it is a code snippet for constructor constructor constructor so once you press tab twice it should so once you press tab twice it should so once you press tab twice it should automatically create the constructor automatically create the constructor automatically create the constructor we just have to write some parameters we just have to write some parameters we just have to write some parameters here because when we get the db context here because when we get the db context here because when we get the db context we need to pass that on to the base we need to pass that on to the base we need to pass that on to the base class which is tb context class which is tb context class which is tb context so here we will have to configure the db so here we will have to configure the db so here we will have to configure the db context options on the class that we are context options on the class that we are context options on the class that we are on right now which is application db on right now which is application db on right now which is application db context we can paste that here and i context we can paste that here and i context we can paste that here and i will call this options will call this options will call this options so here we are saying that in the so here we are saying that in the so here we are saying that in the constructor here we will receive some constructor here we will receive some constructor here we will receive some options options options and those options we just have to pass and those options we just have to pass and those options we just have to pass to the base class which is db context to the base class which is db context to the base class which is db context this is a general setup that you have to this is a general setup that you have to this is a general setup that you have to do do do that will configure rtb context that will configure rtb context that will configure rtb context now once you configure our db context we now once you configure our db context we now once you configure our db context we still have one main feature still have one main feature still have one main feature we still have to create our category we still have to create our category we still have to create our category table inside the database table inside the database table inside the database so whatever models that you have to so whatever models that you have to so whatever models that you have to create inside the database you will have create inside the database you will have create inside the database you will have to create a db set inside the to create a db set inside the to create a db set inside the application db context the file that we application db context the file that we application db context the file that we are currently working on are currently working on are currently working on now how do you create a db set now how do you create a db set now how do you create a db set that is pretty simple we will say public that is pretty simple we will say public that is pretty simple we will say public db set here and we need to write the db set here and we need to write the db set here and we need to write the model name model name model name that model name is category and once you that model name is category and once you that model name is category and once you write that you again see the red write that you again see the red write that you again see the red squiggly lines squiggly lines squiggly lines that is because it cannot find anything that is because it cannot find anything that is because it cannot find anything with the name of category in the same with the name of category in the same with the name of category in the same file we need to add the using statement file we need to add the using statement file we need to add the using statement to tell it that category is inside the to tell it that category is inside the to tell it that category is inside the models folder models folder models folder so if you press ctrl dot we have that so if you press ctrl dot we have that so if you press ctrl dot we have that using statement using statement using statement let's add that and the next parameter let's add that and the next parameter let's add that and the next parameter here is the table name here is the table name here is the table name so if you call this categories then so if you call this categories then so if you call this categories then inside database the table that will be inside database the table that will be inside database the table that will be created will be called as categories and created will be called as categories and created will be called as categories and not category not category not category so that looks good and we will add the so that looks good and we will add the so that looks good and we will add the getter and setter getter and setter getter and setter that's all that we had to do to create that's all that we had to do to create that's all that we had to do to create the category table the category table the category table what this will do is it will create a what this will do is it will create a what this will do is it will create a category table with the name of category table with the name of category table with the name of categories and it will have four columns categories and it will have four columns categories and it will have four columns that we have wrote inside the category that we have wrote inside the category that we have wrote inside the category model model model when it creates that table it will make when it creates that table it will make when it creates that table it will make sure that id is an identity column and sure that id is an identity column and sure that id is an identity column and name is a required field as well name is a required field as well name is a required field as well so you can see it is doing all the so you can see it is doing all the so you can see it is doing all the configuration by writing just few lines configuration by writing just few lines configuration by writing just few lines of code of code of code now when you are working with entity now when you are working with entity now when you are working with entity framework core there are two models one framework core there are two models one framework core there are two models one is code first and one is database first is code first and one is database first is code first and one is database first what we are doing is code first because what we are doing is code first because what we are doing is code first because here we are writing the code of our here we are writing the code of our here we are writing the code of our model and based on that model we will be model and based on that model we will be model and based on that model we will be creating the database creating the database creating the database so that is the code first approach so that is the code first approach so that is the code first approach database first approach will be database first approach will be database first approach will be something where database is already something where database is already something where database is already created and based off that database you created and based off that database you created and based off that database you will be scaffolding models will be scaffolding models will be scaffolding models i personally am a big fan of code first i personally am a big fan of code first i personally am a big fan of code first and that is what i have been using in and that is what i have been using in and that is what i have been using in all of my production application because all of my production application because all of my production application because i do not come from a dba management i do not come from a dba management i do not come from a dba management point of view i am more of a full stack point of view i am more of a full stack point of view i am more of a full stack developer who works with the code developer who works with the code developer who works with the code so if entity framework code will manage so if entity framework code will manage so if entity framework code will manage database for us i will be very happy database for us i will be very happy database for us i will be very happy with that approach with that approach with that approach so with that we have added our dbseg for so with that we have added our dbseg for so with that we have added our dbseg for the category table the category table the category table but we are missing one small but we are missing one small but we are missing one small configuration configuration configuration our application still does not know that our application still does not know that our application still does not know that it has to use the connection string that it has to use the connection string that it has to use the connection string that we wrote in app settings we wrote in app settings we wrote in app settings and it still does not know that it has and it still does not know that it has and it still does not know that it has to use application db context to create to use application db context to create to use application db context to create a db context and that it has to work a db context and that it has to work a db context and that it has to work with sql server with sql server with sql server so let's see how we can pull everything so let's see how we can pull everything so let's see how we can pull everything together in the next video we just need to tell our application we just need to tell our application we just need to tell our application that it has to use the db context which that it has to use the db context which that it has to use the db context which is inside application db context and is inside application db context and is inside application db context and then it has to use a sql server using then it has to use a sql server using then it has to use a sql server using the connection string that we defined the connection string that we defined the connection string that we defined inside the appsettings.json inside the appsettings.json inside the appsettings.json we will tell our application to do that we will tell our application to do that we will tell our application to do that insideprogram.cs insideprogram.cs insideprogram.cs where we configure the services that our where we configure the services that our where we configure the services that our application will use application will use application will use so here we have the comments to add the so here we have the comments to add the so here we have the comments to add the services to the container services to the container services to the container make sure you always do that before you make sure you always do that before you make sure you always do that before you build the builder build the builder build the builder so right here we want to add a new so right here we want to add a new so right here we want to add a new service so on builder dot services the service so on builder dot services the service so on builder dot services the service that we want to add is db service that we want to add is db service that we want to add is db context context context so you can see we have dot add db so you can see we have dot add db so you can see we have dot add db context and that expects a class file context and that expects a class file context and that expects a class file the class file that we are using for db the class file that we are using for db the class file that we are using for db context is the application db context context is the application db context context is the application db context if you press ctrl dot we will just have if you press ctrl dot we will just have if you press ctrl dot we will just have to add the using statement to the data to add the using statement to the data to add the using statement to the data folder folder folder now when we configure this db context if now when we configure this db context if now when we configure this db context if we go back to the application db context we go back to the application db context we go back to the application db context right here we are passing the options right here we are passing the options right here we are passing the options and we are sending those options to the and we are sending those options to the and we are sending those options to the base class base class base class so inside options we have to configure so inside options we have to configure so inside options we have to configure use of sql server and connection string use of sql server and connection string use of sql server and connection string so here we will say options so here we will say options so here we will say options goes to this is just the syntax we will goes to this is just the syntax we will goes to this is just the syntax we will say options dot say options dot say options dot there is a method with the name of use there is a method with the name of use there is a method with the name of use sql server sql server sql server but it will not be available like that but it will not be available like that but it will not be available like that even if you press ctrl dot it will not even if you press ctrl dot it will not even if you press ctrl dot it will not give you the package name that you have give you the package name that you have give you the package name that you have to add to add to add so for that we will have to go back to so for that we will have to go back to so for that we will have to go back to the manage nuget packages and we will the manage nuget packages and we will the manage nuget packages and we will have to install a package which is sql have to install a package which is sql have to install a package which is sql server with entity framework core server with entity framework core server with entity framework core which is microsoft which is microsoft which is microsoft dot entity framework core dot sql server dot entity framework core dot sql server dot entity framework core dot sql server make sure you are using the consistent make sure you are using the consistent make sure you are using the consistent version version version if one version of the package you are if one version of the package you are if one version of the package you are using is preview 7 and other one is using is preview 7 and other one is using is preview 7 and other one is preview 5 or even.net 5 preview 5 or even.net 5 preview 5 or even.net 5 then things won't work and you will run then things won't work and you will run then things won't work and you will run into error message into error message into error message so always make sure that you are using so always make sure that you are using so always make sure that you are using the same version let me install the sql server and we let me install the sql server and we let me install the sql server and we will close the new bit packages will close the new bit packages will close the new bit packages now if you press control dot you will now if you press control dot you will now if you press control dot you will see the using statement using microsoft see the using statement using microsoft see the using statement using microsoft dot entity framework core dot entity framework core dot entity framework core we will add that and on this sql server we will add that and on this sql server we will add that and on this sql server we have to write the connection string we have to write the connection string we have to write the connection string so where exactly is our connection so where exactly is our connection so where exactly is our connection string string string that is inside app settings we used a that is inside app settings we used a that is inside app settings we used a special block with the name of special block with the name of special block with the name of connection strings connection strings connection strings since we wrote our connection string since we wrote our connection string since we wrote our connection string inside the special block theme that i inside the special block theme that i inside the special block theme that i was talking about we can directly use was talking about we can directly use was talking about we can directly use the key value here to extract the the key value here to extract the the key value here to extract the connection string connection string connection string let me copy this name let me copy this name let me copy this name we will go back to our program.cs we will go back to our program.cs we will go back to our program.cs and right here on builder.configuration and right here on builder.configuration and right here on builder.configuration we have an existing method that is we have an existing method that is we have an existing method that is provided which is getconnectionstring provided which is getconnectionstring provided which is getconnectionstring inside this method we have to pass the inside this method we have to pass the inside this method we have to pass the string name which is default connection string name which is default connection string name which is default connection once you use that it will automatically once you use that it will automatically once you use that it will automatically find the connection string and configure find the connection string and configure find the connection string and configure our sql server our sql server our sql server now this cat connection string is a now this cat connection string is a now this cat connection string is a special method and this method will only special method and this method will only special method and this method will only look for this default connection inside look for this default connection inside look for this default connection inside a block with the name of connection a block with the name of connection a block with the name of connection strings strings strings if you named this connection strings 1 if you named this connection strings 1 if you named this connection strings 1 then it will not be able to find this then it will not be able to find this then it will not be able to find this connection string because this method connection string because this method connection string because this method will only look inside the block which is will only look inside the block which is will only look inside the block which is connection strings connection strings connection strings so that is why i said to name it exactly so that is why i said to name it exactly so that is why i said to name it exactly the same the same the same if you wanted to name it something else if you wanted to name it something else if you wanted to name it something else we have different ways of getting that we have different ways of getting that we have different ways of getting that but i do not want to go into those but i do not want to go into those but i do not want to go into those details right now details right now details right now so with this our db context will be so with this our db context will be so with this our db context will be configured with the connection string configured with the connection string configured with the connection string so all the configuration is done that so all the configuration is done that so all the configuration is done that was needed for the db context was needed for the db context was needed for the db context now we are on the final step where we now we are on the final step where we now we are on the final step where we have to create database and then the have to create database and then the have to create database and then the table inside sql server table inside sql server table inside sql server let's take a look at that in the next let's take a look at that in the next let's take a look at that in the next video video video now that the program.cs has been now that the program.cs has been now that the program.cs has been configured the next step that we have is configured the next step that we have is configured the next step that we have is to actually create the database and the to actually create the database and the to actually create the database and the table table table when you are using entity framework code when you are using entity framework code when you are using entity framework code first there are migrations that you have first there are migrations that you have first there are migrations that you have to run using entity framework to push to run using entity framework to push to run using entity framework to push the changes to database the changes to database the changes to database it is not as complex as it sounds we it is not as complex as it sounds we it is not as complex as it sounds we have done all the setup that is needed have done all the setup that is needed have done all the setup that is needed in order to run the migration you will in order to run the migration you will in order to run the migration you will go to tools nuget package manager and go to tools nuget package manager and go to tools nuget package manager and this time you will select the package this time you will select the package this time you will select the package manager console manager console manager console the first thing that you have to do is the first thing that you have to do is the first thing that you have to do is you have to add a migration you have to add a migration you have to add a migration migration is basically keeping a track migration is basically keeping a track migration is basically keeping a track of all the db changes that are needed of all the db changes that are needed of all the db changes that are needed and once that migration is created you and once that migration is created you and once that migration is created you push that migration to the database to push that migration to the database to push that migration to the database to actually create the database or make actually create the database or make actually create the database or make changes to your table changes to your table changes to your table let's see what that is the command to let's see what that is the command to let's see what that is the command to add a migration is add hyphen migration add a migration is add hyphen migration add a migration is add hyphen migration and then we have to give our migration a and then we have to give our migration a and then we have to give our migration a meaningful name meaningful name meaningful name do not use any spaces when you are do not use any spaces when you are do not use any spaces when you are writing the name writing the name writing the name the name that i want to give to our the name that i want to give to our the name that i want to give to our migration is add category to database migration is add category to database migration is add category to database let's hit the add button and we see an let's hit the add button and we see an let's hit the add button and we see an error message error message error message the error is because when you run add the error is because when you run add the error is because when you run add migration you have to add a new kit migration you have to add a new kit migration you have to add a new kit package package package you see the term add migration is not you see the term add migration is not you see the term add migration is not recognized recognized recognized i want you guys to copy this error and i want you guys to copy this error and i want you guys to copy this error and try to find out what is the package that try to find out what is the package that try to find out what is the package that is missing from google is missing from google is missing from google i can give you the answer directly but i i can give you the answer directly but i i can give you the answer directly but i want you guys to google what package is want you guys to google what package is want you guys to google what package is required based on this error message required based on this error message required based on this error message if you just copy that error and paste it if you just copy that error and paste it if you just copy that error and paste it here you will see the very first and if here you will see the very first and if here you will see the very first and if you scroll down you will see the package you scroll down you will see the package you scroll down you will see the package name it is so simple just install name it is so simple just install name it is so simple just install microsoft dot entity framework core dot microsoft dot entity framework core dot microsoft dot entity framework core dot tools tools tools that is the package that is required to that is the package that is required to that is the package that is required to enable migrations in your project enable migrations in your project enable migrations in your project whenever you face any error it is best whenever you face any error it is best whenever you face any error it is best to just google that error that way you to just google that error that way you to just google that error that way you can find the solution much easily and can find the solution much easily and can find the solution much easily and much quicker much quicker much quicker so let's go to our project manage nuget so let's go to our project manage nuget so let's go to our project manage nuget packages packages packages we will paste the package name we will paste the package name we will paste the package name and we will install the same version and we will install the same version and we will install the same version that we have in our project perfect that is done we can close this i perfect that is done we can close this i perfect that is done we can close this i can open up the package manager console can open up the package manager console can open up the package manager console again again again and i will run the same command one more and i will run the same command one more and i will run the same command one more time time time this time it should complete this time it should complete this time it should complete successfully and if you notice on the right hand side and if you notice on the right hand side and if you notice on the right hand side here a new folder with the name of here a new folder with the name of here a new folder with the name of migrations is created and there are two migrations is created and there are two migrations is created and there are two files that got added files that got added files that got added our migration file is the first one and our migration file is the first one and our migration file is the first one and that is opened up on the screen as well that is opened up on the screen as well that is opened up on the screen as well inside migrations we have two methods inside migrations we have two methods inside migrations we have two methods one is up and one is down one is up and one is down one is up and one is down the up method is what needs to happen the up method is what needs to happen the up method is what needs to happen inside the migration and down is if inside the migration and down is if inside the migration and down is if something goes down we need to roll back something goes down we need to roll back something goes down we need to roll back the changes the changes the changes so do not worry about the down right now so do not worry about the down right now so do not worry about the down right now let's see what's happening inside the up let's see what's happening inside the up let's see what's happening inside the up method method method on the migration builder we have a on the migration builder we have a on the migration builder we have a method with the name of create table method with the name of create table method with the name of create table and it is creating the table with the and it is creating the table with the and it is creating the table with the name of categories name of categories name of categories that is the exact name that we defined that is the exact name that we defined that is the exact name that we defined right here right here right here so it will create a table with the name so it will create a table with the name so it will create a table with the name of category and then that will have of category and then that will have of category and then that will have columns columns columns the first column will be the id column the first column will be the id column the first column will be the id column which will be of the type integer and which will be of the type integer and which will be of the type integer and nullable is false nullable is false nullable is false since we said it is a key column it is since we said it is a key column it is since we said it is a key column it is automatically making that an identity automatically making that an identity automatically making that an identity column and incrementing that by one column and incrementing that by one column and incrementing that by one every time every time every time pretty smart right pretty smart right pretty smart right the next thing is the name column and the next thing is the name column and the next thing is the name column and you can see the nullable is falsier you can see the nullable is falsier you can see the nullable is falsier if you did not add the required property if you did not add the required property if you did not add the required property then nullable would be true then nullable would be true then nullable would be true you will see that display order is also you will see that display order is also you will see that display order is also nullable false but we did not add that nullable false but we did not add that nullable false but we did not add that inside category inside category inside category and the reason behind that is it is an and the reason behind that is it is an and the reason behind that is it is an integer property and not a string integer property and not a string integer property and not a string that is why nullable is false because that is why nullable is false because that is why nullable is false because it's an integer it's an integer it's an integer last we have the created datetime of the last we have the created datetime of the last we have the created datetime of the type datetime2 and that looks good type datetime2 and that looks good type datetime2 and that looks good if you see on the constraints it is also if you see on the constraints it is also if you see on the constraints it is also adding a primary key on the id column adding a primary key on the id column adding a primary key on the id column with a name with a name with a name so migrations is exactly what we wanted so migrations is exactly what we wanted so migrations is exactly what we wanted but can we take a look at the sql that but can we take a look at the sql that but can we take a look at the sql that gets executed gets executed gets executed no what entity framework code does is no what entity framework code does is no what entity framework code does is based on this migrations it will create based on this migrations it will create based on this migrations it will create an optimized version of the sql query an optimized version of the sql query an optimized version of the sql query and it will automatically run that on and it will automatically run that on and it will automatically run that on the database the database the database you do not have to do anything with that you do not have to do anything with that you do not have to do anything with that what you work with is just the models what you work with is just the models what you work with is just the models you create a migration and you push that you create a migration and you push that you create a migration and you push that to the database to the database to the database so once you verify that migration is so once you verify that migration is so once you verify that migration is looking good you can just run the looking good you can just run the looking good you can just run the command update database and that will command update database and that will command update database and that will push the migrations to database push the migrations to database push the migrations to database we have an error here let me go to app we have an error here let me go to app we have an error here let me go to app settings settings settings and of course we do this will not be and of course we do this will not be and of course we do this will not be colon this will be equal to right here colon this will be equal to right here colon this will be equal to right here and they are separated by a semicolon and they are separated by a semicolon and they are separated by a semicolon that was my bad we will go back to the that was my bad we will go back to the that was my bad we will go back to the package manager and you can also see the package manager and you can also see the package manager and you can also see the error set server and colon was not error set server and colon was not error set server and colon was not supported because it should be equal to supported because it should be equal to supported because it should be equal to let's update the database one more time let's update the database one more time let's update the database one more time perfect the migrations were completed perfect the migrations were completed perfect the migrations were completed but what actually happened is first it but what actually happened is first it but what actually happened is first it will connect to the server it will check will connect to the server it will check will connect to the server it will check is there a database with the name of is there a database with the name of is there a database with the name of monkey there won't be anything right now monkey there won't be anything right now monkey there won't be anything right now so it will create that database first so it will create that database first so it will create that database first and then the migrations here it will and then the migrations here it will and then the migrations here it will convert them to sql and execute them on convert them to sql and execute them on convert them to sql and execute them on our database our database our database so if we go back now if we refresh the so if we go back now if we refresh the so if we go back now if we refresh the database you will see the new database database you will see the new database database you will see the new database with the name of bulky and if you open with the name of bulky and if you open with the name of bulky and if you open the tables there will be two tables the tables there will be two tables the tables there will be two tables let's examine the columns inside the let's examine the columns inside the let's examine the columns inside the categories table categories table categories table it should have four columns and that it should have four columns and that it should have four columns and that looks great looks great looks great now what is inside the ef migrations if now what is inside the ef migrations if now what is inside the ef migrations if you do the select top thousand entity you do the select top thousand entity you do the select top thousand entity framework code keeps a track of which framework code keeps a track of which framework code keeps a track of which migrations have been applied so next migrations have been applied so next migrations have been applied so next time when you run the update database it time when you run the update database it time when you run the update database it will not apply the same migration it will not apply the same migration it will not apply the same migration it will only apply the migrations that have will only apply the migrations that have will only apply the migrations that have not been applied on this database not been applied on this database not been applied on this database entity framework code is pretty smart entity framework code is pretty smart entity framework code is pretty smart with all the configuration and tracking with all the configuration and tracking with all the configuration and tracking that it needs to do that it needs to do that it needs to do so with that using entity framework core so with that using entity framework core so with that using entity framework core we have created our database and we have we have created our database and we have we have created our database and we have added our table based on the model added our table based on the model added our table based on the model inside our main project inside our main project inside our main project so with that let me continue in the next so with that let me continue in the next so with that let me continue in the next video now before we work on anything else let now before we work on anything else let now before we work on anything else let me run the project me run the project me run the project right now it is running on port 5001 let right now it is running on port 5001 let right now it is running on port 5001 let me change that so that the command me change that so that the command me change that so that the command prompt is not opened every time we can prompt is not opened every time we can prompt is not opened every time we can just run that using iis profile by just run that using iis profile by just run that using iis profile by clicking here clicking here clicking here that way it won't run on the port 5001 that way it won't run on the port 5001 that way it won't run on the port 5001 it will get the new port that is defined it will get the new port that is defined it will get the new port that is defined in the project config in the project config in the project config i'm getting an error that i'll have to i'm getting an error that i'll have to i'm getting an error that i'll have to open visual studio under an admin open visual studio under an admin open visual studio under an admin account so let me do that real quick account so let me do that real quick account so let me do that real quick we will open the project again we will open the project again we will open the project again we have the iis express here let's try we have the iis express here let's try we have the iis express here let's try to run it this time to run it this time to run it this time and perfect so we have home and privacy and perfect so we have home and privacy and perfect so we have home and privacy but both of these pages are inside the but both of these pages are inside the but both of these pages are inside the home controller home controller home controller now in category we will be creating now in category we will be creating now in category we will be creating editing and deleting category editing and deleting category editing and deleting category so for that rather than working on the so for that rather than working on the so for that rather than working on the home controller let's create a new home controller let's create a new home controller let's create a new controller for our category controller for our category controller for our category so inside the controllers folder we will so inside the controllers folder we will so inside the controllers folder we will right click add a controller right click add a controller right click add a controller and we have few options here we will go and we have few options here we will go and we have few options here we will go with the empty controller to keep things with the empty controller to keep things with the empty controller to keep things very simple and start from scratch very simple and start from scratch very simple and start from scratch i will call that as category controller i will call that as category controller i will call that as category controller now when you name a controller make sure now when you name a controller make sure now when you name a controller make sure that you append controller at the end that you append controller at the end that you append controller at the end that is a required field whatever name that is a required field whatever name that is a required field whatever name you want must come before the controller you want must come before the controller you want must come before the controller so once you have that name we will click so once you have that name we will click so once you have that name we will click the add button the add button the add button perfect we get an empty controller perfect we get an empty controller perfect we get an empty controller with index action method with index action method with index action method our home controller also had the index our home controller also had the index our home controller also had the index action method and our category action method and our category action method and our category controller also has the index action controller also has the index action controller also has the index action method method method but the index action method in home but the index action method in home but the index action method in home controller has a view that is inside the controller has a view that is inside the controller has a view that is inside the home folder home folder home folder our category action method does not have our category action method does not have our category action method does not have a view right now a view right now a view right now you can add the view in two ways you can add the view in two ways you can add the view in two ways first you can create a folder with the first you can create a folder with the first you can create a folder with the name of controller which is category name of controller which is category name of controller which is category inside the views and then you can add inside the views and then you can add inside the views and then you can add index view inside there index view inside there index view inside there or if you want to do that directly from or if you want to do that directly from or if you want to do that directly from the controller you can just right click the controller you can just right click the controller you can just right click on the action on the action on the action and you have add view and you have add view and you have add view we will be selecting the razer view here we will be selecting the razer view here we will be selecting the razer view here let's hit the add button let's hit the add button let's hit the add button now when you add a razer view there are now when you add a razer view there are now when you add a razer view there are a few configuration that you have to do a few configuration that you have to do a few configuration that you have to do first what will be the name of the view first what will be the name of the view first what will be the name of the view we will give that the same name as the we will give that the same name as the we will give that the same name as the action method which is index action method which is index action method which is index then do you want to use any templates then do you want to use any templates then do you want to use any templates when you create this view when you create this view when you create this view if you hover here you can create a view if you hover here you can create a view if you hover here you can create a view for create delete details edit and list for create delete details edit and list for create delete details edit and list i do not want to go into those details i do not want to go into those details i do not want to go into those details right now but we will come back to that right now but we will come back to that right now but we will come back to that later on later on later on if you change that then model and data if you change that then model and data if you change that then model and data context class will be enabled context class will be enabled context class will be enabled but we don't want to focus on that right but we don't want to focus on that right but we don't want to focus on that right now we want to start scratch with an now we want to start scratch with an now we want to start scratch with an empty template empty template empty template next is a partial view next is a partial view next is a partial view partial view is basically like user partial view is basically like user partial view is basically like user controls in the web form controls in the web form controls in the web form so it will be rendered inside some other so it will be rendered inside some other so it will be rendered inside some other view so if you select a partial view the view so if you select a partial view the view so if you select a partial view the layout page will not be used layout page will not be used layout page will not be used because you do not need any master page because you do not need any master page because you do not need any master page if you create a user component because if you create a user component because if you create a user component because you will be calling that inside some you will be calling that inside some you will be calling that inside some other view other view other view we don't want to take a look at that we don't want to take a look at that we don't want to take a look at that right now right now right now let's keep it simple let's keep it simple let's keep it simple next we will use the layout page next we will use the layout page next we will use the layout page we want our view to use the default we want our view to use the default we want our view to use the default master page master page master page so if you keep it blank it will by so if you keep it blank it will by so if you keep it blank it will by default use the layout that we have set default use the layout that we have set default use the layout that we have set inside the view start which is inside the view start which is inside the view start which is underscored layout underscored layout underscored layout we want it to be consistent so that is we want it to be consistent so that is we want it to be consistent so that is what we will be using what we will be using what we will be using and we will hit the add button and we will hit the add button and we will hit the add button it will scaffold few dependencies and it will scaffold few dependencies and it will scaffold few dependencies and then it will create the view then it will create the view then it will create the view if you had any errors while building the if you had any errors while building the if you had any errors while building the project and if you try to scaffold that project and if you try to scaffold that project and if you try to scaffold that will fail will fail will fail it will ask you to resolve the errors it will ask you to resolve the errors it will ask you to resolve the errors and only once your project is building and only once your project is building and only once your project is building successfully you will be able to successfully you will be able to successfully you will be able to scaffold the views scaffold the views scaffold the views so perfect our view has been created and so perfect our view has been created and so perfect our view has been created and let me call this index category let me call this index category let me call this index category with that let's continue in the next with that let's continue in the next with that let's continue in the next video video video we want to display all the categories if we want to display all the categories if we want to display all the categories if there are any in the table format inside there are any in the table format inside there are any in the table format inside the index view the index view the index view for that we will have to actually for that we will have to actually for that we will have to actually retrieve all the category list from our retrieve all the category list from our retrieve all the category list from our database inside the index action method database inside the index action method database inside the index action method so let me open up the layout page right so let me open up the layout page right so let me open up the layout page right here where we have two options of index here where we have two options of index here where we have two options of index and the privacy page and the privacy page and the privacy page rather than privacy let me display the rather than privacy let me display the rather than privacy let me display the category right here category right here category right here and in order to go to the index page how and in order to go to the index page how and in order to go to the index page how can we navigate to this particular view can we navigate to this particular view can we navigate to this particular view that was created that was created that was created it is inside category controller and we it is inside category controller and we it is inside category controller and we have index action method have index action method have index action method so here to navigate we can define the so here to navigate we can define the so here to navigate we can define the controller name is category controller name is category controller name is category and the action method is and the action method is and the action method is index index index we are not using areas here so you can we are not using areas here so you can we are not using areas here so you can keep that blank or you can also remove keep that blank or you can also remove keep that blank or you can also remove them if you want them if you want them if you want if you save this let's run the project if you save this let's run the project if you save this let's run the project one more time and make sure we are able one more time and make sure we are able one more time and make sure we are able to navigate to our action method to navigate to our action method to navigate to our action method so we have category when we click there so we have category when we click there so we have category when we click there perfect we see the index categories that perfect we see the index categories that perfect we see the index categories that is what we have inside the view is what we have inside the view is what we have inside the view so we are able to navigate there so we are able to navigate there so we are able to navigate there successfully successfully successfully now we need to retrieve all of the now we need to retrieve all of the now we need to retrieve all of the categories from our database so let me categories from our database so let me categories from our database so let me switch back to database and just for switch back to database and just for switch back to database and just for dummy purpose let me edit the top 200 dummy purpose let me edit the top 200 dummy purpose let me edit the top 200 and let me add something here and let me add something here and let me add something here so i have just created one dummy record so i have just created one dummy record so i have just created one dummy record inside the table right now inside the table right now inside the table right now i have created one dummy record inside i have created one dummy record inside i have created one dummy record inside the table the table the table let's go back and we want to retrieve let's go back and we want to retrieve let's go back and we want to retrieve that inside the category controller that inside the category controller that inside the category controller now i have said before that we will be now i have said before that we will be now i have said before that we will be using entity framework or using entity framework or using entity framework or and the main file that we have is the and the main file that we have is the and the main file that we have is the application db context using that we can application db context using that we can application db context using that we can access our database object access our database object access our database object because inside that file we have the because inside that file we have the because inside that file we have the categories table categories table categories table so how can we create an object of this so how can we create an object of this so how can we create an object of this application db context and use that to application db context and use that to application db context and use that to call our database and table call our database and table call our database and table that is the beauty of dependency that is the beauty of dependency that is the beauty of dependency injection injection injection we do not have to create an object of we do not have to create an object of we do not have to create an object of this class this class this class everything will be done for us because everything will be done for us because everything will be done for us because we have configured that inside our we have configured that inside our we have configured that inside our container we want to use this service container we want to use this service container we want to use this service so because of dependency injection so because of dependency injection so because of dependency injection we will not have to create its object we we will not have to create its object we we will not have to create its object we can think that the object is already can think that the object is already can think that the object is already there we just have to tell application there we just have to tell application there we just have to tell application that please send me the object of that please send me the object of that please send me the object of application db context application db context application db context how do you request that how do you request that how do you request that inside the controller you want the inside the controller you want the inside the controller you want the application db context to work with application db context to work with application db context to work with database database database so i will first create a private read so i will first create a private read so i will first create a private read only field which will be application db only field which will be application db only field which will be application db context context context and i will call that underscore tb and i will call that underscore tb and i will call that underscore tb we will add the using statement there we will add the using statement there we will add the using statement there and great and great and great now we need to tell our application that now we need to tell our application that now we need to tell our application that we need an implementation of this we need an implementation of this we need an implementation of this application db context where the application db context where the application db context where the connection to database is already made connection to database is already made connection to database is already made and i can retrieve some records right and i can retrieve some records right and i can retrieve some records right away away away so for that you will have to use so for that you will have to use so for that you will have to use constructor ctor tab tab constructor ctor tab tab constructor ctor tab tab and here whatever is registered inside and here whatever is registered inside and here whatever is registered inside the container you can access that the container you can access that the container you can access that inside our container we have registered inside our container we have registered inside our container we have registered application db context so inside the application db context so inside the application db context so inside the constructor we can get an implementation constructor we can get an implementation constructor we can get an implementation of that just like this of that just like this of that just like this so this db will have all the so this db will have all the so this db will have all the implementation of connection strings and implementation of connection strings and implementation of connection strings and tables that are needed to retrieve the tables that are needed to retrieve the tables that are needed to retrieve the data data data so we will populate our local db object so we will populate our local db object so we will populate our local db object with this implementation with this implementation with this implementation so we'll say underscore tb is equal to so we'll say underscore tb is equal to so we'll say underscore tb is equal to db db db and then we can use this underscore db and then we can use this underscore db and then we can use this underscore db to retrieve our categories to retrieve our categories to retrieve our categories the syntax of that is very simple we the syntax of that is very simple we the syntax of that is very simple we will create a var let me call this obj will create a var let me call this obj will create a var let me call this obj category list category list category list we will first access the underscore db we will first access the underscore db we will first access the underscore db and on there we will have all the db set and on there we will have all the db set and on there we will have all the db set the db set that we want to work on right the db set that we want to work on right the db set that we want to work on right now is categories now is categories now is categories and we want to convert it to a list and and we want to convert it to a list and and we want to convert it to a list and retrieve that retrieve that retrieve that so it will go to database it will so it will go to database it will so it will go to database it will retrieve all of the categories it will retrieve all of the categories it will retrieve all of the categories it will convert that to a list and it will convert that to a list and it will convert that to a list and it will assign that inside the category list you assign that inside the category list you assign that inside the category list you can see how beautiful this is you do not can see how beautiful this is you do not can see how beautiful this is you do not have to write a select statement to have to write a select statement to have to write a select statement to retrieve all the categories from the retrieve all the categories from the retrieve all the categories from the table there is no sql coding required table there is no sql coding required table there is no sql coding required you just have to write underscore tb dot you just have to write underscore tb dot you just have to write underscore tb dot the db set name and that will retrieve the db set name and that will retrieve the db set name and that will retrieve all the records you convert that to a all the records you convert that to a all the records you convert that to a list and you assign that to a variable list and you assign that to a variable list and you assign that to a variable now how do we test that this is working now how do we test that this is working now how do we test that this is working we will add a debugging point by going we will add a debugging point by going we will add a debugging point by going to this pan you see the red dots to this pan you see the red dots to this pan you see the red dots if you click here we are setting a if you click here we are setting a if you click here we are setting a debugging point debugging point debugging point then if you run iis express here your then if you run iis express here your then if you run iis express here your application will hit the debugging point application will hit the debugging point application will hit the debugging point when we load that page when we load that page when we load that page so if we click on category it will hit a so if we click on category it will hit a so if we click on category it will hit a debugging point debugging point debugging point you can see that is yellow now and if you can see that is yellow now and if you can see that is yellow now and if you hover on the category list you can you hover on the category list you can you hover on the category list you can see there is one count see there is one count see there is one count if you expand it more you can see it is if you expand it more you can see it is if you expand it more you can see it is the same record that we created inside the same record that we created inside the same record that we created inside the database the database the database so it goes to the database it fetches so it goes to the database it fetches so it goes to the database it fetches the categories and it does that the categories and it does that the categories and it does that automatically automatically automatically we have a list that is already populated we have a list that is already populated we have a list that is already populated here we just need to pass this list to here we just need to pass this list to here we just need to pass this list to our view and we can run for each loop on our view and we can run for each loop on our view and we can run for each loop on that list and we can display all the that list and we can display all the that list and we can display all the categories categories categories let's do that in the next video let's do that in the next video let's do that in the next video let me remove the breakpoint and let's let me remove the breakpoint and let's let me remove the breakpoint and let's do that in the next video now that we have all the categories now that we have all the categories now that we have all the categories inside this particular object we can inside this particular object we can inside this particular object we can copy that and we will pass that to our copy that and we will pass that to our copy that and we will pass that to our view view view and i do not like using variables here i and i do not like using variables here i and i do not like using variables here i am a fan of using the strongly type so am a fan of using the strongly type so am a fan of using the strongly type so this will be i innumerable of category we will have to press ctrl dot to add we will have to press ctrl dot to add we will have to press ctrl dot to add the using statement the using statement the using statement now since we have an i enumerable here now since we have an i enumerable here now since we have an i enumerable here and not a list if you want you can also and not a list if you want you can also and not a list if you want you can also remove the dot to list remove the dot to list remove the dot to list that is not a required thing but if this that is not a required thing but if this that is not a required thing but if this was a list then you would have used the was a list then you would have used the was a list then you would have used the dot to list dot to list dot to list so we are passing that to our view so we are passing that to our view so we are passing that to our view now that we are passing an i innumerable now that we are passing an i innumerable now that we are passing an i innumerable of category to our view we need to of category to our view we need to of category to our view we need to capture that inside our view as well capture that inside our view as well capture that inside our view as well so let me open up that view i have right so let me open up that view i have right so let me open up that view i have right here here here but if you do not have that open you can but if you do not have that open you can but if you do not have that open you can go to category and index view go to category and index view go to category and index view so right here we first need to capture so right here we first need to capture so right here we first need to capture the model that we are passing from the the model that we are passing from the the model that we are passing from the controller controller controller for that you will be using accurate sign for that you will be using accurate sign for that you will be using accurate sign and you will write model in all lower and you will write model in all lower and you will write model in all lower case case case if you make this a capital model that if you make this a capital model that if you make this a capital model that won't work won't work won't work in order to fetch what is being passed in order to fetch what is being passed in order to fetch what is being passed from the view you have to use a lower from the view you have to use a lower from the view you have to use a lower case at the rate model sign case at the rate model sign case at the rate model sign so what exactly is being passed from the so what exactly is being passed from the so what exactly is being passed from the controller action method it is an i controller action method it is an i controller action method it is an i enumerable of category enumerable of category enumerable of category we can copy this and we can paste that we can copy this and we can paste that we can copy this and we can paste that right here right here right here that way our view knows that whatever we that way our view knows that whatever we that way our view knows that whatever we receive here will be an innumerable of receive here will be an innumerable of receive here will be an innumerable of category category category since it is i enumerable we can iterate since it is i enumerable we can iterate since it is i enumerable we can iterate through that through that through that now if you have never worked with razer now if you have never worked with razer now if you have never worked with razer pages pages pages you can use both html as well as some c you can use both html as well as some c you can use both html as well as some c sharp code directly inside the view sharp code directly inside the view sharp code directly inside the view so first let's use the table attribute so first let's use the table attribute so first let's use the table attribute gives that some classes of table gives that some classes of table gives that some classes of table table bordered to give it a border table bordered to give it a border table bordered to give it a border and we'll say table striped and we'll say table striped and we'll say table striped we can also give it a style of width 100 we can also give it a style of width 100 we can also give it a style of width 100 percent inside the table we have t head and t inside the table we have t head and t inside the table we have t head and t body body body let me add both of them let me add both of them let me add both of them so t head will be for headers so t head will be for headers so t head will be for headers so we will have a tr tag in there and a so we will have a tr tag in there and a so we will have a tr tag in there and a t h tag what will be all the columns t h tag what will be all the columns t h tag what will be all the columns that we have to display that we have to display that we have to display the first one will be category name the first one will be category name the first one will be category name and the next one will be display order and the next one will be display order and the next one will be display order you can also display the date time and you can also display the date time and you can also display the date time and id if you want but we just want to id if you want but we just want to id if you want but we just want to display two columns display two columns display two columns that is the header that is the header that is the header now inside the body now inside the body now inside the body we will need a for each loop to iterate we will need a for each loop to iterate we will need a for each loop to iterate through the i enumerable and display the through the i enumerable and display the through the i enumerable and display the actual values actual values actual values as i said before we can use the sharp as i said before we can use the sharp as i said before we can use the sharp code directly inside the views using the code directly inside the views using the code directly inside the views using the add the rate directive add the rate directive add the rate directive so if you press at the rate you will see so if you press at the rate you will see so if you press at the rate you will see we have a for each right here we have a for each right here we have a for each right here syntax is pretty simple we will create a syntax is pretty simple we will create a syntax is pretty simple we will create a wire here we can call that obj wire here we can call that obj wire here we can call that obj and that is inside our model of the page and that is inside our model of the page and that is inside our model of the page so on top we use the lower case model so on top we use the lower case model so on top we use the lower case model but here model will have the first but here model will have the first but here model will have the first letter as capital letter as capital letter as capital so you can see how it is different so you can see how it is different so you can see how it is different that way it will iterate through all of that way it will iterate through all of that way it will iterate through all of the properties inside this model in for the properties inside this model in for the properties inside this model in for each loop now for each of the property each loop now for each of the property each loop now for each of the property we want to display a table row so we we want to display a table row so we we want to display a table row so we will add dr here in that we want the td will add dr here in that we want the td will add dr here in that we want the td tag first we want to display the name tag first we want to display the name tag first we want to display the name so again that name is inside the c sharp so again that name is inside the c sharp so again that name is inside the c sharp variable object so we will use the at variable object so we will use the at variable object so we will use the at the right sign and we will say obj dot the right sign and we will say obj dot the right sign and we will say obj dot name name name i can give it a width of 50 percent here and we can copy this and paste it one and we can copy this and paste it one and we can copy this and paste it one more time more time more time then we have display order so we will then we have display order so we will then we have display order so we will say obj dot display order say obj dot display order say obj dot display order let's give it a width of 30 percent let's give it a width of 30 percent let's give it a width of 30 percent this looks great let me save this and this looks great let me save this and this looks great let me save this and run the application if we go on category now you will see if we go on category now you will see if we go on category now you will see our one category that we have inside the our one category that we have inside the our one category that we have inside the database database database this is looking perfect to display all this is looking perfect to display all this is looking perfect to display all of the categories of the categories of the categories next what i want is edit and delete next what i want is edit and delete next what i want is edit and delete buttons here and i want to make this a buttons here and i want to make this a buttons here and i want to make this a little bit more pretty little bit more pretty little bit more pretty for that i will be using boots watch for that i will be using boots watch for that i will be using boots watch themes and let me show you that in the themes and let me show you that in the themes and let me show you that in the next video next video next video loves a pretty application loves a pretty application loves a pretty application because of that i want to use because of that i want to use because of that i want to use bootswatch.com which has three themes bootswatch.com which has three themes bootswatch.com which has three themes for bootstrap for bootstrap for bootstrap if we scroll down i want to use this if we scroll down i want to use this if we scroll down i want to use this solar theme for our project solar theme for our project solar theme for our project we can hit the download button and let's we can hit the download button and let's we can hit the download button and let's download the bootstrap.css download the bootstrap.css download the bootstrap.css let's open that file and it is using let's open that file and it is using let's open that file and it is using bootstrap 5. that's perfect bootstrap 5. that's perfect bootstrap 5. that's perfect let's copy this complete bootstrap let's copy this complete bootstrap let's copy this complete bootstrap and let me stop the application and let me stop the application and let me stop the application like ww root where we have css our like ww root where we have css our like ww root where we have css our bootstrap is inside the lib folder but bootstrap is inside the lib folder but bootstrap is inside the lib folder but here let me just create a new item here let me just create a new item here let me just create a new item style sheet we'll call that boots watch theme and we'll call that boots watch theme and we'll call that boots watch theme and let me add that let me add that let me add that i will paste the theme that we copied i will paste the theme that we copied i will paste the theme that we copied and we will be using this in our project and we will be using this in our project and we will be using this in our project looks good let me save this looks good let me save this looks good let me save this another change i would do is inside another change i would do is inside another change i would do is inside site.css site.css site.css they have added a btn primary so let me they have added a btn primary so let me they have added a btn primary so let me remove that and the anchor tag remove that and the anchor tag remove that and the anchor tag we will be using what is there inside we will be using what is there inside we will be using what is there inside our boots watch theme our boots watch theme our boots watch theme in order to add this to our project we in order to add this to our project we in order to add this to our project we will have to go to underscore layout and will have to go to underscore layout and will have to go to underscore layout and we should have our css at the very top we should have our css at the very top we should have our css at the very top this time we do not want the default this time we do not want the default this time we do not want the default bootstrap theme bootstrap theme bootstrap theme we want to use our bootswatchtheme.css now since we are using bootstrap 5 with now since we are using bootstrap 5 with now since we are using bootstrap 5 with bootspot if we go to bootstrap.com let's click on getting started in let's click on getting started in let's click on getting started in production we are in bootstrap 5. production we are in bootstrap 5. production we are in bootstrap 5. let me copy the js bundle that we have let me copy the js bundle that we have let me copy the js bundle that we have here here here we will copy that we will copy that we will copy that and we will go back to our project and we will go back to our project and we will go back to our project inside the underscored layout inside the underscored layout inside the underscored layout let me replace the js bundle that we let me replace the js bundle that we let me replace the js bundle that we have have have with the one that we copied with the one that we copied with the one that we copied as of this recording the default version as of this recording the default version as of this recording the default version of bootstrap is not five in dot net six of bootstrap is not five in dot net six of bootstrap is not five in dot net six this might change in future but that is this might change in future but that is this might change in future but that is the reason i'm switching to the latest the reason i'm switching to the latest the reason i'm switching to the latest version of bootstrap version of bootstrap version of bootstrap with that change let's run the with that change let's run the with that change let's run the application and see if something is application and see if something is application and see if something is different great you can see a dark theme has been great you can see a dark theme has been great you can see a dark theme has been applied so things are getting different applied so things are getting different applied so things are getting different let me switch back to the boots watch let me switch back to the boots watch let me switch back to the boots watch and let me go back to the theme that we and let me go back to the theme that we and let me go back to the theme that we have have have let's click on preview let's click on preview let's click on preview here we have a navbar let's use that here we have a navbar let's use that here we have a navbar let's use that i will copy everything that we have here let's go back to our application and i let's go back to our application and i let's go back to our application and i will paste that right here before the will paste that right here before the will paste that right here before the navbar that we have navbar that we have navbar that we have now since we are making changes inside now since we are making changes inside now since we are making changes inside the view if you remember when we created the view if you remember when we created the view if you remember when we created the project i enabled the razer runtime the project i enabled the razer runtime the project i enabled the razer runtime compilation compilation compilation so what that should do is when we save so what that should do is when we save so what that should do is when we save here and if we go back to our here and if we go back to our here and if we go back to our application and refresh it should load application and refresh it should load application and refresh it should load the changes because we are making the changes because we are making the changes because we are making changes directly inside the view changes directly inside the view changes directly inside the view but that does not seem to work as you but that does not seem to work as you but that does not seem to work as you can see can see can see the reason behind that is we added the the reason behind that is we added the the reason behind that is we added the package of razer runtime compilation package of razer runtime compilation package of razer runtime compilation even though these are razer pages if you even though these are razer pages if you even though these are razer pages if you examine the program class file we are examine the program class file we are examine the program class file we are only adding controllers with views only adding controllers with views only adding controllers with views we will have to make one small change we will have to make one small change we will have to make one small change here on builder.services here on builder.services here on builder.services we will have to add razer pages we will have to add razer pages we will have to add razer pages and on that we have add razor runtime and on that we have add razor runtime and on that we have add razor runtime compilation compilation compilation i don't know why it is like that i i don't know why it is like that i i don't know why it is like that i believe in future they will also add believe in future they will also add believe in future they will also add this with the views but right now this this with the views but right now this this with the views but right now this is only available with razer pages is only available with razer pages is only available with razer pages so this is one extra line that we have so this is one extra line that we have so this is one extra line that we have to add in an mvc project to get that to add in an mvc project to get that to add in an mvc project to get that runtime compilation runtime compilation runtime compilation with that change let's run the project with that change let's run the project with that change let's run the project one more time and great we see the new navigation menu and great we see the new navigation menu and great we see the new navigation menu right here right here right here we don't want everything else here let we don't want everything else here let we don't want everything else here let me comment that we will just add the me comment that we will just add the me comment that we will just add the home and category home and category home and category let me go back here to underscore layout let me go back here to underscore layout let me go back here to underscore layout and i can just copy the home and i can just copy the home and i can just copy the home let me cut this let me cut this let me cut this i can paste that right here let me scroll down but we have the other let me scroll down but we have the other let me scroll down but we have the other category controller category controller category controller cut that cut that cut that and we will paste that and we will paste that and we will paste that instead of features instead of features instead of features perfect i will remove these two the one perfect i will remove these two the one perfect i will remove these two the one in drop down i can just leave that in in drop down i can just leave that in in drop down i can just leave that in comments so that in future if we want to comments so that in future if we want to comments so that in future if we want to drop down we can use that drop down we can use that drop down we can use that and i can remove the nav bar all and i can remove the nav bar all and i can remove the nav bar all together together together let's go back and refresh and great this let's go back and refresh and great this let's go back and refresh and great this time we did not have to rebuild the time we did not have to rebuild the time we did not have to rebuild the application application application the text here is not visible the text here is not visible the text here is not visible so let me go back so let me go back so let me go back and we don't want the text dark anymore and we don't want the text dark anymore and we don't want the text dark anymore we can remove that we can remove that we can remove that and perfect looks much better and perfect looks much better and perfect looks much better if you click on home page it loads the if you click on home page it loads the if you click on home page it loads the home page and category should display home page and category should display home page and category should display all the categories all the categories all the categories great i also want to hide this border so great i also want to hide this border so great i also want to hide this border so that should be inside footer that should be inside footer that should be inside footer we have border top we can remove that we have border top we can remove that we have border top we can remove that and we can give it a background of bg and we can give it a background of bg and we can give it a background of bg dark let's go back and refresh let's go back and refresh let's go back and refresh and this looks much better and this looks much better and this looks much better so with this now we are using bootstrap so with this now we are using bootstrap so with this now we are using bootstrap 5 in our project and we are using the 5 in our project and we are using the 5 in our project and we are using the bootswatch theme bootswatch theme bootswatch theme let's continue in the next video inside our index view what we can do is inside our index view what we can do is inside our index view what we can do is we can add a button here to create a we can add a button here to create a we can add a button here to create a category category category so if we go back to our index let me add so if we go back to our index let me add so if we go back to our index let me add a little bit of more designing with a little bit of more designing with a little bit of more designing with bootstrap we will add a div give it a bootstrap we will add a div give it a bootstrap we will add a div give it a class of container and padding of three class of container and padding of three class of container and padding of three these are just the bootstrap classes these are just the bootstrap classes these are just the bootstrap classes in that we will add a div give it a in that we will add a div give it a in that we will add a div give it a class of row and padding top of four class of row and padding top of four class of row and padding top of four let me add text here let me add text here let me add text here save that and go back save that and go back save that and go back that will create a new row right here that will create a new row right here that will create a new row right here i want to divide this row into two parts i want to divide this row into two parts i want to divide this row into two parts by default bootstrap divides each row by default bootstrap divides each row by default bootstrap divides each row into 12 parts if we want but if we just into 12 parts if we want but if we just into 12 parts if we want but if we just want to divide it in two parts then we want to divide it in two parts then we want to divide it in two parts then we will have six in one and six in the will have six in one and six in the will have six in one and six in the other other other so here we will add a div give it a so here we will add a div give it a so here we will add a div give it a class of column six class of column six class of column six that will combine the first six in one that will combine the first six in one that will combine the first six in one div and we will add another div div and we will add another div div and we will add another div give it a class of column six give it a class of column six give it a class of column six so that will divide the screen in two so that will divide the screen in two so that will divide the screen in two parts parts parts the first one we want to display and the first one we want to display and the first one we want to display and heading so h2 give it a class of text heading so h2 give it a class of text heading so h2 give it a class of text primary and we want to display category list and we want to display category list and we want to display category list here here here let me save this go back and refresh let me save this go back and refresh let me save this go back and refresh and looks good and looks good and looks good let me close this container at the very let me close this container at the very let me close this container at the very end end end so we'll close that div at the end so we'll close that div at the end so we'll close that div at the end and right here we want to add a button and right here we want to add a button and right here we want to add a button right here we want to add a link right here we want to add a link right here we want to add a link inside there we want to go to a new inside there we want to go to a new inside there we want to go to a new action method that we will create inside action method that we will create inside action method that we will create inside the category controller the category controller the category controller that will be for creating a new category that will be for creating a new category that will be for creating a new category so right here we will say that should go so right here we will say that should go so right here we will say that should go to the same controller to the same controller to the same controller which is the category controller and it which is the category controller and it which is the category controller and it should go to an action method which will should go to an action method which will should go to an action method which will be create be create be create we do not have that yet but we will we do not have that yet but we will we do not have that yet but we will create that in the next video create that in the next video create that in the next video we can also add couple of bootstrap we can also add couple of bootstrap we can also add couple of bootstrap classes btn btn primary and here we can classes btn btn primary and here we can classes btn btn primary and here we can say create new say create new say create new category category category let me save this go back and refresh and let me save this go back and refresh and let me save this go back and refresh and we have our button we have our button we have our button let's align this button on the right let's align this button on the right let's align this button on the right hand side in bootstrap 5 we have text hand side in bootstrap 5 we have text hand side in bootstrap 5 we have text end end end we will save that and that will bring it we will save that and that will bring it we will save that and that will bring it to the right side to the right side to the right side then let me just leave couple of lines then let me just leave couple of lines then let me just leave couple of lines here i can just add few br tags and this looks much better and this looks much better and this looks much better now i also want to use some icons here now i also want to use some icons here now i also want to use some icons here like font awesome like font awesome like font awesome but with bootstrap 5 they have given but with bootstrap 5 they have given but with bootstrap 5 they have given their own sets of icons their own sets of icons their own sets of icons so why don't we use that so why don't we use that so why don't we use that if you go to getbootstrap.com if you go to getbootstrap.com if you go to getbootstrap.com we have the icons tab we have the icons tab we have the icons tab getting started with all of these icons getting started with all of these icons getting started with all of these icons is super simple is super simple is super simple i used to like font awesome but you had i used to like font awesome but you had i used to like font awesome but you had to register and do lots of thing this is to register and do lots of thing this is to register and do lots of thing this is available quickly you just click the available quickly you just click the available quickly you just click the install button install button install button and you have the cdn you copy that and you have the cdn you copy that and you have the cdn you copy that go to the underscore layout go to the underscore layout go to the underscore layout styles we will paste the cdn styles we will paste the cdn styles we will paste the cdn the icons are readily available to use the icons are readily available to use the icons are readily available to use let's go back to the bootstrap let's go back to the bootstrap let's go back to the bootstrap and right here let me search for plus if and right here let me search for plus if and right here let me search for plus if you scroll down we have this plus circle you scroll down we have this plus circle you scroll down we have this plus circle if you click there we have the link here if you click there we have the link here if you click there we have the link here we will copy we will copy we will copy and we just paste it before create and we just paste it before create and we just paste it before create category category category let me add a space let me add a space let me add a space let's save that let's save that let's save that and you will see the icons are working and you will see the icons are working and you will see the icons are working perfectly perfectly perfectly super easy to get started super easy to get started super easy to get started with that we have added icons with that we have added icons with that we have added icons but if you click the create new category but if you click the create new category but if you click the create new category you will see page not found you will see page not found you will see page not found that is because it is going inside that is because it is going inside that is because it is going inside category controller create action method category controller create action method category controller create action method but inside category there is no action but inside category there is no action but inside category there is no action method with the name of create method with the name of create method with the name of create so let's add that in the next video so let's add that in the next video so let's add that in the next video let me copy the index action method and let me copy the index action method and let me copy the index action method and we can paste that one more time we will we can paste that one more time we will we can paste that one more time we will have to change the name here to create have to change the name here to create have to change the name here to create and this will be a get action and this will be a get action and this will be a get action method now when someone hits the create method now when someone hits the create method now when someone hits the create button we will give them the option to button we will give them the option to button we will give them the option to enter their name and display order and enter their name and display order and enter their name and display order and create a category create a category create a category so when the view is being loaded you do so when the view is being loaded you do so when the view is being loaded you do not have to pass any model not have to pass any model not have to pass any model you can keep that blank and then you can you can keep that blank and then you can you can keep that blank and then you can create a model directly inside the view create a model directly inside the view create a model directly inside the view what do i mean by that what do i mean by that what do i mean by that let me create a view here we will right let me create a view here we will right let me create a view here we will right click add view click add view click add view razer view razer view razer view we will keep that empty and looks good we will keep that empty and looks good we will keep that empty and looks good let me add that let me add that let me add that now previously when we were working with now previously when we were working with now previously when we were working with index i said that this is the model that index i said that this is the model that index i said that this is the model that will be passed from the controller will be passed from the controller will be passed from the controller that is true but it is not always the that is true but it is not always the that is true but it is not always the case case case like in our create we are not passing like in our create we are not passing like in our create we are not passing anything from our controller anything from our controller anything from our controller but we still want to work on the but we still want to work on the but we still want to work on the category model and we want to fetch its category model and we want to fetch its category model and we want to fetch its properties when we submit the form so properties when we submit the form so properties when we submit the form so for that also you will have a model for for that also you will have a model for for that also you will have a model for this view this view this view that model will be the category model that model will be the category model that model will be the category model so the model that you write inside view so the model that you write inside view so the model that you write inside view is not always the model that is passed is not always the model that is passed is not always the model that is passed from the controller but if you are from the controller but if you are from the controller but if you are passing a model from the controller it passing a model from the controller it passing a model from the controller it must match what you have inside the must match what you have inside the must match what you have inside the model in the view model in the view model in the view but if you are not passing anything but if you are not passing anything but if you are not passing anything inside the controller like in create inside the controller like in create inside the controller like in create then you can find your view with a model then you can find your view with a model then you can find your view with a model based on the data that you're collecting based on the data that you're collecting based on the data that you're collecting on the page on the page on the page here we are collecting the name and here we are collecting the name and here we are collecting the name and display order we will use category so display order we will use category so display order we will use category so that we can use tag helpers to find that we can use tag helpers to find that we can use tag helpers to find everything for us everything for us everything for us now you might be thinking what is this now you might be thinking what is this now you might be thinking what is this new term tag helpers new term tag helpers new term tag helpers i will walk you through that but before i will walk you through that but before i will walk you through that but before that let me create a form here give it a that let me create a form here give it a that let me create a form here give it a method of post because we will be method of post because we will be method of post because we will be posting our data posting our data posting our data because we want to create our category because we want to create our category because we want to create our category in that i will create a div give it a in that i will create a div give it a in that i will create a div give it a class of order padding of 3 and margin class of order padding of 3 and margin class of order padding of 3 and margin top of 4. top of 4. top of 4. in there i will add a div give it a in there i will add a div give it a in there i will add a div give it a class of row class of row class of row and padding bottom of two and padding bottom of two and padding bottom of two and we will add a heading here which and we will add a heading here which and we will add a heading here which will have a class of text primary will have a class of text primary will have a class of text primary for the yellow color for the yellow color for the yellow color and we will display the heading which is and we will display the heading which is and we will display the heading which is create category create category create category let me add a hr here save this and run let me add a hr here save this and run let me add a hr here save this and run the project the project the project i want to see the view while we are i want to see the view while we are i want to see the view while we are building that building that building that so if we go to our category now so if we go to our category now so if we go to our category now and if we hit the create category button and if we hit the create category button and if we hit the create category button it will take us to the create category it will take us to the create category it will take us to the create category view that we created view that we created view that we created here i want to display a label and a here i want to display a label and a here i want to display a label and a text box text box text box so outside of this div i will add so outside of this div i will add so outside of this div i will add another div give it a class of margin another div give it a class of margin another div give it a class of margin bottom three bottom three bottom three in there we want to display a label in there we want to display a label in there we want to display a label you can just do label and give it a name you can just do label and give it a name you can just do label and give it a name like this that will work like this that will work like this that will work but what we want to do is we want to but what we want to do is we want to but what we want to do is we want to bind everything on this page with our bind everything on this page with our bind everything on this page with our category model category model category model because of that the dotnet core team has because of that the dotnet core team has because of that the dotnet core team has provided tag helpers which starts with provided tag helpers which starts with provided tag helpers which starts with asp so here we have asp hyphen 4 asp so here we have asp hyphen 4 asp so here we have asp hyphen 4 when we add that in a label we can use when we add that in a label we can use when we add that in a label we can use any of the properties from our model so any of the properties from our model so any of the properties from our model so you can see it is already displaying you can see it is already displaying you can see it is already displaying created date time display order name and created date time display order name and created date time display order name and id id id we will select name here and we do not we will select name here and we do not we will select name here and we do not have to populate anything else have to populate anything else have to populate anything else if we go back and if we refresh the if we go back and if we refresh the if we go back and if we refresh the output will be same output will be same output will be same because what it does here because what it does here because what it does here is it displays the name of the property is it displays the name of the property is it displays the name of the property inside our category model inside our category model inside our category model so we have it as name so that is what it so we have it as name so that is what it so we have it as name so that is what it will display in the ui as well will display in the ui as well will display in the ui as well let's go back to the create view let's go back to the create view let's go back to the create view and now we want an input field and now we want an input field and now we want an input field so we will say input and we will just so we will say input and we will just so we will say input and we will just say asp4 tag helper this input is for say asp4 tag helper this input is for say asp4 tag helper this input is for name name name that way it will do all the binding and that way it will do all the binding and that way it will do all the binding and when this form is posted it will post an when this form is posted it will post an when this form is posted it will post an object of this category class with the object of this category class with the object of this category class with the name populated name populated name populated we can give it a bootstrap class of form we can give it a bootstrap class of form we can give it a bootstrap class of form control control control let me save that and refresh oops i let me save that and refresh oops i let me save that and refresh oops i close that let me run it again and create you can see a text box right and create you can see a text box right and create you can see a text box right here here here this looks good let me also add a text this looks good let me also add a text this looks good let me also add a text box for the other field which is display box for the other field which is display box for the other field which is display order so i will just copy this paste it order so i will just copy this paste it order so i will just copy this paste it here the asp4 will be display order this here the asp4 will be display order this here the asp4 will be display order this time time time let me save that go back and refresh let me save that go back and refresh let me save that go back and refresh and great this looks good and great this looks good and great this looks good you can notice the name of the label is you can notice the name of the label is you can notice the name of the label is display order without a space and that display order without a space and that display order without a space and that is because inside category that is the is because inside category that is the is because inside category that is the property name itself property name itself property name itself we will fix that in just a second but i we will fix that in just a second but i we will fix that in just a second but i wanted to show that wanted to show that wanted to show that now let me add a button here to actually now let me add a button here to actually now let me add a button here to actually submit the form and i will add a link to submit the form and i will add a link to submit the form and i will add a link to go back to the index page of the go back to the index page of the go back to the index page of the category controller category controller category controller so we'll go to create here so we'll go to create here so we'll go to create here and we will add a button give it a type and we will add a button give it a type and we will add a button give it a type of submit we will also give it some bootstrap we will also give it some bootstrap we will also give it some bootstrap classes of btn btn primary classes of btn btn primary classes of btn btn primary and i will give it a width of 150 pixels and i will give it a width of 150 pixels and i will give it a width of 150 pixels i will call this button as create i will call this button as create i will call this button as create next i want to add a link here this link next i want to add a link here this link next i want to add a link here this link i want to go back to the index action i want to go back to the index action i want to go back to the index action method inside the category controller to method inside the category controller to method inside the category controller to load all of the categories load all of the categories load all of the categories so it is more like a back button link so it is more like a back button link so it is more like a back button link so first what is the controller name so first what is the controller name so first what is the controller name that is the category controller and what that is the category controller and what that is the category controller and what is the action in there that is the index is the action in there that is the index is the action in there that is the index action action action we will give it some bootstrap classes we will give it some bootstrap classes we will give it some bootstrap classes ptn ptn secondary ptn ptn secondary ptn ptn secondary and i will also give it a style with the and i will also give it a style with the and i will also give it a style with the width of 150 pixels width of 150 pixels width of 150 pixels within here we will display back to list within here we will display back to list within here we will display back to list let's go back let's go back let's go back and looks better and looks better and looks better if we click on back to list you can see if we click on back to list you can see if we click on back to list you can see that is functional that is functional that is functional now in the next video we want to hit the now in the next video we want to hit the now in the next video we want to hit the create button and create our category create button and create our category create button and create our category with that let's continue from the next with that let's continue from the next with that let's continue from the next video now i want to create the category when now i want to create the category when now i want to create the category when we populate the details and hit the we populate the details and hit the we populate the details and hit the create button create button create button so when we hit the create button we will so when we hit the create button we will so when we hit the create button we will have to create a post action method have to create a post action method have to create a post action method inside the category controller inside the category controller inside the category controller and in that post action method we will and in that post action method we will and in that post action method we will already be fetching the category object already be fetching the category object already be fetching the category object that is populated because we used tag that is populated because we used tag that is populated because we used tag helpers helpers helpers so inside the category controller we can so inside the category controller we can so inside the category controller we can copy this create and paste that one more copy this create and paste that one more copy this create and paste that one more time let me stop the application time let me stop the application time let me stop the application inside the parameters we will be inside the parameters we will be inside the parameters we will be receiving a category object let me call receiving a category object let me call receiving a category object let me call that obj that obj that obj this will be boost action method this will be boost action method this will be boost action method now if an action method is post we have now if an action method is post we have now if an action method is post we have to write the attribute http post to write the attribute http post to write the attribute http post on top of that the dotnet team has a pro on top of that the dotnet team has a pro on top of that the dotnet team has a pro and then we also have to validate the and then we also have to validate the and then we also have to validate the anti-forgery token anti-forgery token anti-forgery token anti-forgery token is there to help and anti-forgery token is there to help and anti-forgery token is there to help and prevent the cross-site request 4gb prevent the cross-site request 4gb prevent the cross-site request 4gb attack attack attack what it basically does is inside any what it basically does is inside any what it basically does is inside any forms that you have inside the forms that you have inside the forms that you have inside the application it will automatically inject application it will automatically inject application it will automatically inject a key there a key there a key there and that key will be validated at this and that key will be validated at this and that key will be validated at this step step step that key must be valid to prevent the that key must be valid to prevent the that key must be valid to prevent the cross-site request forgery cross-site request forgery cross-site request forgery i have explained the cross-site request i have explained the cross-site request i have explained the cross-site request forgery and the validate anti-forgery forgery and the validate anti-forgery forgery and the validate anti-forgery token in much details inside free token in much details inside free token in much details inside free content on.net mastery if you search and content on.net mastery if you search and content on.net mastery if you search and look for cross-site request forgery you look for cross-site request forgery you look for cross-site request forgery you can find that video on youtube and watch can find that video on youtube and watch can find that video on youtube and watch that that that i do not want to change the focus of i do not want to change the focus of i do not want to change the focus of this course so we will just validate this course so we will just validate this course so we will just validate that token on all of the post request that token on all of the post request that token on all of the post request this is not required but i will highly this is not required but i will highly this is not required but i will highly recommend that to avoid the cross site recommend that to avoid the cross site recommend that to avoid the cross site request forgery request forgery request forgery now once we have the category object now once we have the category object now once we have the category object that is populated with name and the that is populated with name and the that is populated with name and the display order we want to create that display order we want to create that display order we want to create that record inside the database record inside the database record inside the database so to do that we will use our db context so to do that we will use our db context so to do that we will use our db context and on that we have the categories and on that we have the categories and on that we have the categories then in order to retrieve categories we then in order to retrieve categories we then in order to retrieve categories we did not have to write anything else but did not have to write anything else but did not have to write anything else but when we have to add something to the when we have to add something to the when we have to add something to the table we have to add method there and table we have to add method there and table we have to add method there and you can see it expects a category entity you can see it expects a category entity you can see it expects a category entity we already have that inside the obj that we already have that inside the obj that we already have that inside the obj that is what the user populated is what the user populated is what the user populated so we will add that to our database so we will add that to our database so we will add that to our database now once you add it to the database it now once you add it to the database it now once you add it to the database it is not pushed to the database right now is not pushed to the database right now is not pushed to the database right now it will be pushed to the database when it will be pushed to the database when it will be pushed to the database when you run the command underscore db dot you run the command underscore db dot you run the command underscore db dot save changes save changes save changes at that point it goes to the database at that point it goes to the database at that point it goes to the database and saves all the changes and saves all the changes and saves all the changes once the changes are saved we have once the changes are saved we have once the changes are saved we have written view here that will take us back written view here that will take us back written view here that will take us back to the same category view to the same category view to the same category view let's see when we are done let's go back let's see when we are done let's go back let's see when we are done let's go back to the index so that we can see the new to the index so that we can see the new to the index so that we can see the new category that was created category that was created category that was created so rather than return view we want to so rather than return view we want to so rather than return view we want to redirect to an action redirect to an action redirect to an action we want to redirect to the index action we want to redirect to the index action we want to redirect to the index action it will look for this index inside the it will look for this index inside the it will look for this index inside the same controller same controller same controller if you had to go to an action method in if you had to go to an action method in if you had to go to an action method in some other controller you can define the some other controller you can define the some other controller you can define the controller name right here controller name right here controller name right here but since we are in the same controller but since we are in the same controller but since we are in the same controller we can just mention index and that will we can just mention index and that will we can just mention index and that will work work work let's run our application and try this let's run our application and try this let's run our application and try this out out out let's go to our category let's go to our category let's go to our category and let's create a new category and let's create a new category and let's create a new category i will call this test display order 12 i will call this test display order 12 i will call this test display order 12 and great you can see it has been and great you can see it has been and great you can see it has been created created created if we go back to our sql server let me if we go back to our sql server let me if we go back to our sql server let me close this close this close this and if we do select top thousand and if we do select top thousand and if we do select top thousand now we see two records now we see two records now we see two records so perfect this is working as expected so perfect this is working as expected so perfect this is working as expected and we are able to create a new category and we are able to create a new category and we are able to create a new category now now now but our create category is not perfect but our create category is not perfect but our create category is not perfect if you hit the create button you will if you hit the create button you will if you hit the create button you will run into an exception run into an exception run into an exception let me switch back to the project let me switch back to the project let me switch back to the project and you can see the exception is cannot and you can see the exception is cannot and you can see the exception is cannot insert now inside the column name insert now inside the column name insert now inside the column name we do not have any validations but we do not have any validations but we do not have any validations but inside database we said that this was a inside database we said that this was a inside database we said that this was a not nullable column not nullable column not nullable column so when the entity framework code tries so when the entity framework code tries so when the entity framework code tries to save it gives the exception pretty to save it gives the exception pretty to save it gives the exception pretty smart smart smart but we have to be much smarter to handle but we have to be much smarter to handle but we have to be much smarter to handle the validations the validations the validations let's take a look at them in the next let's take a look at them in the next let's take a look at them in the next video now when we try to create a category now when we try to create a category now when we try to create a category without any fields populated right now without any fields populated right now without any fields populated right now we see some error message because it we see some error message because it we see some error message because it cannot add an object when in the cannot add an object when in the cannot add an object when in the database we have validation database we have validation database we have validation but that is not a good approach because but that is not a good approach because but that is not a good approach because we are throwing exception in that case we are throwing exception in that case we are throwing exception in that case what should happen is we should handle what should happen is we should handle what should happen is we should handle our validations inside the server side our validations inside the server side our validations inside the server side which is controller as well as inside which is controller as well as inside which is controller as well as inside client side which is inside the create client side which is inside the create client side which is inside the create view view view so how do we handle validations so how do we handle validations so how do we handle validations let's first do that at the server side let's first do that at the server side let's first do that at the server side so when we receive a model here we can so when we receive a model here we can so when we receive a model here we can check whether this model is valid or not check whether this model is valid or not check whether this model is valid or not and what defines a valid model is the and what defines a valid model is the and what defines a valid model is the validations that we have right here validations that we have right here validations that we have right here name should be a required property name should be a required property name should be a required property so let's go back and let's make sure so let's go back and let's make sure so let's go back and let's make sure that our model is valid that our model is valid that our model is valid in order to check that with net core we in order to check that with net core we in order to check that with net core we have model state dot is valid have model state dot is valid have model state dot is valid that will determine if the model is that will determine if the model is that will determine if the model is valid or not valid or not valid or not if that is valid we want to create and if that is valid we want to create and if that is valid we want to create and redirect to index if that is not valid redirect to index if that is not valid redirect to index if that is not valid we just return back to the view with the we just return back to the view with the we just return back to the view with the object object object let me run this and show you what let me run this and show you what let me run this and show you what happens happens happens i'll add a debugging point on if the i'll add a debugging point on if the i'll add a debugging point on if the model state is valid model state is valid model state is valid so let's run our application so let's run our application so let's run our application let's try to create a category with no let's try to create a category with no let's try to create a category with no fields populated fields populated fields populated we hit our breakpoint and if you examine we hit our breakpoint and if you examine we hit our breakpoint and if you examine the isvalid flag is false the isvalid flag is false the isvalid flag is false so our model state is not valid so our model state is not valid so our model state is not valid great but now which property in our great but now which property in our great but now which property in our model state is not valid it is important model state is not valid it is important model state is not valid it is important to know that because right now we just to know that because right now we just to know that because right now we just have two properties it could be possible have two properties it could be possible have two properties it could be possible we have over 50 properties in a model we have over 50 properties in a model we have over 50 properties in a model so in that case you hover on model state so in that case you hover on model state so in that case you hover on model state you expand that inside the error counts you expand that inside the error counts you expand that inside the error counts you see we have two errors you see we have two errors you see we have two errors if you hover on the values here if you hover on the values here if you hover on the values here result view you will see which result view you will see which result view you will see which properties are not valid you can see properties are not valid you can see properties are not valid you can see display order is not valid as well as display order is not valid as well as display order is not valid as well as name is not valid name is not valid name is not valid let's continue here and this time let me let's continue here and this time let me let's continue here and this time let me populate display order and hit the populate display order and hit the populate display order and hit the create button one more time create button one more time create button one more time model state will still be not valid but model state will still be not valid but model state will still be not valid but this time if you examine the error count this time if you examine the error count this time if you examine the error count is only one because we already fixed one is only one because we already fixed one is only one because we already fixed one of the errors by providing display order of the errors by providing display order of the errors by providing display order so now you can see display order is so now you can see display order is so now you can see display order is valid but name is still invalid because valid but name is still invalid because valid but name is still invalid because it is a required field it is a required field it is a required field our server side validations are working our server side validations are working our server side validations are working but with that it would be helpful if we but with that it would be helpful if we but with that it would be helpful if we are displaying an error message right are displaying an error message right are displaying an error message right here so that user can know why it is here so that user can know why it is here so that user can know why it is failing failing failing doing that is super simple doing that is super simple doing that is super simple we will remove the breakpoint here and we will remove the breakpoint here and we will remove the breakpoint here and let me go to the view let me go to the view let me go to the view just like we have asp4 tag helper we just like we have asp4 tag helper we just like we have asp4 tag helper we also have a tag helper for validation also have a tag helper for validation also have a tag helper for validation so inside name we can add a span tag and so inside name we can add a span tag and so inside name we can add a span tag and we have the tag helper asp validation we have the tag helper asp validation we have the tag helper asp validation for for for on this you have to define the model so on this you have to define the model so on this you have to define the model so we want to check validations for name we want to check validations for name we want to check validations for name here and if there are any errors we want here and if there are any errors we want here and if there are any errors we want to display them in red color to display them in red color to display them in red color so we can give it a bootstrap class of so we can give it a bootstrap class of so we can give it a bootstrap class of text danger text danger text danger we will copy this pan and we will paste we will copy this pan and we will paste we will copy this pan and we will paste that for display order as well that for display order as well that for display order as well with that in place make sure to save with that in place make sure to save with that in place make sure to save this and we will go back and refresh the this and we will go back and refresh the this and we will go back and refresh the page page page let me just reload this let me just reload this let me just reload this and this time if you try to hit the and this time if you try to hit the and this time if you try to hit the create button you can see the default create button you can see the default create button you can see the default error message is displayed error message is displayed error message is displayed the first one that we have is name is a the first one that we have is name is a the first one that we have is name is a required field and display order while required field and display order while required field and display order while you know is invalid because it's an you know is invalid because it's an you know is invalid because it's an integer integer integer so with that we can display the default so with that we can display the default so with that we can display the default error messages right here error messages right here error messages right here so with that we have our server side so with that we have our server side so with that we have our server side validations in which it checks at the validations in which it checks at the validations in which it checks at the controller level if the model state is controller level if the model state is controller level if the model state is valid or not valid or not valid or not if it is not valid it populates the if it is not valid it populates the if it is not valid it populates the model state with error message model state with error message model state with error message it returns back the obj and it it returns back the obj and it it returns back the obj and it automatically displays the validations automatically displays the validations automatically displays the validations that we have added that we have added that we have added we did not have to write javascript or we did not have to write javascript or we did not have to write javascript or any other complex code it is doing all any other complex code it is doing all any other complex code it is doing all of that with the help of tag helpers of that with the help of tag helpers of that with the help of tag helpers let's continue in the next video let's continue in the next video let's continue in the next video with server side validations what if you with server side validations what if you with server side validations what if you want to display a summary at the top want to display a summary at the top want to display a summary at the top with all the error message with all the error message with all the error message if you want to do that dot net core has if you want to do that dot net core has if you want to do that dot net core has a solution for that a solution for that a solution for that you will need a div this time and not a you will need a div this time and not a you will need a div this time and not a span that you were using with validation span that you were using with validation span that you were using with validation for for for and inside div you can see we have a tag and inside div you can see we have a tag and inside div you can see we have a tag helper asp validation summary helper asp validation summary helper asp validation summary this will be all this will be all this will be all in this case it will display all the in this case it will display all the in this case it will display all the validations at the top in a summary validations at the top in a summary validations at the top in a summary format format format once we make this change let's go back once we make this change let's go back once we make this change let's go back and refresh here if you hit create and refresh here if you hit create and refresh here if you hit create great now you see the error messages at great now you see the error messages at great now you see the error messages at top as well top as well top as well when you select all it will display when you select all it will display when you select all it will display models as well as properties models as well as properties models as well as properties if you want to limit that you can change if you want to limit that you can change if you want to limit that you can change that to model only and none that to model only and none that to model only and none but if you are using validation summary but if you are using validation summary but if you are using validation summary i personally like all and this is great i personally like all and this is great i personally like all and this is great now along with that what if we want to now along with that what if we want to now along with that what if we want to add some custom validation add some custom validation add some custom validation like let's say inside the controller like let's say inside the controller like let's say inside the controller here we want to make sure that we do not here we want to make sure that we do not here we want to make sure that we do not add any category which has the same name add any category which has the same name add any category which has the same name and display order and display order and display order how can we add that to the validation how can we add that to the validation how can we add that to the validation so before we confirm if the model state so before we confirm if the model state so before we confirm if the model state is valid we can check here if obj dot is valid we can check here if obj dot is valid we can check here if obj dot name is equal equal to obj dot display name is equal equal to obj dot display name is equal equal to obj dot display order order order we will have to convert that to a string we will have to convert that to a string we will have to convert that to a string if this is the same we want to tell our if this is the same we want to tell our if this is the same we want to tell our model state that this is not valid model state that this is not valid model state that this is not valid so for that on the model state itself we so for that on the model state itself we so for that on the model state itself we can add custom model errors can add custom model errors can add custom model errors here we have a key and value pair here we have a key and value pair here we have a key and value pair you can give any key name that you want you can give any key name that you want you can give any key name that you want we will call this custom error we will call this custom error we will call this custom error if you want you can also use string dot if you want you can also use string dot if you want you can also use string dot empty empty empty but since this is a key you have to make but since this is a key you have to make but since this is a key you have to make sure that you do not use the same key sure that you do not use the same key sure that you do not use the same key two times two times two times let me add a custom error that the let me add a custom error that the let me add a custom error that the display order cannot exactly match the display order cannot exactly match the display order cannot exactly match the name now since we are making a change name now since we are making a change name now since we are making a change inside the controller we will actually inside the controller we will actually inside the controller we will actually have to restart our application to see have to restart our application to see have to restart our application to see this change this change this change if we were working with the view we did if we were working with the view we did if we were working with the view we did not have to restart not have to restart not have to restart let's go to our category let's go to our category let's go to our category and try to create a category with the and try to create a category with the and try to create a category with the same name and display order this time same name and display order this time same name and display order this time you can see we have our custom you can see we have our custom you can see we have our custom validation that is being displayed in validation that is being displayed in validation that is being displayed in the summary the summary the summary now if we did not have summary then this now if we did not have summary then this now if we did not have summary then this would not have been displayed would not have been displayed would not have been displayed but what if you want to display the but what if you want to display the but what if you want to display the error message inside name as well error message inside name as well error message inside name as well it is pretty simple we will stop the it is pretty simple we will stop the it is pretty simple we will stop the application and the key we will just application and the key we will just application and the key we will just change that to name change that to name change that to name because inside the category object if because inside the category object if because inside the category object if you notice we have name so inside you notice we have name so inside you notice we have name so inside controller we are adding a new error controller we are adding a new error controller we are adding a new error inside the name property inside the name property inside the name property let's run this and give that a try let's run this and give that a try let's run this and give that a try let's go to our category let's go to our category let's go to our category and try to create a new category and try to create a new category and try to create a new category with the same name and display order with the same name and display order with the same name and display order great now you see it displays in both great now you see it displays in both great now you see it displays in both places places places so with this we have seen how to add so with this we have seen how to add so with this we have seen how to add custom error message custom error message custom error message but all of the validations that we have but all of the validations that we have but all of the validations that we have so far are done on the server side so far are done on the server side so far are done on the server side every time you hit the create button you every time you hit the create button you every time you hit the create button you will see the page will reload will see the page will reload will see the page will reload so that means we are hitting server so that means we are hitting server so that means we are hitting server every time every time every time even if the name and display order are even if the name and display order are even if the name and display order are empty we go back and hit the server empty we go back and hit the server empty we go back and hit the server because the page reloads because the page reloads because the page reloads what if we want to make all of these what if we want to make all of these what if we want to make all of these validations on client-side validations on client-side validations on client-side let's do that in the next video let's do that in the next video let's do that in the next video now if you want to do the basic model now if you want to do the basic model now if you want to do the basic model validations like name and value for the validations like name and value for the validations like name and value for the display order on the client side it is display order on the client side it is display order on the client side it is pretty simple pretty simple pretty simple if you examine inside the shared folder if you examine inside the shared folder if you examine inside the shared folder we have a validation scripts partial we have a validation scripts partial we have a validation scripts partial that is using that is using that is using jquery.validate jquery.validate jquery.validate it is inside a partial view so if we it is inside a partial view so if we it is inside a partial view so if we want to do client-side validations we want to do client-side validations we want to do client-side validations we just have to include this partial view just have to include this partial view just have to include this partial view in our view in our view in our view so that brings the big question how do so that brings the big question how do so that brings the big question how do we use a partial view we have not we use a partial view we have not we use a partial view we have not created one but we are using the one created one but we are using the one created one but we are using the one that is already available that is already available that is already available it's not a rule but typically it's good it's not a rule but typically it's good it's not a rule but typically it's good to name partial views with underscore to name partial views with underscore to name partial views with underscore so even if in future when we create a so even if in future when we create a so even if in future when we create a partial view we will follow that partial view we will follow that partial view we will follow that convention convention convention now in order to include a partial view now in order to include a partial view now in order to include a partial view it is pretty simple you can directly say it is pretty simple you can directly say it is pretty simple you can directly say partial partial partial and then you have to write name of the and then you have to write name of the and then you have to write name of the view view view so make sure to type the exact name so make sure to type the exact name so make sure to type the exact name if you have a spelling mistake there if you have a spelling mistake there if you have a spelling mistake there then this won't be included then this won't be included then this won't be included with that the errors go away with that the errors go away with that the errors go away but inside the partial view if you open but inside the partial view if you open but inside the partial view if you open up we have script files up we have script files up we have script files so we need to add that inside a script so we need to add that inside a script so we need to add that inside a script section of our view section of our view section of our view so here we will have to create a section so here we will have to create a section so here we will have to create a section for scripts for scripts for scripts and in there we will have to add our and in there we will have to add our and in there we will have to add our partial view and that tool inside razor partial view and that tool inside razor partial view and that tool inside razor syntax syntax syntax once you add this let's run the once you add this let's run the once you add this let's run the application one more time and see the application one more time and see the application one more time and see the magic magic magic let's go to our category let's go to our category let's go to our category and let's try to create a new category and let's try to create a new category and let's try to create a new category we will hit the create button we will hit the create button we will hit the create button you see we get the validations but we you see we get the validations but we you see we get the validations but we are not going to server this time are not going to server this time are not going to server this time all the validations are done on client all the validations are done on client all the validations are done on client side because of the script that we side because of the script that we side because of the script that we included included included to double check you can just add a to double check you can just add a to double check you can just add a debugging point here debugging point here debugging point here and hit the create button it will never and hit the create button it will never and hit the create button it will never reach our debugging point reach our debugging point reach our debugging point it will reach our debugging point if the it will reach our debugging point if the it will reach our debugging point if the name and display order are the same then name and display order are the same then name and display order are the same then the client-side validations are valid the client-side validations are valid the client-side validations are valid the validation that fails is the server the validation that fails is the server the validation that fails is the server side custom validation that we added side custom validation that we added side custom validation that we added and if you continue and if you continue and if you continue perfect you can see that in action perfect you can see that in action perfect you can see that in action so with this we can see how easy it was so with this we can see how easy it was so with this we can see how easy it was to add client-side validation to add client-side validation to add client-side validation let's continue in the next video now that we have added the client-side now that we have added the client-side now that we have added the client-side validations i want to show you one more validations i want to show you one more validations i want to show you one more thing thing thing right now we have the default message right now we have the default message right now we have the default message that is being displayed that is being displayed that is being displayed right now we have the default message right now we have the default message right now we have the default message that is being displayed that is being displayed that is being displayed on top of that you can see right now in on top of that you can see right now in on top of that you can see right now in display order there is no space that is display order there is no space that is display order there is no space that is available and it is the same with the available and it is the same with the available and it is the same with the validation validation validation the reason behind this is if we go to the reason behind this is if we go to the reason behind this is if we go to our category model you can see that's our category model you can see that's our category model you can see that's the property name and that is exactly the property name and that is exactly the property name and that is exactly what is being displayed what is being displayed what is being displayed so if we want to display something that so if we want to display something that so if we want to display something that is not the same as property name is not the same as property name is not the same as property name we have display name here which is we have display name here which is we have display name here which is inside component model inside component model inside component model and here we can just give whatever name and here we can just give whatever name and here we can just give whatever name we want to display so let's add a space we want to display so let's add a space we want to display so let's add a space there and it will correct that there and it will correct that there and it will correct that automatically automatically automatically let's run this and give that a try let's go to our category let's go to our category let's go to our category create category create category create category and this time you see in errors we have and this time you see in errors we have and this time you see in errors we have a space a space a space labels we have a space and perfect labels we have a space and perfect labels we have a space and perfect looks good looks good looks good now if you go on the official now if you go on the official now if you go on the official documentation there are quite a few data documentation there are quite a few data documentation there are quite a few data annotations that you can use annotations that you can use annotations that you can use we see the required one that we saw we see the required one that we saw we see the required one that we saw we also have a range attribute i won't we also have a range attribute i won't we also have a range attribute i won't go into all of them you can explore them go into all of them you can explore them go into all of them you can explore them when you want you can see the display when you want you can see the display when you want you can see the display attribute that we used now let's just attribute that we used now let's just attribute that we used now let's just try one more which is the range try one more which is the range try one more which is the range attribute attribute attribute that specifies a range for a field so that specifies a range for a field so that specifies a range for a field so let me just close this let me just close this let me just close this and we'll stop the application and we'll stop the application and we'll stop the application inside our display order we will add a inside our display order we will add a inside our display order we will add a range attribute and here we have minimum range attribute and here we have minimum range attribute and here we have minimum and maximum value and maximum value and maximum value so let's say minimum is one maximum is so let's say minimum is one maximum is so let's say minimum is one maximum is hundred hundred hundred so now if the display order is not in so now if the display order is not in so now if the display order is not in the range it will give an error message the range it will give an error message the range it will give an error message but the error messages that we see on but the error messages that we see on but the error messages that we see on the screen with validations are also the screen with validations are also the screen with validations are also customizable customizable customizable so with range if we want some other so with range if we want some other so with range if we want some other error message we have that property error message we have that property error message we have that property right here and we can give a custom right here and we can give a custom right here and we can give a custom error message error message error message we will have our custom error message as we will have our custom error message as we will have our custom error message as display order must be between 1 and 100 display order must be between 1 and 100 display order must be between 1 and 100 only with 2 exclamation only with 2 exclamation only with 2 exclamation let's run our application let's run our application let's run our application and see that in action let's hit create we have our required let's hit create we have our required let's hit create we have our required one let me add something more than 100 one let me add something more than 100 one let me add something more than 100 and you can see it directly displays our and you can see it directly displays our and you can see it directly displays our custom validation custom validation custom validation with that you can see everything is with that you can see everything is with that you can see everything is working as expected and we saw how to working as expected and we saw how to working as expected and we saw how to add custom error messages arrange add custom error messages arrange add custom error messages arrange validation and how to use display name validation and how to use display name validation and how to use display name now inside our create view i will hide now inside our create view i will hide now inside our create view i will hide or comment the validation summary or comment the validation summary or comment the validation summary because we don't want that right now the because we don't want that right now the because we don't want that right now the inline validations are sufficient inline validations are sufficient inline validations are sufficient let me go back and remove the debugging let me go back and remove the debugging let me go back and remove the debugging point everything looks good so far point everything looks good so far point everything looks good so far from the next video we want to work on from the next video we want to work on from the next video we want to work on editing and deleting our category editing and deleting our category editing and deleting our category now that we have the create now that we have the create now that we have the create functionality working as expected let's functionality working as expected let's functionality working as expected let's work on the edit functionality work on the edit functionality work on the edit functionality for edit we will go to category for edit we will go to category for edit we will go to category controller and just like we have the controller and just like we have the controller and just like we have the create get and create post we will copy create get and create post we will copy create get and create post we will copy that and paste it one more time that and paste it one more time that and paste it one more time this time we will call them for edit this time we will call them for edit this time we will call them for edit so let me change the action method names so let me change the action method names so let me change the action method names here one thing that will be different here one thing that will be different here one thing that will be different for edit is when the page is loaded it for edit is when the page is loaded it for edit is when the page is loaded it will display the existing functionality will display the existing functionality will display the existing functionality of the category that was selected of the category that was selected of the category that was selected here we will retrieve an integer which here we will retrieve an integer which here we will retrieve an integer which will be id will be id will be id based on that id we have to retrieve the based on that id we have to retrieve the based on that id we have to retrieve the category details and display them category details and display them category details and display them so we can check here if id is now so we can check here if id is now so we can check here if id is now or if id is equal to zero or if id is equal to zero or if id is equal to zero in those cases we will return back not in those cases we will return back not in those cases we will return back not found because that is an invalid id found because that is an invalid id found because that is an invalid id if that is not the case we will retrieve if that is not the case we will retrieve if that is not the case we will retrieve the category from database so category the category from database so category the category from database so category from db from db from db and we will extract that using our and we will extract that using our and we will extract that using our underscore db dot categories underscore db dot categories underscore db dot categories now this will retrieve complete list of now this will retrieve complete list of now this will retrieve complete list of all the tables all the tables all the tables so on that we have few more ways of so on that we have few more ways of so on that we have few more ways of finding one of the entity finding one of the entity finding one of the entity first is single or default which returns first is single or default which returns first is single or default which returns only one element every time only one element every time only one element every time it will throw an exception if there is it will throw an exception if there is it will throw an exception if there is more than one element more than one element more than one element id is a primary key so there is no id is a primary key so there is no id is a primary key so there is no chance that there will be more than one chance that there will be more than one chance that there will be more than one element element element similarly we have single similarly we have single similarly we have single the difference between single and single the difference between single and single the difference between single and single or default is single will throw an or default is single will throw an or default is single will throw an exception if no elements are found for exception if no elements are found for exception if no elements are found for that id that id that id but single or default will just return but single or default will just return but single or default will just return empty if there are no elements empty if there are no elements empty if there are no elements so default will not throw exception if so default will not throw exception if so default will not throw exception if the element is not found the element is not found the element is not found similar to single or default we also similar to single or default we also similar to single or default we also have first and first or default the have first and first or default the have first and first or default the difference between single or default and difference between single or default and difference between single or default and first or default is that single or first or default is that single or first or default is that single or default will throw an exception if there default will throw an exception if there default will throw an exception if there are more than one elements are more than one elements are more than one elements first or default will not throw an first or default will not throw an first or default will not throw an exception it will return the first exception it will return the first exception it will return the first element of the list element of the list element of the list so if more than one elements are found so if more than one elements are found so if more than one elements are found first or default will return one element first or default will return one element first or default will return one element singular default will throw an exception singular default will throw an exception singular default will throw an exception last but not the least we have one last but not the least we have one last but not the least we have one method which is find method which is find method which is find find basically tries to find that based find basically tries to find that based find basically tries to find that based on the primary key of the table on the primary key of the table on the primary key of the table we know that id is the primary key so we we know that id is the primary key so we we know that id is the primary key so we can use find here and pass the id can use find here and pass the id can use find here and pass the id it will find the category based on that it will find the category based on that it will find the category based on that id and assign that to our variable id and assign that to our variable id and assign that to our variable let me also show you how you can use let me also show you how you can use let me also show you how you can use first or default with find you just had first or default with find you just had first or default with find you just had to pass the id to pass the id to pass the id with first or default you have to pass with first or default you have to pass with first or default you have to pass an expression here where we will have a an expression here where we will have a an expression here where we will have a generic object let's call that u and we generic object let's call that u and we generic object let's call that u and we will say u goes to u dot id should be will say u goes to u dot id should be will say u goes to u dot id should be equal to the id that we have equal to the id that we have equal to the id that we have if that matches in any of the category if that matches in any of the category if that matches in any of the category row retrieve that and give me the first row retrieve that and give me the first row retrieve that and give me the first one out of them let me copy this and one out of them let me copy this and one out of them let me copy this and paste it one more time for single or paste it one more time for single or paste it one more time for single or default the syntax will be same we will default the syntax will be same we will default the syntax will be same we will just use single or default and let me just use single or default and let me just use single or default and let me call this variable call this variable call this variable single single single so these are three ways to retrieve a so these are three ways to retrieve a so these are three ways to retrieve a category from database based on the id category from database based on the id category from database based on the id i will comment two of them out but i i will comment two of them out but i i will comment two of them out but i wanted to show you how that could be wanted to show you how that could be wanted to show you how that could be done using entity framework core done using entity framework core done using entity framework core now once we retrieve the object we will now once we retrieve the object we will now once we retrieve the object we will check here if category from db check here if category from db check here if category from db if that is no that means again we will if that is no that means again we will if that is no that means again we will return not found return not found return not found if we find that category we will return if we find that category we will return if we find that category we will return that category to the view that category to the view that category to the view so next what we will do is we will so next what we will do is we will so next what we will do is we will create this view which will have the create this view which will have the create this view which will have the category loaded and we just need to category loaded and we just need to category loaded and we just need to display that display that display that that view will look exactly same as the that view will look exactly same as the that view will look exactly same as the create view but the only thing different create view but the only thing different create view but the only thing different will be that it will be for edit page will be that it will be for edit page will be that it will be for edit page so we can copy the view that we have for so we can copy the view that we have for so we can copy the view that we have for create inside category folder and paste create inside category folder and paste create inside category folder and paste that one more time i can rename this to that one more time i can rename this to that one more time i can rename this to edit to give us a head start edit to give us a head start edit to give us a head start let's open that edit view let's open that edit view let's open that edit view our model will be the category model but our model will be the category model but our model will be the category model but rather than create category this will be rather than create category this will be rather than create category this will be edit category edit category edit category now when we edit a category we want the now when we edit a category we want the now when we edit a category we want the validations so that will stay the same validations so that will stay the same validations so that will stay the same the button text will change that from the button text will change that from the button text will change that from create to update create to update create to update and it is just submitting back and it is just submitting back and it is just submitting back we do not have which action method it we do not have which action method it we do not have which action method it should submit to if you do not provide should submit to if you do not provide should submit to if you do not provide any name here it will by default submit any name here it will by default submit any name here it will by default submit to the same action that is of the name to the same action that is of the name to the same action that is of the name of the get of the get of the get so since the get is from edit it will so since the get is from edit it will so since the get is from edit it will post that to the same action method post that to the same action method post that to the same action method which is edit which is edit which is edit but if you want to be explicit about the but if you want to be explicit about the but if you want to be explicit about the action you can use that with the tag action you can use that with the tag action you can use that with the tag helper asp action helper asp action helper asp action and you can write edit like that and you can write edit like that and you can write edit like that so if you want you can be explicit but so if you want you can be explicit but so if you want you can be explicit but that is not required that is not required that is not required the back to list will stay the same the back to list will stay the same the back to list will stay the same so with that in place if we want to see so with that in place if we want to see so with that in place if we want to see this in action let's go to the index this in action let's go to the index this in action let's go to the index view of category where we are displaying view of category where we are displaying view of category where we are displaying everything i want to add a link to everything i want to add a link to everything i want to add a link to navigate to the edit action method there navigate to the edit action method there navigate to the edit action method there will be three columns here let me add will be three columns here let me add will be three columns here let me add another tx tag and inside the td we will another tx tag and inside the td we will another tx tag and inside the td we will have one with the links have one with the links have one with the links so inside this td we can add a div with so inside this td we can add a div with so inside this td we can add a div with a class of width 75 and btn group we can a class of width 75 and btn group we can a class of width 75 and btn group we can also give that a role of group also give that a role of group also give that a role of group in there let me add an anchor tag and we in there let me add an anchor tag and we in there let me add an anchor tag and we will use tag helpers inside this anchor will use tag helpers inside this anchor will use tag helpers inside this anchor tag this will be for edit and if we go tag this will be for edit and if we go tag this will be for edit and if we go back and if we open up the bootstrap back and if we open up the bootstrap back and if we open up the bootstrap icon let's try to find an icon for edit icon let's try to find an icon for edit icon let's try to find an icon for edit we have this pencil square let me copy we have this pencil square let me copy we have this pencil square let me copy that and paste that here that and paste that here that and paste that here let's run the application and we will let's run the application and we will let's run the application and we will get back to the index in just a second get back to the index in just a second get back to the index in just a second while the application loads let's get while the application loads let's get while the application loads let's get back here back here back here so this edit should take us to category so this edit should take us to category so this edit should take us to category controller and edit action method controller and edit action method controller and edit action method so if we go back here we want the asb so if we go back here we want the asb so if we go back here we want the asb controller it has to go to the category controller it has to go to the category controller it has to go to the category controller controller controller asp action it should go to the edit asp action it should go to the edit asp action it should go to the edit action action action that is great that is great that is great but if we go take a look at our but if we go take a look at our but if we go take a look at our controller action method it also expects controller action method it also expects controller action method it also expects an id an id an id so we have to pass that id with our link so we have to pass that id with our link so we have to pass that id with our link we can pass custom variables here so we we can pass custom variables here so we we can pass custom variables here so we can say asp route and then what is the can say asp route and then what is the can say asp route and then what is the name of the variable name of the variable name of the variable that is id right here that is id right here that is id right here so we will just say id here this we will so we will just say id here this we will so we will just say id here this we will have to bind with our object so we'll have to bind with our object so we'll have to bind with our object so we'll say at we have obj dot id say at we have obj dot id say at we have obj dot id you can see how dynamic we can get with you can see how dynamic we can get with you can see how dynamic we can get with the razer pages the razer pages the razer pages with that let's go back and refresh go with that let's go back and refresh go with that let's go back and refresh go to category we should see the edit to category we should see the edit to category we should see the edit button yep that is here button yep that is here button yep that is here you can see if you hover on edit you can you can see if you hover on edit you can you can see if you hover on edit you can see the url where the id is changing see the url where the id is changing see the url where the id is changing if you click edit here it will take us if you click edit here it will take us if you click edit here it will take us to edit category and it automatically to edit category and it automatically to edit category and it automatically populates the name and display order populates the name and display order populates the name and display order our back to list is also working as our back to list is also working as our back to list is also working as expected expected expected to make this button look pretty we can to make this button look pretty we can to make this button look pretty we can just add two css classes ptn btn primary just add two css classes ptn btn primary just add two css classes ptn btn primary and some margin and some margin and some margin let's go back and refresh and this looks let's go back and refresh and this looks let's go back and refresh and this looks much better much better much better so our edit get action method is working so our edit get action method is working so our edit get action method is working as expected as expected as expected in the next video let's work on updating in the next video let's work on updating in the next video let's work on updating our category now we are able to load the category now we are able to load the category now we are able to load the category that we want to edit that we want to edit that we want to edit when the user hits the update button it when the user hits the update button it when the user hits the update button it will go to category controller we have will go to category controller we have will go to category controller we have the post action method for edit the post action method for edit the post action method for edit you can have the same validation that we you can have the same validation that we you can have the same validation that we had there but if all the validations are had there but if all the validations are had there but if all the validations are valid we do not want to call the ad we valid we do not want to call the ad we valid we do not want to call the ad we want to call the update method on our want to call the update method on our want to call the update method on our categories db set categories db set categories db set this is a built-in method with ef core this is a built-in method with ef core this is a built-in method with ef core where based on the primary key it will where based on the primary key it will where based on the primary key it will automatically update all of the automatically update all of the automatically update all of the properties properties properties and you do not have to do any manual and you do not have to do any manual and you do not have to do any manual update it will take a look at the obj update it will take a look at the obj update it will take a look at the obj right here right here right here and it will find its primary key and it will find its primary key and it will find its primary key retrieve that from the database it will retrieve that from the database it will retrieve that from the database it will check all the other properties where the check all the other properties where the check all the other properties where the values have changed and it will update values have changed and it will update values have changed and it will update all of those all of those all of those so you can see it is handling all the so you can see it is handling all the so you can see it is handling all the complexity and we just need an update complexity and we just need an update complexity and we just need an update statement to update any of the category statement to update any of the category statement to update any of the category based on the based on the based on the id after that make sure that you are id after that make sure that you are id after that make sure that you are saving the changes and we are saving the changes and we are saving the changes and we are redirecting back to the index action redirecting back to the index action redirecting back to the index action if you examine here you can see all the if you examine here you can see all the if you examine here you can see all the options that are available with our db options that are available with our db options that are available with our db set we have add remove add async at set we have add remove add async at set we have add remove add async at range that will add multiple objects at range that will add multiple objects at range that will add multiple objects at the same time we have update and much the same time we have update and much the same time we have update and much more more more for this time we'll select update and we for this time we'll select update and we for this time we'll select update and we will have to restart the application will have to restart the application will have to restart the application since we made some changes to the since we made some changes to the since we made some changes to the controller controller controller let's go to our category and let's try let's go to our category and let's try let's go to our category and let's try to edit any of the category and great you can see update is working and great you can see update is working and great you can see update is working successfully successfully successfully now the last part that i want you guys now the last part that i want you guys now the last part that i want you guys to implement yourself is to add a button to implement yourself is to add a button to implement yourself is to add a button or a link here to delete any of the or a link here to delete any of the or a link here to delete any of the category once you do that it should take category once you do that it should take category once you do that it should take you to a details page like edit category you to a details page like edit category you to a details page like edit category but this will say delete category and but this will say delete category and but this will say delete category and the fields will be disabled the fields will be disabled the fields will be disabled then there will be a button to delete then there will be a button to delete then there will be a button to delete and when you click that on the post it and when you click that on the post it and when you click that on the post it will delete the category and take you will delete the category and take you will delete the category and take you back to the index page back to the index page back to the index page it is exactly same as what we did with it is exactly same as what we did with it is exactly same as what we did with edit category but rather than update you edit category but rather than update you edit category but rather than update you will have to find what keyword to use to will have to find what keyword to use to will have to find what keyword to use to delete the category delete the category delete the category also i want to show you that inside edit also i want to show you that inside edit also i want to show you that inside edit our validations are working our validations are working our validations are working if you hit update here you can see it if you hit update here you can see it if you hit update here you can see it does not let you update you go back the does not let you update you go back the does not let you update you go back the data stays the same data stays the same data stays the same so all the validations are working as so all the validations are working as so all the validations are working as expected but in the delete category we expected but in the delete category we expected but in the delete category we will not need any validations because will not need any validations because will not need any validations because you have to make sure that the fields you have to make sure that the fields you have to make sure that the fields are disabled are disabled are disabled so good luck with the assignment and so good luck with the assignment and so good luck with the assignment and i'll show you how to do that in the next i'll show you how to do that in the next i'll show you how to do that in the next video video video the last functionality we want to work the last functionality we want to work the last functionality we want to work on is the delete functionality inside on is the delete functionality inside on is the delete functionality inside category category category so we will copy edit as is so we will copy edit as is so we will copy edit as is and we will paste that one more time and we will paste that one more time and we will paste that one more time both get and post both get and post both get and post i will change this to delete i will change this to delete i will change this to delete and we will use the same name right here and we will use the same name right here and we will use the same name right here for the post action method for the post action method for the post action method when we are deleting a category we want when we are deleting a category we want when we are deleting a category we want to retrieve that category and we want to to retrieve that category and we want to to retrieve that category and we want to display that on the view display that on the view display that on the view so this functionality stays the same so this functionality stays the same so this functionality stays the same with the get action method with the get action method with the get action method now with the boost action method you can now with the boost action method you can now with the boost action method you can either push the complete object or you either push the complete object or you either push the complete object or you can just pass the id here so we will can just pass the id here so we will can just pass the id here so we will have integer id and based on that id we have integer id and based on that id we have integer id and based on that id we will first retrieve that category will first retrieve that category will first retrieve that category now i do not need any model state now i do not need any model state now i do not need any model state validations so i will remove them validations so i will remove them validations so i will remove them all i have to do is based on the id i all i have to do is based on the id i all i have to do is based on the id i have to retrieve the category have to retrieve the category have to retrieve the category so i'll say variable obj is equal to so i'll say variable obj is equal to so i'll say variable obj is equal to underscore db dot categories dot find underscore db dot categories dot find underscore db dot categories dot find based on the id we will find that if based on the id we will find that if based on the id we will find that if there is null we will return not found there is null we will return not found there is null we will return not found else on categories we have remove and we else on categories we have remove and we else on categories we have remove and we will remove the object save the changes will remove the object save the changes will remove the object save the changes redirect back to the index page redirect back to the index page redirect back to the index page that looks perfect that looks perfect that looks perfect but we see an error with the name but we see an error with the name but we see an error with the name we cannot have same signature with the we cannot have same signature with the we cannot have same signature with the name and the parameters for two action name and the parameters for two action name and the parameters for two action method method method so for now let me rename this to delete so for now let me rename this to delete so for now let me rename this to delete post post post let's work on adding the delete view it let's work on adding the delete view it let's work on adding the delete view it will be same as edit because we will be will be same as edit because we will be will be same as edit because we will be displaying them so let me copy edit displaying them so let me copy edit displaying them so let me copy edit paste it one more time paste it one more time paste it one more time i will rename this as delete i will rename this as delete i will rename this as delete let me close all the other views so that let me close all the other views so that let me close all the other views so that we don't confuse ourselves this will be we don't confuse ourselves this will be we don't confuse ourselves this will be delete category and the button let me delete category and the button let me delete category and the button let me make it danger since we are deleting make it danger since we are deleting make it danger since we are deleting we do not want any validations and the we do not want any validations and the we do not want any validations and the fields will be disabled fields will be disabled fields will be disabled so let me copy that as well so let me copy that as well so let me copy that as well now the post action name is added but we now the post action name is added but we now the post action name is added but we have renamed the post method to delete have renamed the post method to delete have renamed the post method to delete post so we will copy that post so we will copy that post so we will copy that and paste that right here and paste that right here and paste that right here let's run our application and give this let's run our application and give this let's run our application and give this a try let me go back and add a debugging point let me go back and add a debugging point let me go back and add a debugging point right here right here right here let's go to our category let's go to our category let's go to our category and we forgot to add the delete button and we forgot to add the delete button and we forgot to add the delete button inside the index view inside the index view inside the index view i will copy this and paste it one more i will copy this and paste it one more i will copy this and paste it one more time time time this will be for delete this will be for delete this will be for delete rather than square we will have to look rather than square we will have to look rather than square we will have to look for delete icon for delete icon for delete icon so let me look for a trash can the get action will be delete so we will the get action will be delete so we will the get action will be delete so we will use that use that use that let's go back and refresh let's go back and refresh let's go back and refresh we have edit and delete let me give it a we have edit and delete let me give it a we have edit and delete let me give it a different color different color different color and perfect and perfect and perfect now if you try to hit the delete button now if you try to hit the delete button now if you try to hit the delete button it will take you to the delete category it will take you to the delete category it will take you to the delete category let's see what happens when we hit let's see what happens when we hit let's see what happens when we hit delete button delete button delete button it will hit our breakpoint and you it will hit our breakpoint and you it will hit our breakpoint and you examine the id is null examine the id is null examine the id is null now why is this id null now why is this id null now why is this id null it was not null when we were editing but it was not null when we were editing but it was not null when we were editing but in delete this is null in delete this is null in delete this is null the reason behind that is inside delete the reason behind that is inside delete the reason behind that is inside delete let me hit continue here let me hit continue here let me hit continue here and it will take us to not found page and it will take us to not found page and it will take us to not found page that's perfect but the reason behind that's perfect but the reason behind that's perfect but the reason behind that is inside delete all of the fields that is inside delete all of the fields that is inside delete all of the fields for our model is disabled for our model is disabled for our model is disabled if one of them was enabled id is primary if one of them was enabled id is primary if one of them was enabled id is primary key that's why it was automatically key that's why it was automatically key that's why it was automatically being set on the forum being set on the forum being set on the forum so in this case what we will do is we so in this case what we will do is we so in this case what we will do is we will have an input field with the tag will have an input field with the tag will have an input field with the tag helper asp4 id that's the only field we helper asp4 id that's the only field we helper asp4 id that's the only field we care about and we will keep it hidden care about and we will keep it hidden care about and we will keep it hidden since it is inside the form when the since it is inside the form when the since it is inside the form when the form is posted we will retrieve that id form is posted we will retrieve that id form is posted we will retrieve that id right here right here right here let's go back let's go back let's go back and let me refresh let's hit the delete and let me refresh let's hit the delete and let me refresh let's hit the delete button button button this time the id is populated this time the id is populated this time the id is populated so now if you hit continue now if you so now if you hit continue now if you so now if you hit continue now if you are editing you make some change you get are editing you make some change you get are editing you make some change you get this error message but i believe with this error message but i believe with this error message but i believe with visual studio 2022 they are just giving visual studio 2022 they are just giving visual studio 2022 they are just giving that right now and it will be fixed that right now and it will be fixed that right now and it will be fixed later on later on later on in that case just rerun the application in that case just rerun the application in that case just rerun the application so let's go to category here so let's go to category here so let's go to category here and try delete one more time and try delete one more time and try delete one more time perfect that category was deleted perfect that category was deleted perfect that category was deleted but that delete is working as expected but that delete is working as expected but that delete is working as expected but i want to show you one last thing but i want to show you one last thing but i want to show you one last thing right now inside delete we have the right now inside delete we have the right now inside delete we have the action as delete post action as delete post action as delete post what if we want it to be delete what if we want it to be delete what if we want it to be delete in this case it won't work because the in this case it won't work because the in this case it won't work because the controller will know that the action controller will know that the action controller will know that the action method name here is delete post for post method name here is delete post for post method name here is delete post for post so if you want to explicitly give that a so if you want to explicitly give that a so if you want to explicitly give that a different name different name different name we have action name attribute right here we have action name attribute right here we have action name attribute right here and we can give it and we can give it and we can give it delete delete delete that way the controller will know that that way the controller will know that that way the controller will know that if a request comes in for delete action if a request comes in for delete action if a request comes in for delete action method http post inside the category method http post inside the category method http post inside the category controller that is this particular controller that is this particular controller that is this particular action method action method action method so let me run that and show you that so let me run that and show you that so let me run that and show you that this also works this also works this also works so let's go to category and delete one more category perfect and delete one more category perfect and delete one more category perfect so with that all the functionality are so with that all the functionality are so with that all the functionality are working as expected i want to display some alerts when i want to display some alerts when i want to display some alerts when someone deletes edits or create a someone deletes edits or create a someone deletes edits or create a category on the category index view category on the category index view category on the category index view how will we do that how will we do that how will we do that for that we have something called a for that we have something called a for that we have something called a stamp data in dotnet core stamp data in dotnet core stamp data in dotnet core temp data has been provided with one temp data has been provided with one temp data has been provided with one single purpose single purpose single purpose whatever we want to store in temp data whatever we want to store in temp data whatever we want to store in temp data stays there for only one request stays there for only one request stays there for only one request after that if you refresh the same page after that if you refresh the same page after that if you refresh the same page that will be gone that will be gone that will be gone so that is perfect for displaying alerts so that is perfect for displaying alerts so that is perfect for displaying alerts of successful or failure notification of successful or failure notification of successful or failure notification let's take a look at how will we do that let's take a look at how will we do that let's take a look at how will we do that let's say right now that when we create let's say right now that when we create let's say right now that when we create or edit or delete anything we will add or edit or delete anything we will add or edit or delete anything we will add something to attempt data of success something to attempt data of success something to attempt data of success so once the create is successful here so once the create is successful here so once the create is successful here before we redirect we want to use temp before we redirect we want to use temp before we redirect we want to use temp data it is directly available as you can data it is directly available as you can data it is directly available as you can see see see so temp data and then you have to give so temp data and then you have to give so temp data and then you have to give any key inside there any key inside there any key inside there so let me call this temp data of success so let me call this temp data of success so let me call this temp data of success and we will store a message there that and we will store a message there that and we will store a message there that category created successfully category created successfully category created successfully on create post on create post on create post if they are editing if they are editing if they are editing let me store category updated let me store category updated let me store category updated successfully in delete i will say successfully in delete i will say successfully in delete i will say category deleted successfully category deleted successfully category deleted successfully so we are storing some string inside so we are storing some string inside so we are storing some string inside temp data with the key of success temp data with the key of success temp data with the key of success now where do we want to extract this now where do we want to extract this now where do we want to extract this we want to extract that inside the index we want to extract that inside the index we want to extract that inside the index view view view so at the top here so at the top here so at the top here we can check if temp data of success is we can check if temp data of success is we can check if temp data of success is not null not null not null the main important thing is the key name the main important thing is the key name the main important thing is the key name must exact match if you use a different must exact match if you use a different must exact match if you use a different key name this will not work key name this will not work key name this will not work so if this does match inside an h2 tag so if this does match inside an h2 tag so if this does match inside an h2 tag let me display temp data and the value inside that and the value inside that and the value inside that let's save this and run our application let's save this and run our application let's save this and run our application to see what happens to see what happens to see what happens with that change let me try to create a with that change let me try to create a with that change let me try to create a new category great you can see we have category great you can see we have category great you can see we have category created successfully created successfully created successfully now since this is in temp data if you now since this is in temp data if you now since this is in temp data if you refresh this will go away refresh this will go away refresh this will go away so it only stays in memory for just one so it only stays in memory for just one so it only stays in memory for just one redirect redirect redirect and after that it goes away if we try to and after that it goes away if we try to and after that it goes away if we try to edit any of the category edit any of the category edit any of the category we get the error of course we get the error of course we get the error of course we see category updated successfully we see category updated successfully we see category updated successfully when we delete we get the deleted when we delete we get the deleted when we delete we get the deleted successfully successfully successfully if you refresh that goes away if you refresh that goes away if you refresh that goes away so this is great when you have to so this is great when you have to so this is great when you have to display notifications on some of the display notifications on some of the display notifications on some of the actions that are performed actions that are performed actions that are performed now this time data can be used now this time data can be used now this time data can be used throughout the application and not just throughout the application and not just throughout the application and not just one page one page one page so why not when we are checking this so why not when we are checking this so why not when we are checking this temp data success and displaying that do temp data success and displaying that do temp data success and displaying that do that at a global level so we do not have that at a global level so we do not have that at a global level so we do not have to add this in all the pages to add this in all the pages to add this in all the pages for that partial views will be a perfect for that partial views will be a perfect for that partial views will be a perfect candidate we can have some code inside candidate we can have some code inside candidate we can have some code inside the partial view and we can call that the partial view and we can call that the partial view and we can call that partial view everywhere we want partial view everywhere we want partial view everywhere we want because right now it is four lines of because right now it is four lines of because right now it is four lines of code but it is possible that this code code but it is possible that this code code but it is possible that this code will increase drastically when you do will increase drastically when you do will increase drastically when you do something fancy for notification something fancy for notification something fancy for notification so let's move this code inside a partial so let's move this code inside a partial so let's move this code inside a partial view and see how we can call that now that we have added a code to display now that we have added a code to display now that we have added a code to display some of the alerts and notification we some of the alerts and notification we some of the alerts and notification we want to make sure that this code is want to make sure that this code is want to make sure that this code is applicable on almost all the pages applicable on almost all the pages applicable on almost all the pages because if in future we add more pages because if in future we add more pages because if in future we add more pages we don't want to copy and paste the same we don't want to copy and paste the same we don't want to copy and paste the same code in all the places code in all the places code in all the places so the best thing is inside the shared so the best thing is inside the shared so the best thing is inside the shared folder we will create the partial views folder we will create the partial views folder we will create the partial views that is the folder that i like to place that is the folder that i like to place that is the folder that i like to place all of my partial views all of my partial views all of my partial views we will stop the application we will stop the application we will stop the application right click add right click add right click add view view view we will go with the razer view not the we will go with the razer view not the we will go with the razer view not the mt1 and here we will select create as a mt1 and here we will select create as a mt1 and here we will select create as a partial view partial view partial view we did not do that earlier but now we we did not do that earlier but now we we did not do that earlier but now we will do that will do that will do that that will create an empty partial view that will create an empty partial view that will create an empty partial view i forgot to give that a name so i'll i forgot to give that a name so i'll i forgot to give that a name so i'll have to rename this once it is created have to rename this once it is created have to rename this once it is created it's just view we will change that to it's just view we will change that to it's just view we will change that to underscore underscore underscore notification notification notification what we want to do is the temp data chat what we want to do is the temp data chat what we want to do is the temp data chat that we have here let me copy and paste that we have here let me copy and paste that we have here let me copy and paste that here that here that here and it will do its check and it will do its check and it will do its check since we have attempt data for success since we have attempt data for success since we have attempt data for success we can also implement attempt data for we can also implement attempt data for we can also implement attempt data for error so we can display both success and error so we can display both success and error so we can display both success and error notifications error notifications error notifications so great now inside index we can just so great now inside index we can just so great now inside index we can just say partial here say partial here say partial here and we can say name is equal to and we can say name is equal to and we can say name is equal to underscore underscore underscore notification notification notification pretty clean right pretty clean right pretty clean right let's say in future you want to add this let's say in future you want to add this let's say in future you want to add this to multiple pages you just have to add to multiple pages you just have to add to multiple pages you just have to add this partial tag and that will be done this partial tag and that will be done this partial tag and that will be done let's run our application and see if our let's run our application and see if our let's run our application and see if our partial view is working as expected let's try to create a new category and grid that is working if we refresh and grid that is working if we refresh and grid that is working if we refresh that goes away that goes away that goes away so with that our partial views are so with that our partial views are so with that our partial views are working as expected than displaying a text as an alert why than displaying a text as an alert why than displaying a text as an alert why don't we use something fancy like don't we use something fancy like don't we use something fancy like toaster toaster toaster so we have toaster.js so we have toaster.js so we have toaster.js so with toaster if we go to the github so with toaster if we go to the github so with toaster if we go to the github page we have a javascript notification page we have a javascript notification page we have a javascript notification that we can use that we can use that we can use if you go to demo here and hit show if you go to demo here and hit show if you go to demo here and hit show toast this notifications are much toast this notifications are much toast this notifications are much cleaner and easier to read cleaner and easier to read cleaner and easier to read in order to use that we will copy the in order to use that we will copy the in order to use that we will copy the minified js and css files minified js and css files minified js and css files let's add that to our project in the let's add that to our project in the let's add that to our project in the underscore layout underscore layout underscore layout now the css file we will be adding right now the css file we will be adding right now the css file we will be adding right here here here so we'll say link rel is equal to so we'll say link rel is equal to so we'll say link rel is equal to stylesheet and the href let's go back and copy just and the href let's go back and copy just and the href let's go back and copy just the css the css the css so we will copy this so we will copy this so we will copy this and paste it right here and paste it right here and paste it right here now the gs file will be required at the now the gs file will be required at the now the gs file will be required at the underscore notification level underscore notification level underscore notification level so we will have to go back so we will have to go back so we will have to go back copy the gs file copy the gs file copy the gs file and we need to include that right here and we need to include that right here and we need to include that right here so we will have to use a script here so we will have to use a script here so we will have to use a script here src src src let's paste that let's paste that let's paste that also when we are using toaster we will also when we are using toaster we will also when we are using toaster we will need the jquery reference that is inside need the jquery reference that is inside need the jquery reference that is inside lib we have the jquery dist lib we have the jquery dist lib we have the jquery dist jquery.min.js jquery.min.js jquery.min.js so we will have to add both of them in so we will have to add both of them in so we will have to add both of them in both the places both the places both the places next we need the toaster alert so if we next we need the toaster alert so if we next we need the toaster alert so if we go back we should have a usage right go back we should have a usage right go back we should have a usage right here here here we have toaster.warning we have toaster.warning we have toaster.warning toaster.success we will use it exactly toaster.success we will use it exactly toaster.success we will use it exactly like this like this like this so if we go back here if we have success so if we go back here if we have success so if we go back here if we have success that is populated we need a javascript that is populated we need a javascript that is populated we need a javascript code so we'll add a script tag code so we'll add a script tag code so we'll add a script tag we will say type is equal to text we will say type is equal to text we will say type is equal to text forward slash javascript forward slash javascript forward slash javascript and i will use toaster.success and i will use toaster.success and i will use toaster.success and display everything inside temp data and display everything inside temp data and display everything inside temp data of success of success of success make sure here you are using the single make sure here you are using the single make sure here you are using the single quotes and then you need the accurate quotes and then you need the accurate quotes and then you need the accurate sign for accessing the c sharp variable sign for accessing the c sharp variable sign for accessing the c sharp variable let's copy the script tag and paste that let's copy the script tag and paste that let's copy the script tag and paste that for error for error for error and this looks great and this looks great and this looks great so with that we have added toaster.js in so with that we have added toaster.js in so with that we have added toaster.js in our website our website our website if we go back even while the application if we go back even while the application if we go back even while the application is running is running is running these are just the javascript changes so these are just the javascript changes so these are just the javascript changes so you can refresh the page here you can refresh the page here you can refresh the page here and let's try to edit something in the and let's try to edit something in the and let's try to edit something in the category category category and great we see our toaster alerts here and great we see our toaster alerts here and great we see our toaster alerts here and everything is working as expected and everything is working as expected and everything is working as expected now let's say this notification is now let's say this notification is now let's say this notification is something you will have across all the something you will have across all the something you will have across all the pages pages pages in that case it does not make sense to in that case it does not make sense to in that case it does not make sense to add this one line in all the pages add this one line in all the pages add this one line in all the pages even though it's just one line it just even though it's just one line it just even though it's just one line it just doesn't make sense doesn't make sense doesn't make sense so rather than adding this in all the so rather than adding this in all the so rather than adding this in all the pages you can add that in underscored pages you can add that in underscored pages you can add that in underscored layout and that will be included in all layout and that will be included in all layout and that will be included in all the pages the pages the pages so just before render body where we have so just before render body where we have so just before render body where we have all the body that we render for the page all the body that we render for the page all the body that we render for the page we will paste our partial view and that we will paste our partial view and that we will paste our partial view and that will make sure that it is included in will make sure that it is included in will make sure that it is included in all the pages of your application all the pages of your application all the pages of your application so make sure that you include only so make sure that you include only so make sure that you include only things that are needed across all the things that are needed across all the things that are needed across all the pages because this will be loaded every pages because this will be loaded every pages because this will be loaded every time your page loads time your page loads time your page loads so with that if we go back and refresh so with that if we go back and refresh so with that if we go back and refresh and try to delete a category and try to delete a category and try to delete a category our toaster alerts are working as our toaster alerts are working as our toaster alerts are working as expected now that our application is up and now that our application is up and now that our application is up and running and everything looks good running and everything looks good running and everything looks good i want to show you one thing with the i want to show you one thing with the i want to show you one thing with the controller controller controller we added the controller ourselves and we we added the controller ourselves and we we added the controller ourselves and we also created all the views also created all the views also created all the views but with dotnet core we have some help but with dotnet core we have some help but with dotnet core we have some help if you want if you want if you want so if we try to add a controller this so if we try to add a controller this so if we try to add a controller this time we will implement the same logic time we will implement the same logic time we will implement the same logic but with mvc controller with views using but with mvc controller with views using but with mvc controller with views using entity framework entity framework entity framework we will hit add here we will hit add here we will hit add here and this will create an mvc controller and this will create an mvc controller and this will create an mvc controller with views using entity framework on a with views using entity framework on a with views using entity framework on a model model model so we will select our model category on so we will select our model category on so we will select our model category on that we want the crud operations that we want the crud operations that we want the crud operations let's select a data context that will be let's select a data context that will be let's select a data context that will be used to access the database used to access the database used to access the database and we will give our controller a name and we will give our controller a name and we will give our controller a name i will leave the default name but rather i will leave the default name but rather i will leave the default name but rather than categories i will say categories than categories i will say categories than categories i will say categories temp controller since i want to delete temp controller since i want to delete temp controller since i want to delete that later on that later on that later on let's add this and see what happens let's add this and see what happens let's add this and see what happens this will scaffold everything for us it this will scaffold everything for us it this will scaffold everything for us it will create a new category stamp will create a new category stamp will create a new category stamp controller and it will create the views controller and it will create the views controller and it will create the views for create edit delete details and index for create edit delete details and index for create edit delete details and index you can see the new controller it has you can see the new controller it has you can see the new controller it has all the action methods as well as the all the action methods as well as the all the action methods as well as the post action methods post action methods post action methods and inside the category stamp it has and inside the category stamp it has and inside the category stamp it has added five views added five views added five views let's run the application and see the let's run the application and see the let's run the application and see the change change change in order to navigate that we will have in order to navigate that we will have in order to navigate that we will have to manually type category stem it takes us to the view here where we it takes us to the view here where we it takes us to the view here where we have the index view it displays our have the index view it displays our have the index view it displays our category category category we can create a new category here with this it also asks us to input the with this it also asks us to input the with this it also asks us to input the created time let's do that created time let's do that created time let's do that you can see it is not as efficient you can see it is not as efficient you can see it is not as efficient because it does not know that because it does not know that because it does not know that createddatetime will be the default one createddatetime will be the default one createddatetime will be the default one so it asks the user to input that but so it asks the user to input that but so it asks the user to input that but you can create that edit that go back you can create that edit that go back you can create that edit that go back view the details and you can also delete view the details and you can also delete view the details and you can also delete any of the requests any of the requests any of the requests so all the crud functionalities with the so all the crud functionalities with the so all the crud functionalities with the views are ready for you and generated in views are ready for you and generated in views are ready for you and generated in just a minute just a minute just a minute but you'll have to spend time on but you'll have to spend time on but you'll have to spend time on customizing this based on your customizing this based on your customizing this based on your requirement requirement requirement the reason i did not want to go into the reason i did not want to go into the reason i did not want to go into this directly is i wanted you to spend this directly is i wanted you to spend this directly is i wanted you to spend some time and learn how to do everything some time and learn how to do everything some time and learn how to do everything from scratch from scratch from scratch but once you know this you can take a but once you know this you can take a but once you know this you can take a look at the controller action method look at the controller action method look at the controller action method most of the code will be the same most of the code will be the same most of the code will be the same but that is also an option that is but that is also an option that is but that is also an option that is available available available with that with that with that let me remove the temp controller that let me remove the temp controller that let me remove the temp controller that we added as well as the views we added as well as the views we added as well as the views with that our application is complete with that our application is complete with that our application is complete let's see how we can deploy this to let's see how we can deploy this to let's see how we can deploy this to azure and see everything live on the azure and see everything live on the azure and see everything live on the internet internet internet now the final task is to deploy our now the final task is to deploy our now the final task is to deploy our application to azure application to azure application to azure so for that you will have to create an so for that you will have to create an so for that you will have to create an account on portal.azure.com account on portal.azure.com account on portal.azure.com i already have an account i already have an account i already have an account if you are signing up for the first time if you are signing up for the first time if you are signing up for the first time you will get 200 dollars of free credit you will get 200 dollars of free credit you will get 200 dollars of free credit that you can use that you can use that you can use the first thing that we have to do in the first thing that we have to do in the first thing that we have to do in here is we need to create a sql server here is we need to create a sql server here is we need to create a sql server and a database inside that and a database inside that and a database inside that so we can create or search for sql so we can create or search for sql so we can create or search for sql databases databases databases and let's hit the add button and let's hit the add button and let's hit the add button usually i like creating everything from usually i like creating everything from usually i like creating everything from visual studio but sql server i like to visual studio but sql server i like to visual studio but sql server i like to create here that way i can easily see create here that way i can easily see create here that way i can easily see all the configuration all the configuration all the configuration you will select the subscription that you will select the subscription that you will select the subscription that you have and in there we can create a you have and in there we can create a you have and in there we can create a resource group resource group resource group i will call this resource group as i will call this resource group as i will call this resource group as dotnet mastery underscore course dotnet mastery underscore course dotnet mastery underscore course and then let's enter a database name we and then let's enter a database name we and then let's enter a database name we will call that dotnet mastery underscore will call that dotnet mastery underscore will call that dotnet mastery underscore db db db we do not have a server so let's create we do not have a server so let's create we do not have a server so let's create a server a server a server the server name will be unique so i will the server name will be unique so i will the server name will be unique so i will use dotnet mastery server use dotnet mastery server use dotnet mastery server and then we need an admin login and then we need an admin login and then we need an admin login we cannot use admin here that won't work we cannot use admin here that won't work we cannot use admin here that won't work so i will just use admin sql so i will just use admin sql so i will just use admin sql for password you can use something for password you can use something for password you can use something secure select your location secure select your location secure select your location and hit ok and hit ok and hit ok now next option is to we want to use now next option is to we want to use now next option is to we want to use elastic pool elastic pool elastic pool we will say no there and in the server we will say no there and in the server we will say no there and in the server location that's not available location that's not available location that's not available so let me select some other location so let me select some other location so let me select some other location each os 2 each os 2 each os 2 and let's hit ok and let's hit ok and let's hit ok then you need to select the compute plus then you need to select the compute plus then you need to select the compute plus storage we will select configure storage we will select configure storage we will select configure database there and i will use the lowest database there and i will use the lowest database there and i will use the lowest option which is basic here and that is 5 option which is basic here and that is 5 option which is basic here and that is 5 usd per month let's apply usd per month let's apply usd per month let's apply i do not want to pay more for the i do not want to pay more for the i do not want to pay more for the subscription so i'm going with the subscription so i'm going with the subscription so i'm going with the lowest option the redundancy backup that lowest option the redundancy backup that lowest option the redundancy backup that is perfectly fine with me let me hit is perfectly fine with me let me hit is perfectly fine with me let me hit review plus create review plus create review plus create we will hit create here and it will take we will hit create here and it will take we will hit create here and it will take a while to configure our database and a while to configure our database and a while to configure our database and set everything up and perfect our database has been and perfect our database has been and perfect our database has been created if we click go to resource it created if we click go to resource it created if we click go to resource it will take us to sql database will take us to sql database will take us to sql database now one thing that you will have to do now one thing that you will have to do now one thing that you will have to do is if you want to access this database is if you want to access this database is if you want to access this database from your local sql server you will have from your local sql server you will have from your local sql server you will have to select the set firewall settings to select the set firewall settings to select the set firewall settings and add your client ip and add your client ip and add your client ip that will enable your client ip and you that will enable your client ip and you that will enable your client ip and you can access the database from sql server can access the database from sql server can access the database from sql server let's hit the save button to add your let's hit the save button to add your let's hit the save button to add your client ip there client ip there client ip there once that is done let's go back to sql once that is done let's go back to sql once that is done let's go back to sql server and we need to connect to that server and we need to connect to that server and we need to connect to that server so we will hit ok here go back to server so we will hit ok here go back to server so we will hit ok here go back to the resource and we have connection the resource and we have connection the resource and we have connection string string string let me copy the server name here let me copy the server name here let me copy the server name here go back and paste it and we will use sql go back and paste it and we will use sql go back and paste it and we will use sql server authentication server authentication server authentication we have admin sql we have admin sql we have admin sql and the password and the password and the password let's press connect let's press connect let's press connect great we are able to connect to our sql great we are able to connect to our sql great we are able to connect to our sql server server server so with that in place let's continue so with that in place let's continue so with that in place let's continue from the next video let me close the from the next video let me close the from the next video let me close the other tabs here other tabs here other tabs here now we are able to connect to our now we are able to connect to our now we are able to connect to our database from sql server database from sql server database from sql server let's go back to our project and we want let's go back to our project and we want let's go back to our project and we want to deploy our website to azure to deploy our website to azure to deploy our website to azure for that we will right click on the for that we will right click on the for that we will right click on the project and hit publish project and hit publish project and hit publish we will do all the setup directly from we will do all the setup directly from we will do all the setup directly from visual studio to create an app service visual studio to create an app service visual studio to create an app service and we will use the database that we and we will use the database that we and we will use the database that we created here we will select azure hit created here we will select azure hit created here we will select azure hit the next button we will be using azure the next button we will be using azure the next button we will be using azure app service for windows app service for windows app service for windows if you are not signed in make sure to if you are not signed in make sure to if you are not signed in make sure to sign in with the same account that you sign in with the same account that you sign in with the same account that you have used to create the database on have used to create the database on have used to create the database on azure portal azure portal azure portal you will select the subscription name you will select the subscription name you will select the subscription name here and we don't have any app servers here and we don't have any app servers here and we don't have any app servers that are running that are running that are running so we will create a new app service here so we will create a new app service here so we will create a new app service here and we need to give a meaningful name i will call this bulkybookweb and i will call this bulkybookweb and i will call this bulkybookweb and because of that the final site name will because of that the final site name will because of that the final site name will be bulkybookweb.azurewebsites.net we will have our subscription resource we will have our subscription resource we will have our subscription resource group if you do not have one you can group if you do not have one you can group if you do not have one you can just create one it is just any name that just create one it is just any name that just create one it is just any name that you want that is more like a folder you want that is more like a folder you want that is more like a folder structure in which you can organize structure in which you can organize structure in which you can organize everything together everything together everything together next is the hosting plan next is the hosting plan next is the hosting plan by default there is s1 hosting plan by default there is s1 hosting plan by default there is s1 hosting plan i want to use the free hosting plan so i want to use the free hosting plan so i want to use the free hosting plan so we will select new here and we will we will select new here and we will we will select new here and we will select the free plan that is available select the free plan that is available select the free plan that is available with azure with azure with azure let me hit ok here and hit the create let me hit ok here and hit the create let me hit ok here and hit the create button button button this will take a few minutes but it will this will take a few minutes but it will this will take a few minutes but it will create and configure your app service create and configure your app service create and configure your app service once the app service is created we will once the app service is created we will once the app service is created we will have to configure the connection string have to configure the connection string have to configure the connection string and then in the new database that is and then in the new database that is and then in the new database that is created we need to make sure that created we need to make sure that created we need to make sure that migrations are executed migrations are executed migrations are executed perfect this is done let's hit finish perfect this is done let's hit finish perfect this is done let's hit finish here here here then inside dependencies you see we have then inside dependencies you see we have then inside dependencies you see we have sql server database sql server database sql server database you can either configure this here or if you can either configure this here or if you can either configure this here or if you just click the edit button here it you just click the edit button here it you just click the edit button here it will display the database which has a will display the database which has a will display the database which has a connection string connection string connection string if you go back to your portal if you go back to your portal if you go back to your portal and we will have to go to our sql and we will have to go to our sql and we will have to go to our sql database we have the connection string database we have the connection string database we have the connection string right here right here right here we will copy this and we will paste that we will copy this and we will paste that we will copy this and we will paste that here here here we just need to make sure a few things we just need to make sure a few things we just need to make sure a few things we just need to make sure that password we just need to make sure that password we just need to make sure that password is populated is populated is populated let me do that here user id looks good we will say that we user id looks good we will say that we user id looks good we will say that we want to use this connection string at want to use this connection string at want to use this connection string at runtime runtime runtime let me copy this and inside the entity let me copy this and inside the entity let me copy this and inside the entity framework migrations framework migrations framework migrations we want to apply migrations on publish we want to apply migrations on publish we want to apply migrations on publish we will paste the connection string here we will paste the connection string here we will paste the connection string here as well as well as well let me go here to make sure password and let me go here to make sure password and let me go here to make sure password and user id looks good user id looks good user id looks good and the last option is since we are and the last option is since we are and the last option is since we are using dot net 6 it is not available using dot net 6 it is not available using dot net 6 it is not available inside the api service inside the api service inside the api service so for that we will have to change the so for that we will have to change the so for that we will have to change the mode to self-contained mode to self-contained mode to self-contained that will have a self-contained that will have a self-contained that will have a self-contained environment with netsex environment with netsex environment with netsex with that let me save this and let's with that let me save this and let's with that let me save this and let's publish publish publish when it will try to run the migration in when it will try to run the migration in when it will try to run the migration in the logs we will see one error with the the logs we will see one error with the the logs we will see one error with the ip address ip address ip address let's wait for that let's wait for that let's wait for that and you can see it is failing here so it and you can see it is failing here so it and you can see it is failing here so it should give us the error message pretty should give us the error message pretty should give us the error message pretty soon soon soon and perfect we see that here it should and perfect we see that here it should and perfect we see that here it should be with the ip address be with the ip address be with the ip address and there you go you can see it cannot and there you go you can see it cannot and there you go you can see it cannot access this ip address that is the access this ip address that is the access this ip address that is the server ip so let me copy that server ip so let me copy that server ip so let me copy that and i will paste that in a notepad let and i will paste that in a notepad let and i will paste that in a notepad let me copy this ip address me copy this ip address me copy this ip address we will go back we will go back we will go back and inside our database we will set the server firewall we will set the server firewall we will set the server firewall add that ip address and we will save that and we will save that and we will save that perfect now that should not be an issue perfect now that should not be an issue perfect now that should not be an issue let's hit publish one more time let's hit publish one more time let's hit publish one more time this time it should be able to push all this time it should be able to push all this time it should be able to push all the migrations and deploy our code to the migrations and deploy our code to the migrations and deploy our code to azure azure azure once everything is done it will load the once everything is done it will load the once everything is done it will load the website which is website which is website which is bulkybook.azurewebsites.com great it automatically opened up and great it automatically opened up and great it automatically opened up and perfect this looks great perfect this looks great perfect this looks great if we go to category there won't be any if we go to category there won't be any if we go to category there won't be any category but we can create a new category but we can create a new category but we can create a new category here and our alerts are also working and our alerts are also working and our alerts are also working so perfect with this we have seen how we so perfect with this we have seen how we so perfect with this we have seen how we can deploy our website to azure can deploy our website to azure can deploy our website to azure that being said this is only for testing that being said this is only for testing that being said this is only for testing but the sql database that we have we are but the sql database that we have we are but the sql database that we have we are getting charged for that getting charged for that getting charged for that so let me remove all the resources and so let me remove all the resources and so let me remove all the resources and we will also delete this profile we will also delete this profile we will also delete this profile the reason i want to delete is i only the reason i want to delete is i only the reason i want to delete is i only wanted to show you how easy it is to wanted to show you how easy it is to wanted to show you how easy it is to deploy your code to azure deploy your code to azure deploy your code to azure so with that let's go to all resources so with that let's go to all resources so with that let's go to all resources select all of them and let's delete them so with that we have seen the cred so with that we have seen the cred so with that we have seen the cred operations that we can do with category operations that we can do with category operations that we can do with category using mvc in dot net six so first of all congratulations on so first of all congratulations on so first of all congratulations on completing the grunt operations using completing the grunt operations using completing the grunt operations using darknet 6 mvc darknet 6 mvc darknet 6 mvc we have seen quite a few things in this we have seen quite a few things in this we have seen quite a few things in this small course small course small course but right now we are just getting but right now we are just getting but right now we are just getting started with dotnet core and there is a started with dotnet core and there is a started with dotnet core and there is a lot more to explore and learn when it lot more to explore and learn when it lot more to explore and learn when it comes to dotnet core comes to dotnet core comes to dotnet core even though this course has come to an even though this course has come to an even though this course has come to an end i have advanced courses that will end i have advanced courses that will end i have advanced courses that will take you from the basics that you have take you from the basics that you have take you from the basics that you have learned here all the way to exploring learned here all the way to exploring learned here all the way to exploring new concept new concept new concept let me walk you through some of those let me walk you through some of those let me walk you through some of those concepts concepts concepts in the full courseof.net core mvc we in the full courseof.net core mvc we in the full courseof.net core mvc we will take what we have built so far and will take what we have built so far and will take what we have built so far and convert that to an anterior architecture convert that to an anterior architecture convert that to an anterior architecture because that is a real world scenario because that is a real world scenario because that is a real world scenario because that is a scenario that is because that is a scenario that is because that is a scenario that is adopted with most complex project adopted with most complex project adopted with most complex project then we do not interact directly with then we do not interact directly with then we do not interact directly with the data context in our main project we the data context in our main project we the data context in our main project we will be using a repository pattern and will be using a repository pattern and will be using a repository pattern and unit of work to interact with our unit of work to interact with our unit of work to interact with our database database database so we will see dependency injection and so we will see dependency injection and so we will see dependency injection and how to inject that using a repository how to inject that using a repository how to inject that using a repository pattern pattern pattern then we will further split our project then we will further split our project then we will further split our project inside areas in.net core which is a inside areas in.net core which is a inside areas in.net core which is a folder like structure but everything folder like structure but everything folder like structure but everything gets much more organized gets much more organized gets much more organized we have seen temp data but we will see we have seen temp data but we will see we have seen temp data but we will see view back and view data with dotnet core view back and view data with dotnet core view back and view data with dotnet core and see how all of them are different and see how all of them are different and see how all of them are different next we will use suite alerts which text next we will use suite alerts which text next we will use suite alerts which text editor data tables with dot net core and editor data tables with dot net core and editor data tables with dot net core and api calls api calls api calls with any application authentication and with any application authentication and with any application authentication and authorization plays very important role authorization plays very important role authorization plays very important role and dotnet team has given us the razer and dotnet team has given us the razer and dotnet team has given us the razer class library which is identity in the class library which is identity in the class library which is identity in the dotnet world dotnet world dotnet world that makes all of the authentication that makes all of the authentication that makes all of the authentication super simple because the basic super simple because the basic super simple because the basic functionality and table structure is functionality and table structure is functionality and table structure is already implemented for us already implemented for us already implemented for us so we will see how to scaffold that so we will see how to scaffold that so we will see how to scaffold that identity in mvc application identity in mvc application identity in mvc application next with authorization we will see how next with authorization we will see how next with authorization we will see how roles play an important role and how can roles play an important role and how can roles play an important role and how can we modify our application based on the we modify our application based on the we modify our application based on the role of the user that is logged in role of the user that is logged in role of the user that is logged in in a real-world scenario we also accept in a real-world scenario we also accept in a real-world scenario we also accept payments payments payments so i will show you how to accept so i will show you how to accept so i will show you how to accept payments using stripe and also give payments using stripe and also give payments using stripe and also give refunds when the order is cancelled refunds when the order is cancelled refunds when the order is cancelled session is one of the key feature that session is one of the key feature that session is one of the key feature that was very helpful with traditional mvc was very helpful with traditional mvc was very helpful with traditional mvc application application application with net core also session is not gone with net core also session is not gone with net core also session is not gone we just need to do a little we just need to do a little we just need to do a little configuration and add session to our configuration and add session to our configuration and add session to our project and we will see that in action project and we will see that in action project and we will see that in action most of the applications will send most of the applications will send most of the applications will send emails in some way emails in some way emails in some way i will show you two approaches one using i will show you two approaches one using i will show you two approaches one using the smtp server and second using the smtp server and second using the smtp server and second using applications and grid applications and grid applications and grid then with the modern applications we then with the modern applications we then with the modern applications we have social logins like facebook twitter have social logins like facebook twitter have social logins like facebook twitter and so on so i will show you how the and so on so i will show you how the and so on so i will show you how the dotnet team has made it easy to dotnet team has made it easy to dotnet team has made it easy to integrate social logins with the help of integrate social logins with the help of integrate social logins with the help of facebook facebook facebook lastly there are some advanced concepts lastly there are some advanced concepts lastly there are some advanced concepts like view component how to see database like view component how to see database like view component how to see database with tv initializer and once the data is with tv initializer and once the data is with tv initializer and once the data is seated in the database our final goal is seated in the database our final goal is seated in the database our final goal is deploying the application to azure deploying the application to azure deploying the application to azure so you can see there are quite a few so you can see there are quite a few so you can see there are quite a few topics that we will cover in the topics that we will cover in the topics that we will cover in the advanced course but with that you will advanced course but with that you will advanced course but with that you will get a solid foundation to build your get a solid foundation to build your get a solid foundation to build your real world project real world project real world project and if you like this free course please and if you like this free course please and if you like this free course please subscribe and like this video and i will subscribe and like this video and i will subscribe and like this video and i will have more free content uploaded every have more free content uploaded every have more free content uploaded every month month month so good luck with your journey of dot so good luck with your journey of dot so good luck with your journey of dot net core and happy coding